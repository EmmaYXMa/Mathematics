(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[         0,          0]
NotebookDataLength[    374099,       7710]
NotebookOptionsPosition[    369501,       7542]
NotebookOutlinePosition[    369887,       7559]
CellTagsIndexPosition[    369844,       7556]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Neural Networks", "Title",
 CellChangeTimes->{{3.6926446321814623`*^9, 3.692644643892906*^9}}],

Cell[CellGroupData[{

Cell["NetTrain", "Chapter",
 CellChangeTimes->{{3.6926446469607267`*^9, 3.692644653633976*^9}}],

Cell[CellGroupData[{

Cell["\<\
Define a single-layer neural network that takes in scalar numeric values and \
produces scalar numeric values:\
\>", "Subchapter",
 CellChangeTimes->{3.69264536502649*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "=", 
  RowBox[{"DotPlusLayer", "[", 
   RowBox[{"1", ",", " ", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", "\"\<Scalar\>\""}], ",", " ", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", " ", "\"\<Scalar\>\""}]}], 
   "]"}]}]], "Code",
 CellChangeTimes->{{3.6926446698115683`*^9, 3.692644713213236*^9}}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DotPlusLayer",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = True}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         TemplateBox[{GraphicsBox[{{
              Opacity[0.3], {{
                LineBox[
                 NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                LineBox[
                 NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                LineBox[
                 NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                LineBox[
                 NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                LineBox[
                 NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                LineBox[
                 NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
              AbsolutePointSize[5], 
              PointBox[{{0, 0}, {1, 0}}], 
              PointBox[
               NCache[{{
                  Rational[-1, 2], 1}, {
                  Rational[1, 2], 1}, {
                  Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
            ImageSize -> 32, BaseStyle -> GrayLevel[0.65]],StyleBox[
           "\"uninitialized\"", 
            GrayLevel[0.5], FontSize -> 8, StripOnInput -> False]},
          "Labeled",
          DisplayFunction->(GridBox[{{
              TagBox[
               ItemBox[
                PaneBox[
                 TagBox[#, "SkipImageSizeLevel"], 
                 Alignment -> {Center, Baseline}, BaselinePosition -> 
                 Baseline], DefaultBaseStyle -> "Labeled"], 
               "SkipImageSizeLevel"]}, {
              ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
            GridBoxAlignment -> {
             "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
            False, GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]& ),
          InterpretationFunction->(RowBox[{"Labeled", "[", 
             RowBox[{#, ",", #2}], "]"}]& )], GridBox[{
           {
            ItemBox[
             StyleBox["\<\"Parameters:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             StripOnInput->False], 
            ItemBox["\<\"\"\>",
             StripOnInput->False]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Size\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox["1", "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->
      GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquareMinusIconMedium"],
            ImageSizeCache->{15., {0., 15.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         TemplateBox[{GraphicsBox[{{
              Opacity[0.3], {{
                LineBox[
                 NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                LineBox[
                 NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                LineBox[
                 NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                LineBox[
                 NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                LineBox[
                 NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                LineBox[
                 NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
              AbsolutePointSize[5], 
              PointBox[{{0, 0}, {1, 0}}], 
              PointBox[
               NCache[{{
                  Rational[-1, 2], 1}, {
                  Rational[1, 2], 1}, {
                  Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
            ImageSize -> 32, BaseStyle -> GrayLevel[0.65]],StyleBox[
           "\"uninitialized\"", 
            GrayLevel[0.5], FontSize -> 8, StripOnInput -> False]},
          "Labeled",
          DisplayFunction->(GridBox[{{
              TagBox[
               ItemBox[
                PaneBox[
                 TagBox[#, "SkipImageSizeLevel"], 
                 Alignment -> {Center, Baseline}, BaselinePosition -> 
                 Baseline], DefaultBaseStyle -> "Labeled"], 
               "SkipImageSizeLevel"]}, {
              ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
            GridBoxAlignment -> {
             "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
            False, GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]& ),
          InterpretationFunction->(RowBox[{"Labeled", "[", 
             RowBox[{#, ",", #2}], "]"}]& )], GridBox[{
           {
            ItemBox[
             StyleBox["\<\"Parameters:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             StripOnInput->False], 
            ItemBox["\<\"\"\>",
             StripOnInput->False]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Size\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox["1", "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]},
           {
            ItemBox[
             StyleBox["\<\"Arrays:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             Frame->{{False, False}, {False, True}},
             FrameStyle->GrayLevel[0.85],
             StripOnInput->False], 
            ItemBox[
             InterpretationBox[
              StyleBox[
               GraphicsBox[{},
                BaselinePosition->(Scaled[0.] -> Baseline),
                ImageSize->{1, 11}],
               CacheGraphics->False],
              Spacer[{1, 11}]],
             Frame->{{False, False}, {False, True}},
             FrameStyle->GrayLevel[0.85],
             StripOnInput->False]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Weights\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox[
              
              TemplateBox[{
               "\"matrix\"","\" \"",
                TemplateBox[{
                 "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                  "\" \"", 
                  
                  TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\"", "\"1\""}, 
                   "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                 "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                 InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]},
               "RowDefault"], "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Biases\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox[
              
              TemplateBox[{
               "\"optional\"","\" \"",TemplateBox[{"\"vector\"", "\" \"", 
                  
                  TemplateBox[{
                   "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                   "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                   InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                 "RowDefault"]},
               "RowDefault"], "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]},
           {
            ItemBox[
             StyleBox["\<\"Ports:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             Frame->{{False, False}, {False, True}},
             FrameStyle->GrayLevel[0.85],
             StripOnInput->False], 
            ItemBox[
             InterpretationBox[
              StyleBox[
               GraphicsBox[{},
                BaselinePosition->(Scaled[0.] -> Baseline),
                ImageSize->{1, 11}],
               CacheGraphics->False],
              Spacer[{1, 11}]],
             Frame->{{False, False}, {False, True}},
             FrameStyle->GrayLevel[0.85],
             StripOnInput->False]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Input\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox[
              
              TemplateBox[{
               "\"encoded\"","\" \"",TemplateBox[{"\"vector\"", "\" \"", 
                  
                  TemplateBox[{
                   "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                   "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                   InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                 "RowDefault"]},
               "RowDefault"], "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Output\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox[
              
              TemplateBox[{
               "\"decoded\"","\" \"",TemplateBox[{"\"vector\"", "\" \"", 
                  
                  TemplateBox[{
                   "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                   "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                   InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                 "RowDefault"]},
               "RowDefault"], "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  None,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.692644715492651*^9, 3.692644715568952*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trained", " ", "=", " ", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net", ",", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"1", "\[Rule]", "8"}], ",", " ", 
      RowBox[{"2", "\[Rule]", "19"}], ",", " ", 
      RowBox[{"3", "\[Rule]", "28"}], ",", " ", 
      RowBox[{"4", "\[Rule]", " ", "37"}]}], "}"}]}], "]"}]}]], "Code",
 CellChangeTimes->{{3.692644787293194*^9, 3.692644838758964*^9}, {
  3.692645253227458*^9, 3.692645263014154*^9}}],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["DotPlusLayer", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open$$ = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = True), Appearance -> None,
                 Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 Opacity[0.3], {{
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
                 AbsolutePointSize[5], 
                 PointBox[{{0, 0}, {1, 0}}], 
                 PointBox[
                  NCache[{{
                    Rational[-1, 2], 1}, {
                    Rational[1, 2], 1}, {
                    Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
               ImageSize -> 32], 
              GridBox[{{
                 ItemBox[
                  StyleBox["\"Parameters:\"", Bold, StripOnInput -> False], 
                  StripOnInput -> False], 
                 ItemBox["\"\"", StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Size\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["1", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 Opacity[0.3], {{
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
                 AbsolutePointSize[5], 
                 PointBox[{{0, 0}, {1, 0}}], 
                 PointBox[
                  NCache[{{
                    Rational[-1, 2], 1}, {
                    Rational[1, 2], 1}, {
                    Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
               ImageSize -> 32], 
              GridBox[{{
                 ItemBox[
                  StyleBox["\"Parameters:\"", Bold, StripOnInput -> False], 
                  StripOnInput -> False], 
                 ItemBox["\"\"", StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Size\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["1", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["\"Arrays:\"", Bold, StripOnInput -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85], StripOnInput -> False], 
                 ItemBox[
                  InterpretationBox[
                   StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                   Spacer[{1, 11}]], Frame -> {{False, False}, {False, True}},
                   FrameStyle -> GrayLevel[0.85], StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Weights\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"matrix\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Biases\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["\"Ports:\"", Bold, StripOnInput -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85], StripOnInput -> False], 
                 ItemBox[
                  InterpretationBox[
                   StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                   Spacer[{1, 11}]], Frame -> {{False, False}, {False, True}},
                   FrameStyle -> GrayLevel[0.85], StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"encoded\"", "\" \"", 
                    TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"]}, "RowDefault"], "SummaryItem", 
                   StripOnInput -> False], "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"decoded\"", "\" \"", 
                    TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"]}, "RowDefault"], "SummaryItem", 
                   StripOnInput -> False], "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic], BaselinePosition -> 
        Baseline], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("None"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.692644843237027*^9, 3.692645268462347*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trained", "[", "2.4", "]"}]], "Code",
 CellChangeTimes->{{3.692644854327754*^9, 3.69264486701199*^9}}],

Cell[BoxData["22.04000473022461`"], "Output",
 CellChangeTimes->{{3.692644859481917*^9, 3.692644867963624*^9}, 
   3.6926452707595663`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trained", "[", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], "]"}]], "Code",
 CellChangeTimes->{{3.692644874652532*^9, 3.692644880788294*^9}, {
  3.6926451841414347`*^9, 3.692645228300157*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "8.600027084350586`", ",", "18.200010299682617`", ",", 
   "27.799991607666016`", ",", "37.39997482299805`"}], "}"}]], "Output",
 CellChangeTimes->{{3.692645198755097*^9, 3.692645239452104*^9}, 
   3.6926452741030207`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"trained", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "7"}], "}"}]}], "]"}]], "Code",
 CellChangeTimes->{{3.692645292177231*^9, 3.6926453111076727`*^9}}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1:eJwl0HtQE1cUBvAllipoS6MCgQoCIjVGQhUfEB45CImAsFwE0bSkBBTaNM3I
owbUagNMBQoiCAaoMxBeAwoyRaZYBSfY0oItdKiAkGGIoIgjUjCFYuQhzd79
Y2f3N/d+53yzjnGnjsQzCIIINT7Uu/J4w+3sXZm+xk91+eqspmbRKqNaFcs3
GrqjZjWhuabs86okymP6mzOaqv5vlqWqdMoOguh/ND2pHgkSVSFl9cufpzTj
QVbXPlVVYnskP9NM7/lun0jVTJmofTCoSaprZxxX3ceekw3wudybZbciHmL7
LC/xORp94gXeCGVJQ+M6MMnqkx1eHMfnf1xhwvXiIwdMWycpK0fAGlTnw6rG
HV7ivk8vbQFNj6JWNjWL+wW4OILsHtvQS/6L+7gatgEr46j89bfz+PxKmQs8
PaNqSh1bwPnfUtiAHhfzc1hvKHek2O0C93n5vFywhO/fucOFfd7Rp69XruD9
CV0fg1a/VqgYXMX9mmz2ACk/qQ/ZYgLU/4rOdocvPW+FBwYyKMOxV3vhWLtO
tEGyhjJhAfthYNiy+9zldyg7cBsPgFMjR9dywxTnzQlPWGWFfFIy+i42mciD
klHRFxPm6yhLdFovIERC+8VtZpSVHI4PGOQ+vLZIc3z/cakv3Pfc9DYgaT3l
jvAZPgjEjyI8sjdQVmeVA4hsayyGWt/DfWwj/cA3H6X4/v0+7pO74gfa3szy
epMP8Dy3nw5CEhHVM1mCLTkr9YfkfGvSzJmJ51czA4An1WWYtNMmugNAVlG8
Xhe0EffzThbAmXQ/8ewANmFvI4SwH+diH8k24X3ufwnhEu/q3UoD7Y9SD0ER
0/v3g4WbcV+SGwiMgIfbu7da4vxRbSCQTjFkRgNtk/QgiAvVszf6W+G+Y/uD
QdefLLrYhy2pGAsGp7o3Xn1SazyvsPQw+LukPicJFu7HDg2BXmJisjkP20H9
Xwhs3RFVNuVsg+8HN4aC9sbtirUt2B39USQkaS1OiXxtcZ7xloS+SLleOYgN
8S1hUMq525UX9yF2BBfB8Iuvixnx2A69bghY9W6xaZ9jE4d2Iyhzrl088RV2
B28vgh/sCly9FHTeiYfgmkVC0YscbIlegKB8jhkjbKZ9WYxA19zDaW+h75vF
ILBPzDLsbqX3ZUoQVEwvF9q1YY8pTiBQP3veOd9J5z+TIqgcurezepi262kE
T66mvWaN0K5TIHCKdO/MH6XnOaYhqOqrF599Qve3PGf0g6KC8Gls5bLSmM8i
xV0zdF6RYcwLzXb66Ol+rzIRVP9y4dcdC3R+4iKCCaVnQbmB7ifORuDMn4/e
vET/j6EcBCdXmtjfr2Crw3MR1LRJF1ZX6X1/5iH4H9JWr9w=
      "]]}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 7}, {-0.99995356798172, 66.19992065429688}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.692645304873239*^9, 3.692645311927071*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Define a network that takes in scalar numeric values and produces vectors of \
length two that are used as probabilities for the classes True and False:\
\>", "Subchapter",
 CellChangeTimes->{{3.692645502844046*^9, 3.692645509410571*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "=", " ", 
  RowBox[{"NetChain", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"DotPlusLayer", "[", "2", "]"}], ",", " ", 
      RowBox[{"SoftmaxLayer", "[", "2", "]"}]}], "}"}], ",", "\n", "\t", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", "\"\<Scalar\>\""}], ",", " ", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", " ", 
     RowBox[{"NetDecoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Class\>\"", ",", " ", 
        RowBox[{"{", 
         RowBox[{"True", ",", " ", "False"}], "}"}]}], "}"}], "]"}]}]}], 
   "]"}]}]], "Code",
 CellChangeTimes->{{3.692645572405744*^9, 3.692645682451355*^9}, {
  3.692645944702682*^9, 3.692645963983323*^9}}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"encoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Inputs", "Input"}, 
             "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"2"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["2", 
              GrayLevel[0.5]], {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[SoftmaxLayer, {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"2"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "2"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"2"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {2, 1}], "Biases" -> 
               NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[1, {2}]]], "Parameters" -> 
             Association["Size" -> 2, "$InputSize" -> 1], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {1}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {2}]]], "2" -> 
           Association[
            "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
             Association["Size" -> 2], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {2}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {2}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "2", "Inputs", "Input"] -> 
           NetPort["Layers", "1", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "2", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`EncodedType[
             NetEncoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Output" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Class", 
              Association[
              "Parameters" -> 
               Association["Labels" -> {True, False}, "Dimensions" -> 2], 
               "Input" -> NeuralNetworks`TensorT[1, {2}]]], 
             NeuralNetworks`TensorT[1, {2}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{264., {30.771240234375, 37.228759765625}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{
  3.692645661688342*^9, {3.692645946110168*^9, 3.692645964702517*^9}, 
   3.692646392313026*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trained", " ", "=", " ", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net", ",", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"1", " ", "\[Rule]", " ", "False"}], ",", " ", 
      RowBox[{"2", "\[Rule]", " ", "False"}], ",", " ", 
      RowBox[{"3", "\[Rule]", " ", "True"}], ",", " ", 
      RowBox[{"4", "\[Rule]", " ", "True"}]}], "}"}]}], "]"}]}]], "Code",
 CellChangeTimes->{{3.692645980077159*^9, 3.6926460242509193`*^9}}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"encoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Inputs", "Input"}, 
             "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"2"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["2", 
              GrayLevel[0.5]], {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[SoftmaxLayer, {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"2"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "2"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"2"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {2, 1}], "Biases" -> 
               NeuralNetworks`TensorT[1, {2}]], "Parameters" -> 
             Association["Size" -> 2, "$InputSize" -> 1], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {1}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {2}]]], "2" -> 
           Association[
            "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
             Association["Size" -> 2], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {2}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {2}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "2", "Inputs", "Input"] -> 
           NetPort["Layers", "1", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "2", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`EncodedType[
             NetEncoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Output" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Class", 
              Association[
              "Parameters" -> 
               Association["Labels" -> {True, False}, "Dimensions" -> 2], 
               "Input" -> NeuralNetworks`TensorT[1, {2}]]], 
             NeuralNetworks`TensorT[1, {2}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{264., {30.771240234375, 37.228759765625}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.692646034240129*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trained", " ", "[", "3.5", "]"}]], "Code",
 CellChangeTimes->{{3.69264604160351*^9, 3.692646048993393*^9}}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.692646049528092*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trained", "[", 
  RowBox[{"Range", "[", "10", "]"}], "]"}]], "Code",
 CellChangeTimes->{{3.6926460533608847`*^9, 3.6926460654441957`*^9}, {
  3.692646171186792*^9, 3.692646176524859*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "False", ",", "False", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True"}], "}"}]], "Output",
 CellChangeTimes->{3.692646066684383*^9, 3.692646177742922*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"trained", "[", 
    RowBox[{"x", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Probability\>\"", ",", " ", "True"}], "}"}]}], "]"}], ",", 
   " ", 
   RowBox[{"{", 
    RowBox[{"x", ",", " ", "0", ",", " ", "5"}], "}"}]}], "]"}]], "Code",
 CellChangeTimes->{{3.692646200932927*^9, 3.692646265051319*^9}}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1: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
QPnO
      "]]}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 5}, {0., 0.9995619654655457}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.69264624323002*^9, 3.69264626610415*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"net", " ", "=", " ", 
  RowBox[{"NetChain", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"32", ",", " ", "Tanh", ",", " ", "1"}], "}"}], ",", " ", 
    RowBox[{"\"\<Input\>\"", " ", "\[Rule]", "2"}], ",", " ", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", "\"\<Scalar\>\""}]}], 
   "]"}]}]], "Code",
 CellChangeTimes->{{3.6926462709784527`*^9, 3.692646313852862*^9}, {
  3.692646402144946*^9, 3.6926464490227013`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Define a three-layer network that takes in vectors of length two and produces \
scalar numeric values:\
\>", "Subchapter",
 CellChangeTimes->{3.692646659113158*^9}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"2"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Inputs", "Input"}, "Mouse"], 
            "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"32"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["2", 
              GrayLevel[0.5]], {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "2"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"32"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "2"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["3", 
              GrayLevel[0.5]], {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "3"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {32, 2}], "Biases" -> 
               NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[1, {32}]]], "Parameters" -> 
             Association["Size" -> 32, "$InputSize" -> 2], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {2}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {32}]]], "2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Tanh, "$Dimensions" -> {32}, "$Rank" -> 1], 
             "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {32}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {32}]]], "3" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {1, 32}], "Biases" -> 
               NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[1, {1}]]], "Parameters" -> 
             Association["Size" -> 1, "$InputSize" -> 32], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {32}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {1}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "2", "Inputs", "Input"] -> 
           NetPort["Layers", "1", "Outputs", "Output"], 
           NetPort["Layers", "3", "Inputs", "Input"] -> 
           NetPort["Layers", "2", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "3", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`TensorT[1, {2}]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Input" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{288., {39.771240234375, 46.228759765625}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{
  3.692646314490692*^9, {3.692646396127309*^9, 3.692646451659688*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"trainingData", " ", "=", " ", 
   RowBox[{"Flatten", "[", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"x", ",", "y"}], "}"}], "\[Rule]", 
       RowBox[{"x", "*", "y"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", 
        RowBox[{"-", "1"}], ",", "1", ",", ".005"}], "}"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{"y", ",", " ", 
        RowBox[{"-", "1"}], ",", "1", ",", ".005"}], "}"}]}], "]"}], "]"}]}], 
  ";"}]], "Code",
 CellChangeTimes->{{3.6926466808062477`*^9, 3.6926467371439037`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trained", " ", "=", " ", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net", ",", " ", "trainingData", ",", " ", 
    RowBox[{"BatchSize", "\[Rule]", "1024"}]}], "]"}]}]], "Code",
 CellChangeTimes->{{3.692646839478088*^9, 3.692646861951653*^9}, {
  3.692646981679017*^9, 3.69264700648776*^9}}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"2"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Inputs", "Input"}, "Mouse"], 
            "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"32"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["2", 
              GrayLevel[0.5]], {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "2"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"32"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "2"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["3", 
              GrayLevel[0.5]], {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "3"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {32, 2}], "Biases" -> 
               NeuralNetworks`TensorT[1, {32}]], "Parameters" -> 
             Association["Size" -> 32, "$InputSize" -> 2], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {2}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {32}]]], "2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Tanh, "$Dimensions" -> {32}, "$Rank" -> 1], 
             "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {32}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {32}]]], "3" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {1, 32}], "Biases" -> 
               NeuralNetworks`TensorT[1, {1}]], "Parameters" -> 
             Association["Size" -> 1, "$InputSize" -> 32], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {32}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {1}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "2", "Inputs", "Input"] -> 
           NetPort["Layers", "1", "Outputs", "Output"], 
           NetPort["Layers", "3", "Inputs", "Input"] -> 
           NetPort["Layers", "2", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "3", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`TensorT[1, {2}]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Input" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{288., {39.771240234375, 46.228759765625}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.692647012621269*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot3D", "[", 
  RowBox[{
   RowBox[{"trained", "[", 
    RowBox[{"{", 
     RowBox[{"x", ",", "y"}], "}"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "]"}]], "Code",
 CellChangeTimes->{{3.692647034281608*^9, 3.69264706891683*^9}, {
  3.692647103582386*^9, 3.692647104685025*^9}}],

Cell[BoxData[
 Graphics3DBox[GraphicsComplex3DBox[CompressedData["
1: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
PhQBnGn+ZB74ek8UcLbV8pf1sbuEGOBM85fbEQIexQDnMVr+LySpo7cYA5wH
qeM2ud7B7V7kAOcm6jhPdKe2hzKBM/K/M1Nfm4Gzt/ocUXzCfy4mAud16nOH
xPvNc40BzupzIVNZX3uEhwDnLupzjficNjUTmc+5gPpgUn3/7TMt/zrJ1f/U
Iua/NdbyJ5y/+MYEnOkn8YsMqXHAmeZfJ1+AXetk4Lxey1+Wu33QxAycaf5y
Ox1zF6cD585a/nI7zjUDLcBZm0cpfqZhVglwFtV5C9GfLRldAJy91HmOoi+V
n8+UM9pn0G8cbgHOD9V5FOF580XzJOAcpc67FJ9/gE8UcN6vztOI/xbZsQvz
Oe9RX6uuvv+WreX/SnJNXzuB+W+RWv5kXdxSz/w3mr+sS1M+SQXO9FPWHVpW
WoDzIy1/su/vocsGzjR/OX7NuYW5wHmflj/h/FuHfOCsrQsInxtrX5QB5w3q
PJzofS+ftgLn+eq8neivrnYqBM4T1Hm+4m88P5MNnGm+Ms+9NrXM51Tnk+Vk
vLL+9nMce/6p6w7CudgO+Zw+1A98Xd9/26/lT3yhIch/W6/lT/y39ocSgDPN
n+ybjJ5lAb40fzJufCDkAGf6SfZh31pYAJxp/mQ8cY8uBs6NtPxJP7/jw3xO
bZ2r+JwrLZXAWR1PFH3vKQe2DuymrkOJXvX2RCtwVseZO4SnY8LifNaf1XUu
0f/2vcd8TpovmUfN3M18Ts0HID6nXYfJzOdcqPlaRs5/m6zlL3Me2fBD5r99
ruUvX6+wdSjz32j+sv7xsO7Mf6P5k/Fk4at84Evzlzn3c21uBc70k8zPx39S
BpxNWv6E/+1S5nNq/oz6ex/E/DdUX+cYNo75b/mqf0L0gdO6M/8tRqtLJOOt
ZVMRcL6s+jNEXzx1RjZwPqj6OcTntN9Uw3xOLS/icxbvS2Q+p/3/47810/Kv
k65ZY43Mf6P5E7/3nzbMf6P5k9/7eFfmv9H8yTjzSYti4Oyr5U94/vCK+Zw0
f7Kuf7Sjguep+EKp+mrg34LpuhV9WN2X9knWL8GXVrC6L8qB+NvL/qri45X+
s/1iFd++ch+9ZrHvRT6hsO9CNe+7knzs/Xex8+9ov90l2IGdt0e6o/d+9v4B
pBu/mcrqhJA+/WVLK9SpIL2pVxw7F4/0Z8n57Fw83v8f0CIK9q03MW7SgrcH
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
Jw==
   "], {{
     {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
       GrayLevel[1], 3], 
      StyleBox[GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1:eJwtmXfgT9Ubx++55yqbkJGVVDIy27QnWjYlSUilIi1piRJpqaRBhewRoiVN
TSuRVREZZcsoJb/X+/e+f5zv87rne+/93HvuOc/zfp5TrcsdLW9PkyR5lT8R
OwN7FHZVSJLVWZLU47gUtg//nEN/Y3gBrTL9GfY7WiVdi/2KdjR8mHO/gcvB
Afs1rax+BLuEVh0uiF1MOxY+Evs97Xi4EHYRrSp8BHY37Sb4JOxd3Hc2tzkL
3k5rT//x2C208+Gq2IW0KnAB7FZaC/g47N1c+y7XNoH/oF1NfzXsGlpDuDT2
Z9op8NHYnbTO8InYlbST4ZLYpbQT4MLYIgWSZDh8AVwIfgE+D76d33qb3zoT
Lkn/SPovgYvCL8EXwqXhN+CmcDF4BHwRPJBrv+LaS+Ey9L9JfzN4Fa2uvg22
BP2vwRfDR8GjUp9/L9e+z7XnwD/SatNfHLuCVgcugS3F+a/Dl8HLaDXgoth7
uPY9rj0b/oF2Iv1FsPP1e/Ah/r8H7gHXxO6gXQ+fgN1MOxeugt1EOweujL0G
+yj37Mdc6gQ/Dj8Mt4YfhO+G28APwffAHeD+8P3wtfAA+AG4IzwQfhB+Bv4a
/hiuwTPdB3+OfY7+b+FP6W8LPwzfCz+dejznwTfCQ+GBcCv4AfgueBvP2o7j
6tjrsI/R/xD9XeAn4QFwV/gp+DH4BngI/Ch8M/wcPATuBj8NPw7345k+gs/n
ng/A8xLPkwfhjxPPgQHwl4nnxnraWVxfAXsH/TPoH8zxbxw3wVbE/kRrBJfB
rqWdBpfD/kI7FS6L3Ug7G66EXUc7HS6P3UBrDB+DvZX2D884gd+5BT4Ij4fv
p81NPIcfhj+FX9b3gT9JPD8fhecnnnvv0Ibx/3Oxz2O/07fQmHD8N3Yc5/4O
X8b/jsXex/EHib/V4/IRied/S477wX24ZrbeDx7G/ysyVydwfLXGLV+nc+h/
OF+n78EP5WPyLnwvXAGeCT8AN4Bn673g4+B34NHY1dx/Kb81nP4rOV5If1+4
GjwLHpE/02L4Hq1VeAZ8BxzhyXBvrXl4KnyX1iE8HX4iehyay+dovdH/Nn13
woXhafAj+fd6H+4FZ/AU+HY4hSfBt8EBngi/BF8FL4I/l7+A/5E/09rjPXZq
TsEF6D+gbwUfAf8Ffwgf4Jw/4aG0xTzbVfTNox2mf7/O0byg/yXNWfr/o38f
PA3ux//Wy5/p22s+wo9Fr0H5kE9pR9L/t3yP/CbX7oafpC3inCvpGwwvgC+H
Z9Ne4fzNmgvwfs7fA0/XOqF/AzwTHgJvhIfQFnLtFfQ9BS9JPB9m0Z7knE30
9c/XwgfwM/DFWvPws/Al8hfwPrgXXAe7V2sMrq1nZ449m9pnHpAfhOti39V6
4rde4NpDHD/C8SnYf7U24EYa4wL2R/KZBQrY1yi+HKY9Bp+mdaB5D9fXmqM9
BDfEluf8t1K/VwV4XOqxOgYen/ob/SWfDtfDlqN/bOoxnKMYxbM9z7MVpv/F
1H7moNYJ3AD7J02BvZbmF+c8lTp2R3ho6hiawk+kjlNDaRfAX3DPWdhS3P9Z
fevcb3wED8x91Fz4KfhCeD78InwFvAB+Ab5cvgAeBjeDv4Gfhi+Cv9Q8kU/i
/i/Cj+Y+6kP48dzXzZNfhMvA/0mU8JyPw6drTcCD4DPgL2jF4X855x1safkW
eHDmePSp1mPmePQJPCj3jR9r7snXcv5wuCz3HJN6zWoMbqX/RublLo67c1wj
f9ee9HcN1j5tNCeDtU9rze1gzdJO6ytYg7TV/A/WRFfKZ8Ll4RZaO8H66GrF
+uBYfSN8bbAmaq95HqyVOsKtgmN4V7gjXD8/p0WwjzkLbgSX1NjADYL9TSO4
drAv7AC3DPZVZ8IN4S28f0l4Jn3b4aXwM9H+spniVLCfawjXgotoHcB14JPg
G+D2wXrherht/gyXKY7ANeGWcDO4oOYpfEawzzgPPj1YX1wKnxvs2y6WDgn+
tpdIz8AnyL8n/qa6TwO4ZrB+6Qy3y59HY9s02LedDtcL1p5XKc4Ga8zr4NbB
Oq4T3AZO8nGrHzzvrlC8C/ap58CnBvvF0+C6wbGiqWJ6sK89Fz4tOFY0hk8J
9m314BODfXB9uEbwXJYemBO8LqUBPgpel4qtc4P9h/TD7GCd+yz8RLAmUFx+
P9dL0h6Dg9eEdMW7wWta8fo9uG9qLTEx2A9Jl04I9mHSe9PhIczv8zj+LFpH
309/73yO9YA7B/sV6f+pwbpvhOZJsF+U5nw7WJ92hzsF+znp7Wlw/9Rxf0aw
P5sOjw/W1y/LzwTryjfgEZqTGl+4fHB8OxYuh22ReXykQaTfB8OPBMecGnBV
7F/Bc+OkfK1pvp0JHwNfCDcO1ggXwGcF6/pu8HXBuc5N8PXBvnM8PCo4JkyD
xwXnIq8rVuba701ppFwTviL/E5xzSB/2h5um1rR9g2POBPj14Fg0EX4D7g1P
gt/UN8r8rKliKX0bab8lHhPlZf/Sfg/2z/8lvla/Oyw4Pk+Gx8AtuX51sA/v
mz/nKxz3gV9TXIPvgkfKD8N3wq8qpsAD4CnwWPg2+EX46WCt9yE8C27F/dcE
+9v76R9N/6scd6V/N/ZN+rvBe+DRcHfFJHhM9HzQ+47m+Eb6d2HfoL8t/Etw
zJXuGMM5rwXrgrHwSLg15/wUrA+lIz6j/8Ngnap18UGwvtR8mxmsm+Q3esGX
wr3gHsHx6m749uB4dRd8W7AevAe+I1hH3A53D9YRd8A3Ba8VrYsbgmPabXA3
eDnPVovjYtjm2D7096T/W44r5t9UumYm/ZPp/5XjM+V3Uq9rrdNJwbpmFjwF
7gm/AD8F3wo/Dw8Njqt3wrfmc6w3fAt8CzwMflJzkvtvw77OWL2cOedZAveA
99H/FtwZ3gqPgtfKL3NtAezP4f9hNwnYggWs76XztwfroiODv9URcNS76Dy4
EHY9rRBcJPerJ2GqBc8Lxdziwdq2Jnxc8DzlMPkn8bflZ5LDiZ9dOifDbqIV
g0tj/wiO9UnwHJREOKT1wIUDudGp2I30F6XvqOD3U06RYjfQCsPFsL/RisAl
gnV3Lbh6sMavDR8frM3rwCfA12S+Xjq5Y/4bL8PXZr7XCPi6zM/6Ctwm8zhK
p3XIPC7SG+0zj5f0z/WZ32ck3Cnz2n4tek7cwO92yH2a/GGF4LzqOPgY7H7l
GJx3cuZ87nj6K2H/pZ0AVw7O7arDFbF7aZXgMsFrsSJcKnguVIbLBq9FabOi
wWtXeUFJ+b3M14/l2d7InCf/CD+fz/Vv4VGZ8/Zl8A7OPZFrq2C3Y3fLh9G6
5HNoF+f8xfEu2g+0OfSvo39HdF1kFX1LgmsVK+HF8KDoHF/1kE9S6xblPl/C
5RLnHbqf7ruZ9nf+u7/SPk7tP+VHy+bvO5m+Ranji/KjJanHWeO9GK6aODeR
Nlyj5wzW4D/By4LrLivgRcF1HeVWX8Gf8XxFOT4YXddRzvJ17qO+h78JzmvX
wSv1ztg/aOs15/Mx2ZS4tqQc6svgnGAtvCK4zqR86ovgvOEX+MfgfOJneHlw
zelHeCE8l+c5pO8fXTdaTv8Cjt/MXJdZEZ1DKM+aH/z7m/Nn+DNxHNqaj6XG
9Pe870Di+LQ+j6fKhbek1n7SgP1zPalc79c8Fku7rUqtP5Xbrkmtl5RTr0yt
weQMVqfWtMqFH4keN41f72ifr9zwi9RzXr7rj9R6Vbl233yeKA7cqZw5cZ64
IdcAysF7RccL+d1lqTWt6iEdomOT4uo10fF0rdZ4dExch22X2Vdqrko/67up
Xqr5q3lYMB/Dvfnc1vfdY3f1/zHcl8/Jnfn4lqC9lrlupRrUOXrnxLXNc6P1
g7Re5+gYoXh+Q3Qc+RXbJTpeKE+/JTpGK0//ifOaJK4t6Bn25/Ps5uj4qDh8
o3KnxHn3/NR+Q/Fibz4Pt+XX7ciff3P+jfR9N6XW2KoNbkytjZWLrUutwfSt
f06tgVWLWJHHAn3ftan1sOoGP6bWb6pF/Cb/nbi+oTV0EdwkuIakMbkPrhcd
7xT3+mTOSbTWnssc41Vr6pc59yiWx+QunH+N/DzntUpcF12e2kep1vELXDdx
/WQ7fHbi3HNHam2voLQtdS6g+vbO1PmL6tv7UucpBfI4r/s3l4/Nn1+18V35
/Jcm3Zs6x1H9fH/q3Ee1btUhVBP7RD4cvjxxnfxAvqZUJ/8ndW6iOvl/qfMa
1WkPpc4xVZdWLfMZeBD3OZw6x1SNV4FS+ZHypH35XJRvPj1a86tOXlNzKHEt
XXNaPvMg7el8DU5NPZc1HzbIF0Tr01ex27Qm5Sui9xOWwd8pXnNcJT9Hfkjf
92TsJM4pDh8dfF/d/9vg++r+Wldvp9YGE/nzXua4otixNV8/+u3puS+dlvqd
5J+25P5pZ76+emaOi/KBAzLHV2mv8tFzQ3XXLDqvV53/yOj8WjlQgehcXrX3
ovIFifcLCkfn5qrHxug6gGrsxaNzTO0jHBFdE9AeSsnofFN12lLR+bLqt8dE
5/6qzVaKzvFV760SnZtUynWi5vzNiv/ReYrq7WfI3yXeyygTnQur3ntsdC6m
Orzypikaa3Rc2WhdofdvDb8F/4I9KlrHqqZaOlr3qj7ZlvZS4jpSwWjdqzEp
BN+cuL5aIro2ohrs0dE6WbW46tFaWrWXitF6VbWjatHaW3WYytE6WfWlctH6
XLWgqtGaXLWgItE1GdV+P0qtYaS7tsLNE9dmL4rOU6RJFkoTJda350fr4R+w
F0Zr6eXYC6K1tLTKxbThieNg0+h8Svlcrei6tGpiqgONgocz/r+nzv1V730r
c91fNaLvUutG5TgLUutG6aVLonNV7SU1i86zVmIvpT2ReA9lT+o6iWrXqsNs
yddau+gcWXXLKZlzNum99vlzKk5dF52T1svX7Pp8vXSNzmEb5jpxqsaE/8/I
nONJJ3ePzklVz+wGj0tcP7wpOj9VzbNHdExUvOgYPQ6qkV4fnVcqHrWJrgmo
pvp5as0pTXtQcTRx7f2y6LxYY7s7tS+SPwz5nJRf+jt1nUp1+HmpdZq09NzU
elUaW+OyJV/v8jPSKZrf8kXSdJWY552i6wmqu/aMzt9VP6yQxw6tp6ui6yfK
45U3aO/jHcbn5Og9KdWQp2bObxVnX8m8d/U9/G3qfEG5be3ovSTVQutE722p
znlr9JirDtwwej9LOvmU6D0m1UuXpq6taa9kUuY8XHqjUfSel+qoV0T7c+2B
jsy8r6b5/H0eZ6VXP02tXaVvx2ber1qtNR1db1G9dHTmPS3NvbrRe2SqjU/O
XBeQtvksdX6hHKRB9P6d6revZt6rWwqfl4+bNMk3qfM45fv1o7WK4vLXeaxX
Xj8xcx1BfmZM5n24VXCT6D01jee4zLnrGrhldO7/E7Z5dL1C518eXa/Qe51G
G5R4T+Ss6H067df8kLrmqf2sCZnz55+1PjLvI2rtt4quJ6i/cfSeoPLis6P3
7/SOV0bX3LTX2SK6vqFnuzqf85ozp0bvaWr/aHzm/FzP/D+cl+Wm
          "]], 
         Polygon3DBox[CompressedData["
1:eJwtmmXAVUUXRs/MXEJUBBQBG7uxO7C7sBMURQUVW0ARA7sAC7EbMLFFxQ7s
7kDF7tbP+tZyz495z6w758Z7zszez37m9NxrcJ+DctM0e/KnxbF9aZqdOS4L
H8MLd8L7O56Cl4QPgjdg/Bx4DfhYeHv4Ynh5+Ah4C/h8uB1tY3gd3v8C/QUZ
3w/uzfjp8Ky0XeFtGX+H/lKMD4Y3ZHwUvBx8OLw5fB68P3wDfAJ8K7wCfCS8
JXwBPBttN3g7Pu9d+qszPlxmfBzchbYjvDXjb9OfXL9vAHw8fB98MLwvfAK8
BHwgvD7vPxu+p/LejI+AF4cPgNdj/Cy4E217fw/jb9LvTNsB3gp+i/699frt
Ax8Hd6Xt7vWD36M/O20PeAf4ffqrcv7RcB8+fyzcjdYX3pHxD+ivyPhRfj7j
F8JP1P/38BS/9+76+/rDx8Krwcd4vTn/IngW2nbeL8bfoN+BtqXXH36Z/g+c
ty7cg+NR8Dscl4RbHA+Gl67XayN4NPw3vDK8DO9/HN4aHgMPZPw6+Cl4BHxk
ivs7FT4BHgaPgbeBz4UHcf718NPwifDRjJ8LbwufDx/I+AT4GXgkfEyK+bEZ
fJb3h/Fr4Js5fg5/QbuF/nOMn0z/2BTzpQ98HnwAY+Ph5+FT4BEprufvvL4J
3JPjUPhzjqvCnTkeDr/FcXE4czwIfqX+v6fz/kvhL3l9dXhWjkfCL9XfNzLF
fPyD1zeF5+c4DH6b4xJw4TgYfq3+vjM5/3L4BfgM53+K+fAifCZ8Yor7+Wq9
fmfAl8Fv8jmLwYnjgfCGzhF4CuOd2rCO4cfhB+BZ4A85bzl4Bo6HMLYsn3cY
vFmO6/8PvCa8Iuc/Ab8Mnw2flGL9f8F5q8FdOB4B/8v4WvBKjD8JP1njxREp
4sef8Irw0vCj8Cb1/9uL918F/wWvBPdi/DG4LW0j4wf8PP03GL8APhu+Em7R
NoDXgp+l38b/GV4bfs4AR1ubw8rwU/TX4/0nwbvzfVfAm9br2R++Gl6zztcd
4Evgdet82y3H/Ui03vAqfN5U+uvU+bprjuv/Ecfl4Q4cD4ULbX14Tc5/hv6i
nD8IXpfxM+Fl4EPhTXOsh5c57yX/N68Hbf06f/fI8f8+W3//8BTx1vm6Ezxf
jng7A20L47WfQ38l2k3wdfC/xgNjPHwTXLj/q8C3wOPhBN/H58wIT4d3NR7R
boUnwJnxNY2J8K1wW3gNY45rDW4DT+L95pe34T6M3VHzzLvwdsZn2l3wzXCL
8ycz3gH+GN6Fsdth/sXmHXhb4yc8A/wRvLPfDbeHP4R3gtfyHHgS3I7PWw9+
EL4Hngl+lvPnhn+B9zN+wHPBP8P7Gs9pF8LnwD/RX5J2ETwa/sV8QBsLj4J/
Nl7w/l7wr/Bk4xU8J/wTPAC+H54J/gTezflDmwLfDc/I71kavgy+EP7N+UN7
AL4L7sD4ysYw+Hq4gXv7mXTvhGeAe8GXw2Ph372WfF9b+H14B+MDvAz8G3wf
/FmO9TNLjvj8aY710THH+lqQdhw8lPO/of9BjvXSluND8LQc870dx4ddfzni
/b+cPwX+JMf6mznHej6Om/cIPA6+Ez4Yvs34CN8GT8+xHmbi+Ah8COO3G7/g
2713HOeDP+Pz7zZ2wQvD38L3OHfzf5eleQ/eHl6Idip8HPwt/cVoo+DT4B/p
96QNhQ+Bv6Q/D21fuB/8Gf05aXsbD+Dp9OemDYD7wp/Sn4u2j+sP/oT+6zni
0z/wA/C8tIHGL/hz+u/liH9tOD5oPM8R7/5m/H54ftow+FD4K+MB7Rz4VPgH
4yXnLwJ/B98LL0w7DT4e/s54QbsCvgj+g/4KtAnwlfDf9Kfy/jngH+F9XHhc
334cFuH1V43POfTEwhxfMb7n0B8L5cj/f+bQUwtwfBH+O4deWTBHPOld8/cu
OfKd67EbPI3vuwv+NYf+mSdH/P2e49Zwtxzx8rccemzeHPH8hxLv71D/319y
6Km5c8TzP0rM50VTzL9fS1yf+er8+wp+DL4f7sjE+L3E+lwkxfzdE74aPprP
u9n1UuOv92s4PCNtK3ijFNejPW1zeP0U//8E3vcR/KUxj/53vL8T/f81MT/7
wVfRH8bYTfBMrfh/N05xvV/h9QXhP+FB8C6cfwl8GK/fAHdvxf3ZifFp9DvS
toU3h1+nvzPnX+x84fyJ8Hc5fu/sOfLZtzn0W9cc+fYzzn8ZfjrF+nuE12f1
98N9jTXwzPCn8O7wY3BX+Gt4T7hdifXRK4defpTjbPBXjPeDWyXWy5I59OPD
HLvAXzC+B/wU3AP+Ad4bfgmeH/4D3r/O7+7w93B/eHnaePgK+C/6y9Kugy+D
/0d/Odr18OXwn/Rf5v0LeP3hgXCbEutzqRz6u22J9bt0Dv09FL4PHgPfAf+c
Q//OlSMf/5Tjes/J8WnnX4l4M29d37/BS7teUqznr3Pk19ly6KHM+F7w4vBr
cIH7w0vkuH9ztIJ34/0f0+/RivN3hT+i/yPnz+v6qPnkpxLxr3uN36vwOTub
G2kf+l7Gr2H8GF6/BV6f9hB8L+Mztwl9YXxZJ0c8eqDquUGMn9SKHLhQCk1v
buxqHKI/nTbRawJ/7fygXey9yjGXndOuZWuCTeBtmqgVOuXQZuYYc42atk+K
mlKtqwZeL4XmVRurEddNobHVjmqEv+h3bkI7vJVibbnGPldr0qbRH2+e5f87
C/4Avt44B58Jvw9f57yD7696aiCfM7IVmqNJsQbUIqcx/g79q+nP3iY0/jYp
NJRa6nTG36V/jXGtTWiQf5qY42qTUxl/uwlt1pXxU+C3nL+uM/hk+E3nq+sC
no32iFo3xfnmrJxiTZnLrCmsla2ZrTUUT9ZS5lhz7RYl9MIA+t9z7tol8ttO
OfL1hiX0Sd8c+W+rEvlhvxz5b8sSemHfHPll+xLrSRNAvWO9eTq8TY58tFaJ
fLQj/DXcq4Q+2Bj+At64hD7qlyMfnQi/Bl+So54YCb8OX5qj3jgJfsP1DHdu
E2t28RQ1h2vZmLAYvGwTscKaZVl4lSZqGWPmEik0tbH09xS5wJyg1rEGWy5F
jWZtZo26QooazNq1fQ6t3rsJLWONsyq8ThO1jxp9tRQ1r9rdGmz5FDWNtdnK
JfLv1jn0gxqrlSJmqr2MiXOmiEnGyn/ga1No7kG891f4ghT3cDe4PdfgjhSa
bpi1OuNLwivAr/L+R3ltCP2Dee0MxrrBs5eIAye2ou2XogZ3zBr8qBQ1i7W5
79FneaTEZ83F992QQwNPqevLnJbrenNOOjefaWJum0NvzLH+za2b5FhLrilr
FWOKudMcaqxRI6mVzBnzw6vmiFPd6fcw9tBfnfH1GP+4jhnLjIGe45zaHz6k
ibnmHD8lxRx07htTN0sRo421xug1UmjIn+ocHZJijjp3zWFzpci55rYh8KZw
H/jHHBqlbYoaQu3yeYpYa8xVe1pjzJQiR1l7WGOoTbrV882hc6TIaeZWNf8C
KTwBawFrigVT1PTWGuY4tYqaxdynJps/RY2uVjNH9nRON5E7zaE94J5N5FZr
oo4pcqq1kjVFlxQ1h7WGNVqnFJrP2k2N3L7+XrXzJPj2FDlwYIkcaDx6uonc
qAZfKoVGVZsf3Yp8s6dhs4RmnSdFTlTL3ghfA99oDiuhIWZLUVM9UHOiXoEa
2Fx5LXw+fCm8eYma+uQUHoK1tppabW3Ong/esYQeGJyj3joKfgo+J0e9qUen
V6eH17WEx9W/zscZ6/xzPrlGXCt6dnp3emKzlPD89P705GYt4cnpzenxdS6h
EW9IUbOoHfWY9Jqs8fUmrdH1ro6v62GZHLWE81/tNLyuD2uCmUt4qHqpeqB6
rXoqelsnNOG1uL6G1vnr/F+ohGfqGj6jNmOBnp9jemh6aXoqeqd6Ypem0AR6
ZXosei16gnq3epSHpfAU9S7NiQPrenN9qgkG1fU9ZwlPwtpkWF3feop6i3qI
eqMnwwek0BRzl/DsLk6hgfXy9PzGwVc24QXunKMWM2eZu/TY9Nr0NPQy9eT0
5vQ09Hb1pa29zTHmGmsMvbXRTdQeeiB6P3qCeiN6LnpfenB6MXo0emd6Yno3
ejxnpfDU9H70mMbA45rwnvTQ9NL0oPRK9dj02syJ5kY9Lr0uPTy970Ny1FrW
XDvB++eoxcy55l49yPNSaHy9yaE5vBM9lL4lPMdLUtQkepHWDBPhSU3UEtYE
V6fwvK0V9Az1DvWo9Lb1fPR+RjbhvetZnZuiRtDLska4Cp7YRO1wJO1J+mfn
8GdOYfzAFB77vOY2eHAKT30B13MJ/+HIHP6Ev9nfPiRHvblHCb/oqBz+gznN
XHdEjlxnzjO3jay5cL8S/sxxOerTvUv4P8Nz6PsBJfyjY3Po+31L+EsjctQD
XmOv9cE5/JgDSvglJ+Xwsw4q4fecksO/Ohp+Fj4vh19yYAn/5WQTHnxECT/0
rBz+02El/NAzc/hhg0vo6VNz+F2L5qjN+vGatfQQ2lS6o3L4TSPgF+GxOfT3
MfBz8Pk5/Jzh8PPwBTn8n2PhF+ALc/hTagBz77k5tMGp/k8p9lR6Oj95fWqK
7/C73AO5DZ7cxN6I+Uv93KXmCz0YvVU9Cr0ZPZ5eVU/q/Vizqq8713ynnupR
85n6696a77rXfGWNcWMKj8baw5qke81P6i9rlm41fz5f9ZZ6Tn2nvrI+UM+p
z9S3elDqW/Wd9YI1vXpO/ac+0yOaDD/chHd0Wo7axnvivTk+h9fnnHJujfYz
UtwT7401r7XvS014UXpK96XwpPSa/vNsaj7Wy9Ej0CtQT+p9WeNZ6+kh6OVM
qfnb/PxG1ec9a/5Wn+oh9avx3bh9Bu09+tcy1r1NzCm9Vue8c+3mElpIzan2
vLVEbWRNZG10S4nayJrA2kDNpDacMYeWuqmEVlXDqmW9PhNrvvJ6OWcn1Hji
9XKN6P26pg+omlBtuDBtkRJrQq/RNe1acQ2Nr/HKtTWhxL3zHqrNJ8GbNVHT
WdtNLKGV1eBq8etLaHU1vlp/dInayxrKWmpMidrHmszaTM27EPhXCi2sRvP6
zFG1220ltJs1p7Xn7SVqS2s2a7cb4TWa0Pxqf9e03rIxxbV+Q4laQE2vtr8D
3qWJGtVaNdXPX6xqH9eoXq0xxbXrGr2nzj/XrjFFL9YYZKwxBo6t8d/YaIy8
qOa/vjX+j6v50fhujLi3zu8RdX1PrvPT+boj728Hzw7fzdhe8NwprtHjOWpM
57v6zdrTGK2XbI1n7LZmfTxFDLKWVc/rjRnjtmlFzftYihhpLXxuiVrGmtTa
1Jis92KNaKxWg42q+Vhtpga7ta4/tZk5Re/fmG2uMebpZRtzjYXGyEk1Xg2p
69X4pR4dWtfzVTXfGc/MEVfW/OX6tkbVm7fGtXY1R+gFqREH1Hw8puY/8505
44qan80l5ozRNd+bS6x3rN3dX7E2P6/Etbams7YbVSKWGlP1Jt4qkcvNseba
N0t8l9+plni7hLY155v73ylxr73naiE1r1p3n6qF3y2R+9VMaqdpJbT0fzkf
/qDEtfgvh8Pvw9c2ofHUervW7zu8avH3Smg/NYXa4pMSc8k5ZSz91DXfRAw0
Fg6s33dirQ2mlNACajq13eMltJ6aUe34WAntqCZUGz5cQouqGdQOD5XQDuYs
c9eDJXKXGkOt8XoJraYGU4tNL3HvnQPmso1aoU8eTOEPfMz4HU3kHHPPhyVi
mzFOrfRRiVykRlerX15ibVjzWfu5Rryf36RYO5eWqM2t2azdtmjF2ngiRXze
vBVrwTXj2tmqFfn5qRT+0matyM+uGdfOhSVqLWsya7ONW1GfPJTC79mkFbnI
NepavaBE7WZNaW25ZSv0wJMp/KrzS+Rac6615qatWNvWaM7PrVuR+9UA+l/G
hHbmqhSxYnyJ/KBHolcyrkStb01mbXZRidrMmtHa8ZISud6cb615WYlaWQ9D
L0OPoGMTXqDewRUlcp850Fr2yhK5zxxo7XpdiVxvztfLubpE7WtNbG08tkSt
ao1qrXpNCe/RGtla+aoStbM1sbXxtfBSTXiUepVe04dqftdbuynHHv+0JrxB
PVS91P7e4xK/2d8+Hf6ixJ6D/s86TfiXF5cY+4T2Zf089YKe+TfONfjjJjx/
/Uc9EL2Qz2hfl/CUfbbDPQy9Zu/J1Ko3/D3Wg+Ymc5T1nh65z1q4p6F3rmfv
XnTvJrz8c3jtmyaeWfD79dx9VkU/0nrS+sL6x/rGekpPz3rKesh6Q8/Oteka
tV7R43MvyXpL70+P0Pry+CbqL/d4fNbDPQT3ftzTca/YPQT3etzzcO9Dj9u9
IPfE3BvTY5+nxB6JeyX6we4lOYedy64ZvVjrPetj61vrNfdA9I/1i9XP7gm5
N69f7F6Rz+z47I57TB1L7AnpJ+uHulfknrZaSE2kP+szQz475B5VhxL6XG1g
DjeX+0yNz9a4p9WpxBp2LbuG9I7dU/JZAfdAf6kazVjgmlS7uQej3t+zCd9N
T9NnJawZ9DqNUcYq17zeps/k+GxOP9dciT0F9/rdE3WvQQ/UZy+Mcf95o63Y
23EPwr0C9yx8dsg9M/cyfAbIZ4Hco+tSwnN079J6XC/SPQT3EvY25pXwYN0b
tF61XtYDdi9Uz1Jv2Hraetb61nrXPSKfzXCP170j/X21pJpSP///uqK9fg==

          "]], Polygon3DBox[CompressedData["
1:eJwt13e4FNUVAPB9uwuKgqiohKKIFCM1dEOVbmhKT2hGqpGmUiRSLFQVBBWB
KKBGignYgoAF0CAgSlPp3VA/FEFRMYqAv/PN++N8557fnDtvd3bm3nklew5u
NyidSqU+FnlEgWwqVQ50yUml/iJGqktmUqkbxfXG9R2bJC9RlzRupKeFeT8b
z2JH1AVFfraCvcy+U18hirJPWAvzX5Y/Z7vZRD1vi5tYY9aS/WJ8mh1XFxYl
2IdsNjuhvqAuJFazlayOfNh5i8fnFCWMG7L79f5d3y3sH+Ko+ipRgK10/Hl2
TF0oPiNbxd5kV8vVWB32lfEr7Hv11aI428BKxWcWN/hbDdSPZ5O/HZ+hmHFd
NkH+p/qMeVeKYuZ+yuexH9TXiOvZRlZV7xj5dbaM9dYzX/yovk7cwDY5/h9W
RK7NGrMzxjeae7s8gj0onla/qO+kcTbm61vreBH2u5jveG31OPmU+ks9l4pL
RGdWjBWNyCbXdrz8kvrb+G1FEedbz0vE94/v7Hg99UT5C3VH4+H6HtZXT30V
r8R6sD5xr7F1ognrwwaxCnE99bVlj7LHWS22QbRiA9kwVk39iWjB+rMhrIr6
U9GSDWBDWVX1etGM9WP3sUrqnaIHe5hNZE3Vlfzd4WwBe411YxXZMDafzROL
1TeLvmyG+jkxX/2x3qasr3qwuRXVlfmDbCF7nXVna0Vj1psNZOXVpfR1juvG
JojZ6tX8Nna3+m/6yqo3itZsEBvOqqs/zCTP47Fsch/G/fhBJvkdjmaTZzae
3ZLGd7JHzJ1k7q2sDLuLTWUzWXO2SbRhg+MeYjXUpfX9OZ55NpXVZ2tEI9aL
DWDl1GX1/ZVNY7NYM7YqkzwDR7LJPRL3yh+MR7BX9b2hrwfbJXqysWwya6He
IbqzMXFdWBN1oXguRWHnqBn3iPy5uoPxMH1j9NWNe01cKa5zvEZ8b3mu+ms9
aXGtvjV8M7tDvo+NYDXV14pr4hkxp5Zjj8kF1Pnj7xtXZaPlK0R5467m9jQ3
7XhBVoF1Y71YJj4Hq8i6s94syy4Xl8XfcaxafEe5oPqK+PvG1ePezH0uD5qX
R+SNNYFtYe0cH6Ie5Xy11XtE73hG2VOslbq83sHsRbaQdWQV2H3sJfYq68xu
YffE2s1eZG3Y71k/NpPNZa3ZbtEr1gs2hbVUbxfd4nqw8ayx+jPRng1lo1md
+M2crzK7i/VleVk5FhvPXLaAdWLbRFc2io1jjdRbRRc2ko1lDdVzxFfqVKyf
0keOn4/rLzdgzdixeJbZz7HviFLsC/Yt+yZ3nYv17h2f42Jcd8eaqlvrO2mc
wwvLzdkd7LTxAX0D5afYDNYh1nDxa6zhsT6LFebtZffqe1L9rL626v1iAJsS
6wZrH2uuGMKmszmsa/ze4gH2bKwFrEsmWdubs3tiPRAn1Pt4fzZZPV1fu9y1
pFM6Wf9jHziZjRvOc8CaqdsoT8U1Ys/IS9jbcR1s/Mszyb24L5vch3E/Lssk
9/vebHK/xn27VFRh7czr4nz51EfEY7FHxhrJ7lX/Ev2sAqsoVsezKMamk7U0
1tQL2WSNHZpO1tJYU8+qvzf3J+ObRWXn2+z4GXZWXVZUYlvYW/FMytVZXfZ1
rIXsSXlxfDf2QHwO5yzLOrEe7EI6Wcf7pJM1N9beb9UX4plkTdSt9H1jfCkv
JbdnXdmv6eS75ZfrxvtB7D96zrECrJ66ib4jxpfEGizfGXsq+ymdvF/dEu9A
rKXYrs4rSrA71J30nTX+NdYDuT5ryo4a/8guxPcXNdh2dpZdjOskarId6eSe
PJ973eP6D3D+tCiaTj5vfO5P1Yf1jWJz4vcwt1dcd5GH1WD12AHj4+x5+X32
EXtU/T/xEHuBvcLuVh8SI9ns2C9Zz0zyd4ulk+8a33mEOhPvaayVur2+7+M8
meT9Jt5zFqlPqLPxPmXcmnVw7Afjy1gZuSPrzs4b54n9RW7DOrIfjX82/xK5
FmvADhr/n+WVa7L6bL9xPnNLyx1YN3bOOH/s83Jndhe7GPupuU/Ii9gSdr/6
9njHYlvYTjaezYjroL5cXMbec7yKvtHya2wp66Nnkciw0vEbsb3GtfVNllew
NWyonsVxHViZ+D3ZvvgN9U2RV7K1bEjs+Wwq+yAneZcfzt7JJHvJ/myyH8a+
GM/+s+yjeCbjGYl3ejGNfaheb+6DsW+zp9gqto4NY39kk9g77AM2iP1L5LCb
WDm22/g7dlpdIp5Xto69HnueXJ5VZ4fjerB8cjlWjR2K9wJ2Tl1clGHb2Bvx
2eWqrDY7YfzvuLfkUqw822P8XiZ5LziYTfbw2MvfzSTvAAeyybtDvEMsjPXJ
vGKitLlbc/eFU7lreKzlPfWvyCTvyIeyybtwvBO/n0neC76MddW4cFxj40fY
m7GfOF+/WEvZw/HZ2XLWl93GprM1bAN7iLVkr7CtbA+bxFqxeWwb28seZ63Z
fLad7WNPxJobe6bxC7Heibbx28ZeoydH5HVsWaxnfJa8nm1hY/Q0ZbPZxpzk
HHGuP8U7PvuM7WITWDM2h22KtYqNZc3jfYptZjvYONaIzWDr2CY2ik0XB9SZ
2G/Z8nhG9S2Qd7D97Ek9z4h96oup5H/QpY7fqm+ivJyvYgMzyf4xLp3sWbF3
vRXvgWI8Wxp7r77+8fuwCWwZW8kGsOdizVLni2DvOt5Q33PyWraRjdTTmM1k
H7PNbDR7WuxVn0+209Tbjs9kh1mBeNbZ+2wa26M+F+9+Ykms6SYslHfyA2yy
A3eyV9kudpBNYf/NJP9DHo/1yLiM+A0hPNI8
          "]]}],
       Lighting->{{"Ambient", 
          RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
         "Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{0, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}}, {
     {GrayLevel[0], Line3DBox[CompressedData["
1:eJwt0jkvBVEYgOGxr9cS0RINUVCKglIUVCIKOqKgIBEFpULodPwCWiL0Ejr7
cu1rRMTW2NfwnETxznMy92TmO5lb0t7b1JMQRdGwXhXWj7rUbGIU5XGBxVxn
JU9Zywc28pttzE6Kopi6rcs5yGqOsp4TbOEUOznPfi7xntd817aewz0tG2iH
K4xzlbtc416Yifvc4AE3uaXD8BwecYfHjPOEuzzlHs+4z3NOO8cNP3Shl3BG
jZlti0NcZB/n2MFJNnOcdRxhFQdYxlJ1WWewlZ/e0cA71vCYFeFcLOKtfVd8
U66ewl4VmjGHBYwxn9lhD7MYYyazmBHex3SmMkVp1klMDd843OOvkvUTftOX
jBHNuNz+/x/+AMQfSu8=
       "]]}, 
     {GrayLevel[0.2], 
      Line3DBox[{690, 1000, 473, 689, 1106, 912, 691, 1107, 913, 692, 1108, 
       914, 693, 1109, 915, 694, 1110, 916, 695, 1111, 1006, 1206, 696, 1112, 
       917, 697, 1113, 918, 698, 1114, 919, 699, 1115, 920, 700, 1116, 921, 
       701, 1117, 922, 702, 1308, 1001, 923, 1002}], 
      Line3DBox[{704, 1007, 1207, 703, 488, 705, 1118, 924, 706, 1119, 925, 
       707, 1120, 926, 708, 1121, 927, 709, 1122, 1008, 1208, 710, 1009, 1209,
        711, 1123, 928, 712, 1124, 929, 713, 1125, 930, 714, 1126, 931, 715, 
       1127, 932, 716, 1128, 933, 717}], 
      Line3DBox[{719, 1010, 1210, 718, 1011, 1211, 720, 504, 721, 1129, 934, 
       722, 1130, 935, 723, 1131, 936, 724, 1132, 1012, 1212, 725, 1013, 1213,
        726, 1014, 1214, 727, 512, 728, 1133, 937, 729, 1134, 938, 730, 1135, 
       939, 731, 1136, 940, 732}], 
      Line3DBox[{734, 1015, 1215, 733, 1016, 1216, 735, 1017, 1217, 736, 520, 
       737, 1137, 941, 738, 1138, 942, 739, 1139, 1018, 1218, 740, 1019, 1219,
        741, 1020, 1220, 742, 1021, 1221, 743, 528, 744, 1140, 943, 745, 1141,
        944, 746, 1142, 945, 747}], 
      Line3DBox[{749, 1022, 1222, 748, 1023, 1223, 750, 1024, 1224, 751, 1025,
        1225, 752, 536, 753, 1143, 946, 754, 1144, 1026, 1226, 755, 1027, 
       1227, 756, 1028, 1228, 757, 1029, 1229, 758, 1030, 1230, 759, 1031, 
       1231, 760, 1145, 947, 761, 1146, 948, 762}], 
      Line3DBox[{764, 1032, 1232, 763, 1033, 1233, 765, 1034, 1234, 766, 1035,
        1235, 767, 1036, 1236, 768, 552, 769, 1147, 1037, 1237, 770, 1038, 
       1238, 771, 1039, 1239, 772, 1040, 1240, 773, 1041, 1241, 774, 1042, 
       1242, 775, 560, 776, 1148, 949, 777}], 
      Line3DBox[{781, 1149, 950, 779, 1150, 951, 783, 1151, 952, 785, 1152, 
       953, 787, 1153, 954, 789, 1154, 955, 791, 1155, 569, 793, 1156, 956, 
       795, 1157, 957, 797, 1158, 958, 799, 1159, 959, 801, 1160, 960, 803, 
       1161, 961, 805, 1163, 963, 807}], 
      Line3DBox[{806, 962, 1162, 804, 1255, 1054, 802, 1254, 1053, 800, 1253, 
       1052, 798, 1252, 1051, 796, 1251, 1050, 794, 1250, 1049, 792, 1249, 
       568, 790, 1248, 1048, 788, 1247, 1047, 786, 1246, 1046, 784, 1245, 
       1045, 782, 1244, 1044, 778, 1243, 1043, 780}], 
      Line3DBox[{809, 1055, 1256, 808, 1164, 964, 810, 1165, 965, 811, 1166, 
       966, 812, 1167, 967, 813, 1168, 968, 814, 1169, 1056, 1257, 815, 585, 
       816, 1170, 969, 817, 1171, 970, 818, 1172, 971, 819, 1173, 972, 820, 
       1174, 973, 821, 1175, 974, 822}], 
      Line3DBox[{824, 1057, 1258, 823, 1058, 1259, 825, 1176, 975, 826, 1177, 
       976, 827, 1178, 977, 828, 1179, 978, 829, 1180, 1059, 1260, 830, 1060, 
       1261, 831, 601, 832, 1181, 979, 833, 1182, 980, 834, 1183, 981, 835, 
       1184, 982, 836, 1185, 983, 837}], 
      Line3DBox[{839, 1061, 1262, 838, 1062, 1263, 840, 609, 841, 1186, 984, 
       842, 1187, 985, 843, 1188, 986, 844, 1189, 1063, 1264, 845, 1064, 1265,
        846, 1065, 1266, 847, 617, 848, 1190, 987, 849, 1191, 988, 850, 1192, 
       989, 851, 1193, 990, 852}], 
      Line3DBox[{854, 1066, 1267, 853, 1067, 1268, 855, 1068, 1269, 856, 625, 
       857, 1194, 991, 858, 1195, 992, 859, 1196, 1069, 1270, 860, 1070, 1271,
        861, 1071, 1272, 862, 1072, 1273, 863, 633, 864, 1197, 993, 865, 1198,
        994, 866, 1199, 995, 867}], 
      Line3DBox[{869, 1073, 1274, 868, 1074, 1275, 870, 1075, 1276, 871, 1076,
        1277, 872, 641, 873, 1200, 996, 874, 1201, 1077, 1278, 875, 1078, 
       1279, 876, 1079, 1280, 877, 1080, 1281, 878, 1081, 1282, 879, 649, 880,
        1202, 997, 881, 1203, 998, 882}], 
      Line3DBox[{884, 1082, 1283, 883, 1083, 1284, 885, 1084, 1285, 886, 1085,
        1286, 887, 1086, 1287, 888, 657, 889, 1204, 1087, 1288, 890, 1088, 
       1289, 891, 1089, 1290, 892, 1090, 1291, 893, 1091, 1292, 894, 1092, 
       1293, 895, 665, 896, 1205, 999, 897}], 
      Line3DBox[{911, 1005, 685, 910, 1307, 1104, 909, 1306, 1103, 908, 1305, 
       1102, 907, 1304, 1101, 906, 1303, 1100, 905, 1302, 1099, 904, 1301, 
       1300, 1098, 903, 1299, 1097, 902, 1298, 1096, 901, 1297, 1095, 900, 
       1296, 1094, 899, 1295, 1093, 898, 1105, 1294, 1003, 1004}]}, 
     {GrayLevel[0.2], 
      Line3DBox[{251, 474, 1106, 252, 488, 280, 1211, 503, 295, 1216, 518, 
       310, 1223, 533, 325, 1233, 548, 340, 1244, 563, 1150, 355, 578, 1164, 
       370, 1259, 593, 385, 1263, 608, 400, 1268, 623, 415, 1275, 638, 430, 
       1284, 653, 445, 1295, 668, 460}], 
      Line3DBox[{253, 475, 1107, 254, 489, 1118, 281, 504, 296, 1217, 519, 
       311, 1224, 534, 326, 1234, 549, 341, 1245, 564, 1151, 356, 579, 1165, 
       371, 594, 1176, 386, 609, 401, 1269, 624, 416, 1276, 639, 431, 1285, 
       654, 446, 1296, 669, 461}], 
      Line3DBox[{255, 476, 1108, 256, 490, 1119, 282, 505, 1129, 297, 520, 
       312, 1225, 535, 327, 1235, 550, 342, 1246, 565, 1152, 357, 580, 1166, 
       372, 595, 1177, 387, 610, 1186, 402, 625, 417, 1277, 640, 432, 1286, 
       655, 447, 1297, 670, 462}], 
      Line3DBox[{257, 477, 1109, 258, 491, 1120, 283, 506, 1130, 298, 521, 
       1137, 313, 536, 328, 1236, 551, 343, 1247, 566, 1153, 358, 581, 1167, 
       373, 596, 1178, 388, 611, 1187, 403, 626, 1194, 418, 641, 433, 1287, 
       656, 448, 1298, 671, 463}], 
      Line3DBox[{259, 478, 1110, 260, 492, 1121, 284, 507, 1131, 299, 522, 
       1138, 314, 537, 1143, 329, 552, 344, 1248, 567, 1154, 359, 582, 1168, 
       374, 597, 1179, 389, 612, 1188, 404, 627, 1195, 419, 642, 1200, 434, 
       657, 449, 1299, 672, 464}], 
      Line3DBox[{261, 479, 1111, 263, 493, 1122, 285, 508, 1132, 300, 523, 
       1139, 315, 538, 1144, 330, 553, 1147, 345, 568, 1155, 360, 583, 1169, 
       375, 598, 1180, 390, 613, 1189, 405, 628, 1196, 420, 643, 1201, 435, 
       658, 1204, 450, 1300, 673, 465}], 
      Line3DBox[{265, 481, 1112, 266, 1209, 495, 287, 1213, 510, 302, 1219, 
       525, 317, 1227, 540, 332, 1238, 555, 347, 1250, 570, 1156, 362, 585, 
       377, 1261, 600, 392, 1265, 615, 407, 1271, 630, 422, 1279, 645, 437, 
       1289, 660, 452, 1302, 675, 467}], 
      Line3DBox[{267, 482, 1113, 268, 496, 1123, 288, 1214, 511, 303, 1220, 
       526, 318, 1228, 541, 333, 1239, 556, 348, 1251, 571, 1157, 363, 586, 
       1170, 378, 601, 393, 1266, 616, 408, 1272, 631, 423, 1280, 646, 438, 
       1290, 661, 453, 1303, 676, 468}], 
      Line3DBox[{269, 483, 1114, 270, 497, 1124, 289, 512, 304, 1221, 527, 
       319, 1229, 542, 334, 1240, 557, 349, 1252, 572, 1158, 364, 587, 1171, 
       379, 602, 1181, 394, 617, 409, 1273, 632, 424, 1281, 647, 439, 1291, 
       662, 454, 1304, 677, 469}], 
      Line3DBox[{271, 484, 1115, 272, 498, 1125, 290, 513, 1133, 305, 528, 
       320, 1230, 543, 335, 1241, 558, 350, 1253, 573, 1159, 365, 588, 1172, 
       380, 603, 1182, 395, 618, 1190, 410, 633, 425, 1282, 648, 440, 1292, 
       663, 455, 1305, 678, 470}], 
      Line3DBox[{273, 485, 1116, 274, 499, 1126, 291, 514, 1134, 306, 529, 
       1140, 321, 1231, 544, 336, 1242, 559, 351, 1254, 574, 1160, 366, 589, 
       1173, 381, 604, 1183, 396, 619, 1191, 411, 634, 1197, 426, 649, 441, 
       1293, 664, 456, 1306, 679, 471}], 
      Line3DBox[{275, 486, 1117, 276, 500, 1127, 292, 515, 1135, 307, 530, 
       1141, 322, 545, 1145, 337, 560, 352, 1255, 575, 1161, 367, 590, 1174, 
       382, 605, 1184, 397, 620, 1192, 412, 635, 1198, 427, 650, 1202, 442, 
       665, 457, 1307, 680, 472}], 
      Line3DBox[{277, 682, 1308, 683, 278, 501, 1128, 293, 516, 1136, 308, 
       531, 1142, 323, 546, 1146, 338, 561, 1148, 353, 576, 1162, 1163, 368, 
       591, 1175, 383, 606, 1185, 398, 621, 1193, 413, 636, 1199, 428, 651, 
       1203, 443, 666, 1205, 458, 685, 686, 687}], 
      Line3DBox[{459, 667, 684, 1294, 444, 652, 1283, 429, 637, 1274, 414, 
       622, 1267, 399, 607, 1262, 384, 592, 1258, 369, 577, 1256, 354, 1149, 
       562, 1243, 339, 547, 1232, 324, 532, 1222, 309, 517, 1215, 294, 502, 
       1210, 279, 487, 1207, 250, 473, 681, 688}], 
      Line3DBox[{466, 674, 1301, 451, 659, 1288, 436, 644, 1278, 421, 629, 
       1270, 406, 614, 1264, 391, 599, 1260, 376, 584, 1257, 361, 569, 1249, 
       346, 554, 1237, 331, 539, 1226, 316, 524, 1218, 301, 509, 1212, 286, 
       494, 1208, 264, 480, 1206, 262}]}, {}, {}}},
   VertexNormals->CompressedData["
1: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
FbSqBi0Kb+mE45kza6drV2SS76OK5+3xvna/n1fUfzKh6tpBko+5aI4cBF/W
0bZvcwtxWS5H7h9tHzBQckHl7+flIo1i90eU10E/hSL5I1CD6vQiNhpPKodP
bQE12Wcq0Bf1Duvy73Gl993rw8zuk3U1m8P+CERrq5ABO6rz/nHSPy6cJcus
V2Kgqs5O8xHF5PjXvPocdza5FsLy18RUj2uARE8jpSsvimGE0pdOcxkmQvvy
+nt3kvF5popHupxMHaqtOeojIEL2M7rxiHb610b0xNGVYalGtk8ZnzZP8nw2
Slh0t840kfp8f87L6PRDzeup+fgxSj5OzbuJc1a8fDl5VhnOC6j1KqY4L75M
s09KXPP6Sflp/ET/NPhP7Xsqnx3SekHP5lIjGCa0fwvNJtsHaUqGGR1ohHkh
o9+s+FgNlR6iJ9nr2ShQ765gmF8evFSfKxakkw/PjHr9ofs+CV2Os/EsHd+E
rHuPGtY/pBI2NW8ur8qvQenxBmKzheth6JvB5Z/l6et84scv8hueR+7bTBtS
OKU2mPRXQrlBDtNsG1GvD0X1EgPIOF/Jx7PPne+4XM7QjK1iJO5pZVQjfICD
FPUzoltYZDygMloiYcnlRmQ8xP6GSRY5X2red+74y5hk1XTE9DaYekCFA4Iz
ggXdqvKhpuPtyKqWHCQ3rt/e6TlsUDHMWHtvfR6IWQg/Eg5qQK+1F2duXVaJ
xmnVD1UfWADXjEw3vluSwpdKQycMjbrRtb865HFnL/sCFzWMvFd6iUHGFXX1
SVqfvuNejQEK8/8Dl53yKOusfBPI2jxsdG+vgmDjkZFDI6pAfgRHWXdPKaj5
D0+ou8SECScr5Z8rxKOXizKfDnleBqVTJw1vmMwGdCzEe/0fDbCSkf1k1ZRq
SI2PN7ibl/vX/VKd9u3+dypRpmPCcplM0p+on55SNOJOBfJnpb9yHM4GSb12
f/0i8vnIxFTtczvMAZvjrf3nTiLrH+y1vK0uXu25fMGsptlj2SWSb7va522G
cVXP5V9a+HsxBHLtF78bQ8WVKfEqsS/8/PG9jqlA9r/tW/BC54/FtP0sb+dG
Pc+MQFjCOSOXmQ8eN4Oq3M5pjRakHe2W2dH/eDAXQsd8sy70JnmdPR4mViEy
XAixOaTW34zU08wKwcm9bpSDSwkr18if1OcnP+2Rs/4f55En8+yA/3sAtodn
5raPvo0i19V+/Q8oVIuyYLqn1fG4enK+q7Z76FxNJfOabwty+wlJ10N/+0xz
Q1lynV6hGVR1hPXdzyTVjR28msT9Ly00NFOrB+dFhlLR4kxo7fet7o5CFRrX
GHRd1o8BZz9lx1luqoG1zyN0jXwImYOcWPLCN1exaPeD3ETulfUKrYavFp27
Fi2shfnPDUKCHGpgsseIybKbWYgnk2Fnc7pdfirJw5+pujFhki8LZoWOfXrY
gdz/2Olmo6Y8nAWzD9xqnTeY1MtAScVBlsINYNm0csDl1lro1WwTZFfARlID
U/1t8oog3TpFZnxMMkBbtuCDLa/Q6TVqquv7sUDlqcSZOTcZ8MnHtUi3g5B5
KP9k8JkBiXWwbLNZi4MMef+FrXc7ParJ9TosV9Ku0ogBmhdkIisf0cczG5r9
w3cokN/nqVqicU+ujcyzCs5d3TTofTK4Lyy/Frnpr8el1/5cN3IgUyvzmONl
LpQK7aqzamTBiv1XynOi05GZjob69JAa6GXCZYrvJfML0T0i02o8kuCByWDB
C9xaZHJs46MD+/LRZ5vZRv7XyX2urThuFcfxKoHLBRhPiO9bgBZJMiTMREk8
M5ttI8HJAl3gOOuVkfhUvO6soqw7dPM6uGtPgNRqBqQ/n5255zkLsuZ8y4jr
nYB4Mgicttd6N18i9XY0+/W+iaYx6Hh1hbrK62YIYvXRP345DkIyC1m713HA
V+jQjnvvCuHdqZZaB+06RMh4AyXVvSX58P5OokjnajKPLtoVdELcl/QnUzf5
F5dv4aCpEc5fqueTuChvXYYP739cl1muav02LeGi/Cey7w0CyfhHCscbK3G8
MUOSV88cjuuZ5+J65hiJ+w8DBzLRAMGZUye4lMH9j9XG6zqr4JS5/XJd1VyQ
uBFxY/pYDlqjX2O6T/knPpNfl3tYOd0lpDYOqdePvjjqNRuS5moHhJz67odb
1VGUQj3kftRX2hdZC180Jnr0GVAEaoni92PNStG+40+kleEVqhl5bauNJ/me
7+StG8gLrxc+w9603GaUI558iVQZzUEiYmz48qi63ncEE2VZHT96400xvH18
fujTb9XQZ86+ec8/F2GZDKefWbddT+m5deeo7KFXdzxIP/HZYFmeajATHHg4
//n2XsvDpY1WOzurk3nZzW8HvRVzfn8+xfm6f/3AT8X88VyZOXOHxPf17CXP
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
    "]],
  Axes->True,
  AxesLabel->{None, None, None},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGridsStyle->Automatic,
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], "RotationControl" -> "Globe"},
  PlotRange->{{-1, 1}, {-1, 1}, {-0.8351230621337891, 0.8399064540863037}},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], 
    Scaled[0.02]},
  Ticks->{Automatic, Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.692647069437653*^9, 3.692647106026314*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ContourPlot", "[", 
  RowBox[{
   RowBox[{"trained", "[", 
    RowBox[{"{", 
     RowBox[{"x", ",", "y"}], "}"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", "\n", "\t", 
   RowBox[{"ColorFunction", "\[Rule]", "\"\<Rainbow\>\""}], ",", " ", 
   RowBox[{"PlotLegends", "\[Rule]", "Automatic"}]}], "]"}]], "Code",
 CellChangeTimes->{{3.692647120967214*^9, 3.692647175681081*^9}}],

Cell[BoxData[
 TemplateBox[{GraphicsBox[
    GraphicsComplexBox[CompressedData["
1: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
6UWPgUl8yui8yOE7pHzzmt3r32+z4aPMYu1HyQr54R2ln269s+FfZ4SWvjLL
50lv55UH6Vnxre87pjVzy+TqfrrXK+fM4681Ggbcn5HAo6Lef5qlN5r3+qr1
cm/jF+xj4awPUU3ceJDdL49yWTxz+i5P2Bm9ia85uO7X3r6Z7P2CCJdHkWv5
jBcth33VzGfWE21H2/y3mr9aP3xWyItC1vrjj6t2d5bxr3E7gnTMpay1WCLT
dLHjY5o1XOn7Uc7OHyr51O/lAh5cqdN38jYnHmjR0Waq+wum0XZkZMSwxXzl
k7uVob0TWL+M56FjwyVsw69WV8J6xzGVozFlAf1n86nFrlqHFmSyQZ6y7lOy
04VysXHhOd25cuZjMrqjZqcM9iTu3IsVloncJcb3p+vzPObaUy376VQjvj97
ZoHqxCp7Fg95nLDYgD/rMbju3JRCJmrQb87JgXFskWVExytREha9w3z0RBsp
uzbqbfufMYWsTl2nUfxLlX57xi+0ny1lou71d0UOzuZpu3ruCzxYyvQCb489
/duQyz26j3y0VMr6nvfO+xVeyKaWDGhoaCFlGm+m2xyZNJP7mcVqL/omZ8e8
7hjVrZPBsuUXHl6eImf2fyqsZD8V90dS++1X2XpWca8HeVnIgGm9w3PlbIza
nIieMsX3eaweHpneXKS41/NSL+BkQrFceK77/KudIqTlTL265HebR6j2FZfz
O9UlW/K80y2jF4pSNWMhez5aws1Xuu4ztSrntiNGm0mdInjLkN3TW36W8dbX
fU4tsYxgft1XuNz+KeOf+uxzUPOOYKM2/4obsbOKPtBGx1cnms9dY6MxzbuE
a2iKm1wyiOHbvuwZl7q6mD+YsHWIvm40q/ugX/eNVfTOl1fn2L3JZiFMlm41
oZTrDPcbPWVoLnMYuKHwYUhV3qDe4PLBueV800HRwoqhEn7g0LQh9l1SWLbG
Wqdv43P5qUvxb3o/L2ZXey6o6K2Vy9V6Hnhz3CCXZRxesr2ORgr39Vo3dm8V
3z0jXM432hzBN5gGDbU+XcI9bvtsKdeL5lPPifqrrSjmEo/tFodnx3CtdHe7
fMtiNvRs8apNbjHcwMfOfv75Epads2papEU03z6o/PN0DxnrVzH1u9vTCP79
Yye3GZ3K+Q0zyc7ConA2ulvDetxBxus9vz500sgI1tJes3/ulhKeX8d9fmlY
FGt7rd6X3+eL2YWFHwbWd45mM20cujVdJmMOMVpn1o6KYGe04rut7ljOus2r
33WlNJwlahr4RX7N4TtPqc/TTUhmVpO3DuxRmMPa35+bf+hFMjP9pZ3d3auY
N07p279zQQ47237g4iWpyTw7YMaN7xU57Epcg4PDXyez94s1U16V5DDb2B0F
fw4Xs5FbH47ITMlhWqMCv+gU5/BFN3++vHWqmG19Ix4ZHR7NrWP23PU8WMw+
3dboq1oWxT1M4zP7u5WwsE3O4/U8o9nUfOv3cp9i9qHfHz49NodN6Nv7mq5n
MfP3TX5QLlaUvS539x6+NIJXdrhkMXqjjOU2LRt5dEgEW+M4r/6spTJ2NiX8
9YvscLY1Uf1eWpdyxbnlG81TrlyT8sCOBZ/nbFH+jsTu4M3jDryRC/mGZ6/4
582cZPzJpks/jk9WfP+j8e4Bn7V2hwvPD1FZ4eZfGql0/qBvthGbOqJMyAsH
PTrg3ah7GTe/lu44xUDCLo/5/TjToZz3MhmW96R5MVuV2vHOsrGlfEu7e9s6
di5h26tLod+FXQuNb3pI+GrHxqte+4qUzguYNFo8z6S4iJu1DAv79iJWoKfP
ntIpfWk5O/aid+zkiRIuKcmUxPnJlb6Tkac3ctmIw2Lua5tTsW+y8vc0xr/8
sSzCQPE9jTYZLm9zRxXwn3c6flefGE+/m8JWmjp8WLhLzNeEHbxcmilX+t6T
mpVX2y3DM/ntA3Y7j4mLBDnUX509uEmWpvTdiXZNdh6/o5LD+e7Vp4vrFwvr
G7TrN2W4d6BxPDeLe6Km0iBHeO6O5uvPlybmCHl/n5REjXejFecHtFhy4+PW
ZUr3rh8cSLUvdBfGmbne0N6iqrGA2xmmb267QPn7CYOmuTm0bB4u5CU/PtRX
Hd0tVnjf91HP78L60ji27FnHo0GzFe8pe79dVnHZO01pfXm4eOGHz97ZQj4R
LAn1i12XxurMSmLJS7KVvl9g93b+m9crs9m2lfPN0/KU31eP7DJ79kl5hsBf
n/wBph2sRWx17MZtFs6K99Ff726a1HGM4vsC4H/C4B2fZv/JY6+b2kb/Mi7n
W5zGu63oJ5w/5g9nF136YS1mY7v+5gs95cK6qdP+8q1HVyu+J4Bx261m5mR+
ooj9XGVqLl+oyMt3p38OVf8aJ/RbfHTEEf4rT+l7AR6DunSYsKGIsUtjfmyx
lQv0DM//9tz5WsxTqkvWN/Ru93cnlb8L0qb3pytNbklZWLuJ90MsI5XeH7+q
3zfQdr4iz9y19fPCZpOlrFnR/dZe/SV85pZ08/4minMv+jcfOy09KmeGtxp5
/vnxTphvc+reDN6cnqG4l3LfaY3pWLHS++AXHvKuMbpyYdxEARb91LbI+OPA
0xPvGyrft9+j8nxEA5FceP/afVLLbgEWxTzL3dms85A2wroY+urhcOHmyjrF
fLdoveXBt4q81qiX/udWc+IFOSxVj5v9MFO+Px+hf+X3bXPF/fkCl52tVHVz
eN2xgy3271K+551nnj3vwLRMvv9klOnWJQVK98pPn4uYpbcknue0c18beyBW
6VypSrrZxv2rmOK9XvTmsDtDFe9xX538WbdZRZyglznFZ3ss+JEh8OEnr5y3
90Qas13N9Dofzla6L3/7TPblfstFbHToko7XDhUp3Z9P1vpjpN5ScW9qj1nK
hAVbJEzafqyzSSvFvkeG5fdBu1rEC7h32xvGH7cq3lurRH3w6NpQoZf3S/f/
Sl8s51eS7e4bjlec9x7pOGxk8KUqPX71nx92VMLah/caNHxqHPsT+v2wTrNy
dlda4lX5KoNtHrWwz8h7EjZb9k6lTCOPNT2+ZU3WWwm7mmFjeLRtHntydJpd
fbM45nnsyJh0DwkrHeMxeLR6HmvprjZr950q/rOWPzNplsfeHnH8oR4nYZJI
m46HLmUwSVxIrLxrObvmMHLByphyjhLn24f2qv9myYhyLpqvoyULUP7u4s51
PouvXi1n1yu9nmhFy/irHPV7ASVyPmqt7lEjvXLuWs8yI8NOzgenbrVJeqz4
PmReoFnHoHkZvM62L+ecN8h54O862dk6mXzvo7Iyw3gZf/jiSpajUR7PaKpb
50mGhJdt1GLR4/J5zLeAzefPibmm0WFPb/s4vmvHb62Akiq9f3PetiYqjj+1
+n77kqmEn2v4pdO7NAnf8mzxZ5fJedwqLiH5+mUxX3iucV7YyHz+eXFLo+fL
5fyts8cKrYkZPPsEs3POlfE6BhblG9Qy+eQPB9ysumUI5enLr+6PL5Pw+Se6
HnqzPI5P2TO0vrOxhM+43jzxeUocH+2b0Gz6ynxW0NHCffPhBObo7dv95zsp
a+QUazOudxYT7XV6dPVkAtNNEfkvWZPPtNrkNG2pXSCUE1y+mvt1yGIHu9zt
MjBMyspcVjd5cmMYb7l/kN3OFVK+NGdX06ggVW5V6Bar3qeEf3EYdP7Y7AzW
ytwqX7ZOzktGr3b5oZvJ7E+PUnsSJ+M+5a6Rbmuz2PNZmxPPyaV8y+CK+VF/
CtmFTQed2x+TchXbjJ4jbvVg1me7ndmXVcjlmbtux62umqemOL2eWC7hqrpX
jxfnxTHJ8/xeRZOq9Nlk0F6NmVXzwKznN5YVSHhT0aztx49KWalXqNnUP4Xc
xWWRj2NeAvOcOdt76sl8PuRkryeiZVXyVZfccPOmzwWqBWzNV7uw/eEFvFP7
bm/uvylgvmbP3we3K+CjwpruGSCWsA5bnGxEM/N4q+kHzltqZ7CO1SUPvpqn
7fRBynzPzD2huzGLd5rTMuDqBjlrbeUxoPH8DO50rU7S2mgZe9slraWHnuJ7
8/saBUf7VabzIYd+fT11Jp8lfruzsEVZAvfQKm1+/4uE6QctGX9nexxf6t0h
6562hLXYp9drxu847mGbb1qpl8BXqO+K3mWqxyNMxvqH7ArjKidO/GgcZcHG
qj+POr2gKl75ed9u2W0iGzLLe2ZItIRvk4W+fTE4jlm1CvxktU/Cu51q//mr
RRwb2X9e17J1+Tx2oK3/PZ8E9jqqbGLCfDm3NjW0Xdgtg+2MjFcLalC1nkrR
3t4irkrull/iraOl3MTe+V3TwVnM6vPCXePk6Xx+dSnMI9ZNdvWWRqazgRe8
9FKfSHg9s/pqh/rnMUN3v4re3hK+pnjMUyODPDZG1blsoF4B164uWeemvqLy
Kwl8lvf6x02c8pnFjIG2JxylfETD0+ONcwqZ/7yzdqED8vgrv8H7m4RIWDOz
tFZ9TPL4jfb1AowOSdjkVWf3DBkXx5sfqz9sfbKEtXRqHtNtWxxf4he0Z1pV
vLxe9+OpVzmFPMLY7VmLtVK2Z7JFB6ORWfzGb7HTjngpk8mWSsr6Z/C9XX/V
P7tIzva+yt4SmpfBTyW5+KZUyli6VlkdE5Fin+9FcrTVo9YZSvepDz2OHbHp
RTmXbNOps3y+4l7wj4U7Ohp9qVoXa49y7xUoY7t+e66MflGudA/7XZcmFqMX
Cvd4+J8v3XP33JXxphd79X0cIGO+b1YGZ7+XM/WzJ10v/ZLzg5umlbvcl/Hy
BheOqJ2IEPJa4/XP0sTXIvi+iKayQnfF91m3HhizauPxCGEeGPl7gvvDKwq8
5HZZwBA7CWti+3p19FTF74cO+N4+3C+C61+5rmPfuJxdnrg95+iGcD604GXo
w53yqrzQ4/neuRIhvzDW2tMooJWEeb2+bqo7opwdnDb2XIhFOUvNsS6cvlPO
g9dYek2qWv/Wqbs7N3WL4j5Sn+4/jR0ry/nK0kVZqmuU709f2d5Z1FZWzlZz
mf9Ja8W9JC/5ibYRW+TceJFjhPbcqnY0RmS3lim+u4t2KrYmSFdYlzPfWVPr
97gVzuV9tT26HJHzVZ49k0ccknPv4m9DPK6E8xG5K9KuXJUys0nZj7efL2Tr
7Udfbv6qjIV8syz3LZYwv8TdC6e4FzKZ6etRmS+lrMdpdy4XSVhaQ5tNi0LK
WOZl46UFVXr3EoW+SKkah1nzHHvqy2XMJHJvYzXPCCEP3H79e4nzm0KmbpIn
CxtfzpKehPgP7SJhUWaTLznERLIFubYmBe5Svn5UQPb8fWI2U9buccuvcs7P
7Fr7NU/OJQXtvNgGMf/qPLWrxf4q/4wVZRhnKb5fp7LVeEioUzhv0nd/+sdD
UhawPjPxysdIvlZqUeKlLWL9zHXO129bxKSzvpq+XCAS8sxeOkculncoZUfb
GraOiFacS9TrvHPNxMtFzMR3Ssq9ODlbU5T5s3KxmD36ozPztaOYH314ZZBz
jpx1Tw80nWWrWIeJRB7fB09WrGPGPuhTHNp9nOI7sllXfOs8GMdPNNwd3fue
jFsssjCM+VCsdP943JpZl9ZX/e73UafVOJ4j/B62s+cx/d65fEDiyGP3HhZz
l0cRRUmXooXzXc23twk9Nj2GhVhXzFi4sphLR+213lMUw55H9ziV97hIeI+o
M2l1kmtLRX/Lz1xod+duDt/S2b394N3JwvpQol1XbWi9FD4koq99WL9c4flz
gTu91JJyhHrDJaaPMvcmK97vdSs6t/xOsuL7i4crPxw4Zy3016zJOdMdbouF
9WTbk7kzLl63Edo798bk0r4PFsK6cuX2jGuF302FcwFB2rq2Td/tF9aFQdJe
Ns+iNwt5Z2gH2wVjW6wT+NGIvtJ7wN3VQt6o0SN5U4fnywV5RIcuj5joukSI
A9armuXnRVpza3n9bn6tdgv9HindZN/s4hbe9fh5o0kF9xT3lTuqmz9qHc1C
nSc9Wd1uqcCX6d3kWxsSbPmJFgNuqTxTfMd1klqAtG+DaKaSqvM0du58gW+N
gX03PJo+l6cfn7E65H0KS5t9ofTeOIVeR0jmZJ/pncRNRO59nspEzPVe9IZv
icYC3XWF/c1lg6by+eYruhxoKGIqk38kfbYyEOQOlY9yO+M+kWfN0zqg6S1m
x5Zc8zgQpbiHfnd2RaRLThHXczKwvNSvlPV2eGOxzCFHoE/Z9TN9xJZs/vPb
cqOZmqVMZa3um+eBBgJdL6DVgattDfh/8wy1vAeUsJGpx0dcqdIL6KMN+InX
YVHs/Benb8lbSpirS7PcztnGgt5D39oYZZoZ86xP+/zvPJMJ903LAzfKB3sr
5pkr9Q76b9wrZ52/dfravyoux9l9DvSyUOT3et+6nt5QJuNyw4SBd7wU9z2v
L6+faVep+O444qp+H4d3j1cr7nu2Fr/5HpwrY7/uqceO36v4foXbfWfZ3e0G
PPm8wXHRTzmfsO/P1seHx/JFYwrtVj2R8XGD6k/s7BIhrGPyba/43jkazgwG
xgT93ifni1YYLzP3KuLaj3/1j7xbyhePiDa9/LGIfzbrUBA+ppS3lpi1nhNT
yt3Y+51xW4t4YPPwrva6pbxL8Y79eu+L+KDOH/26BGXzh+4Df7hNK+UlJyT5
qfey+YydoqiLhqU85UYL44nnowU/e+Hwtp60cRS3nzo/vmSylEszUrd4ZMfw
J183+i5+VMRvnF7h7fMrkvUdv3rlsylSXrlW3+V0bI5g11MeT3u5PiSb7Wrb
7tl741KuotvPpv8MHcU9/Ng3K/po9mJT7ri1G5NRyFXGL7G4M0qbvU9+9nPI
STF3ndB2bpznRLZkmeWbRtPzuWt7q/25O3XZhG4XijsdFvMeeo4VlmalfJ6/
w9klp7J5y9RnmQ76pXyp3nkVu2vZfP8PcVSf9ETedXTF51478/i0aft265om
8ezjfk4e9fK4St+Q2B/Lpgv7HKG73BtsS5nEhr3c++nWxHyu9yRB9ZbHNHZv
g9uNno1E3PW7dIv5vtks62LRCLYzk+tpjHo9bpIpE4WPDnsiz+W901e5jQhI
Ftq7Z1wxLUw1idVRfX8/2S6PG/nJ37a1T2JW4xLPfGuRx3UfDh90YVseN66z
yXKgOJHv2plXOK9BHj/Zr7l1wuwk7iq+M22mq4XiuwOn0/yX58xj+jnvHNPm
ZXLrM0Wne1aaM7O5G9OXfUnhjhuu/0zTsWG7t4w38FqRwEWjGhc7eFqxHfaf
TPKeKr7/UOdXh7uzb0Rzy7031LINpDxzw6aUbqpRPGXs/DBpVZy3+GTR5HZR
DD/vvyQsR3eF4pwls9nn02oJa7tYx7xBtwR+3nfu4plzl7IlLb5pNI+sordN
e5OZ4MjGS3Y4Po0N40fed167ZK4jm1ckDmgmjRD8XL+Lv9uHmGj+H8//YBpW
xKIqPd5ObBLLL63qs33eWCkLzjw0R0crinv2Uks3/iDnZdLgtyYOi3ij00ea
tXsr413PPks/p2PNf9l/P2y4UMrr5pluNF6zmB850vDmgVElXGz4O8/2hw0f
utKuoe27Qu7gUWdzUFNbXjFXSzTpkpgXpTS/8LTSmqdee6f1Szuf+z3f6mrZ
z4YHFB3cd7+FiJtNj+2qumwh36B3rG3fOZn8/OpNmW+PmPPK3PiL7aQp/Lun
uCzVZAa/mvQqarLqS/aq/qYZhvW38AWL1n5teTCCqQ094FfZzpk3rrvjpuRo
ArtqtTl68tB1fG+P9kYGnlVxudnxOwsj1vNu+pMP2N7IZK0vTyqbn7Ka71v5
Iv7581ymkuN/2NjUkQf+PNNwlV0+M+2eMnOD0QqeWvhF02yTmAVNW+zz4/0K
HhKsuXXCp0LWuqnxjJeJS7nxm+/OM1qUMNNfkQOj9JfyQ398ujbeKWWhj4yG
6M205RH5jS19LsuYhv/3m62YjeL84q8zwSFtIthy7/LfXlXr+i3t+qe20Qtn
TQ0u7ju1Vsq77Trbd6hlJGs9b+MZrwOreMaPu2WzeBhrnVjnW12/Ffzw7aOx
o/9EMIuAz7HnvIrYunMJbPOCGCHPLTh8SDe8XQQbZqk+PGydlDl2DnDdbx7J
cl7vb9lkk5yZxJxonzkpXPCb+iW+/WO0kllE60NlZZF5vOe0KpedmMhUco+7
vC0R8QP5jofvqSUx6zuPTtu5WPAxWflfL9onMNcHWp4tIs25yugZ1y6+UHzX
vWteZFZi52QW6JiuuVuUx+Z69rdZ2iWRrfd+P7Bpvog5zdYs1WmhuP9aPrxJ
RSvrHLZ/9bDo4ydLuYth4bfKbtlsW2h0i8q+pXxM21A7j3XZTEN7WHfRClPe
tPjA054umUylZPJ+nYcm3NPiaUHvD7nsyWgfnquRLPBxLXSYzsmBiWx3yhxW
lprHDn3up7exTRL7vVQ+76pYJMxz17Keev+YnsMazu5nG3++lDm7/Izc2Sib
PVS/8PFOj1IWHL/kv69Ls5lrZfeD5tmTuMnKwOKz0/NZqLHaiE0zJnFV/QaG
XzzFTE238eQ6+tGC34UkTjwi8ozhpZ9b99a5VMTGa4b7t/CL5HUyOgywsZEy
vSl6v3w+6/NXz7rkaIoKmetcvaUbTSdxrbCIgePVS9j1S8vvPF0Sw0qvLii7
dbqI9dHa8emlfo7A97TEZnW6l2cx36u+RrtvlrJZkZmz/Bdls90+mfX3q1Xl
xf31EoKyJnPR5IuNVq+XMpXfutsHOkzj5Z6pi1/clrGe5duW2zeLEOwmOWng
hg0WkcxsyPiNjars5nJocAvL4eFsQ9ixqAFr5SwpOvaxdbNC7jHmhmNMYRl3
dT26RnRccf8V59D0Yx6193SS8YmLXHy8XcW8W7uyzdPLq+bTo1ZS1d+K+67G
a3T3q87I5P6PfF7tC5DxHvIumeNTI3lZffPMTvuk/O32rLr+IxT3DlcEd+hs
09dAmPf3ntrWy6O34r7qyXVDiponZQnnHIRzvD4+N1/NKuVW9/Xu7W6p+E6n
aG/XZXtUitmmQLuK61NKhfdU7S6Na3q2spCf3XbixDIbEZ9ZssY4dWyRcM5Y
GrJ5VVqrQt7pbIuNTyS5SvdRJXGmfywuVs2vlgHBT617Kt1HtYmqd16/XMxf
WtlONd0dz0OW+KlYDRFzvfQJ3p3OGQjnRNIrm5+8WWW/wG2/HjV49VnOdFnv
ZS32Ku5d7XB9dz+niUTgf676Y816T7P4KIduS6/eLeaZNz6MGaSWy89bbXhk
12Ku0v3Sb/k7t37qmMgjv499pquZy3cu6bQhoEEK14uIe9dpjq3S/VL9yvdz
7mtHcoPNPTdpHHUXvsO7z2Tf7X1jnFnf/KhpRktfcJ9zPSUma5yZ5/Szjp1b
3+ememP0pw71YnHVJU+7ZPfi+nQvpvMt9+Wn5de4bFxw6/5uV9nqDvf76aud
Es4jplge9nSdHskto+88TL0s4wvbtGzwqJ6NIK+fe8+DF97b8CMDZ0dtVy3h
bUKWxDu3sxXe8119vXHkJpvFvOjghO2SHWJ+RO+paYDtYkH+sFDz5d7zrfn1
A7ZZFnm5vGLRBp9elyyF92zOi79o2cXP58X7vyZ1d77PAgeuaJ/gvVM45zSo
he3bDu9ceGlIj3xJmygW99I1RXR5g3CuSYMFX9DU2cCtPwQ2etUtlVmXWY84
cdJReK+lMSVwmsUuR34qWvTwi5qInT/7v/+sFM4VnT/u4XH/0kou6vGtbfGN
qvVQaJqd3HeZ8F4oqNRPvfFDBz41ZXTJvNElrHVDgw7nX9kL63kNu/EzNPNs
ucupjVYj38qYSrtnzz+YWwv310TyoVOGhm9nBttLCjZKXnDHxBLvG1IHVt+p
Y3LAjnu8/0jJoBEO61nX9Ns678TH+Nm0vyVbX9eh/OGxY7zU0PKmzOhGVbwZ
0/fLwUD+dsKtyoDGR9i374etwpop7qdWDnHU7t1SzPQ/1g/O0ItnrWyjDfNf
KP6OGc45ao4/8f7Ts3h2amDM4yebS1g3tXa+Zk+imEll77f67jJ25vuUQ+5N
M4Vzwc7nH3ys9M1kx7ZUqHs9Ufw9tDJND82A9kVs1LNb63VHi4Rzxv5GzYe5
rs5lU0vmqWZmyfnK4SUje69R3BP0Szpd0TxfzEouG837pC/iZ9v2bmHTvYgF
WXv9qLc/V+m+qLybW6+DBoWsUT//ljZ2yvdFtRep9NG+WszerKs3bkm28v1R
B9cNN1VjFfdFdc8GndgcVcwODfXtWDGvKt/6fH3rgI+FzPDbwzPL+5XyOwmr
Gk/OKWIJ457mrz0cyU90mnCuzyYpe7dPtstaEqG4D/PhlOkJ60h2xD1YZ/Vy
KUvylN1T1YwS9k3Kgj0+Rc7NEt7vlR6QvZwdWcScg0bNc2pXynbkfnMdHVCs
dO/16Z7iOh3TS1i5pY+snlgRh1Qsx+XMnitm2e1uPG76Us6OblRde/KZ4j5n
aadZ4zuYZrLNzQeoN7sq402uHOljXjdLiN8d8+uF7mim+J6of8jWXZ4dCpml
5jzdnx8U9zMbmnD7/W+k/Kc8qFBztuK+plOavM25S4r7mjivWlbP7eT3EzIe
9OBDfEUXxf1NyHO02f1VM6aWcpmP3Ytuz9rwfntHWVf2KuEqK92MdFfWEc7V
JgT1iNuuX8qer+8XdqVhMU98WzllWZUeJ12698jg/7qvub0kY1jfLlXzxYSu
w579X/c7551quEfnQxm7pDkwNqK94jvQBY5DRo29KOHBPc41OXNMcZ9z2GdJ
aOGRePY9SDRGc5Tiu9dPVJ+vmGpSwKOCO6UE/ae4z7nuSyej0LGl7KZux7r+
sdncOonPOWdSytqN8f8YxRX3N19OTb3aKj2Lq44NSPcwU9z3nHviaIvyazJ2
p3+vrlmzM/nBHS5dBrfJY/d7TX7rskpxX/P8kc6n7o1O5MeW9TjFx4rZJvul
W1R947lGcavsn6obhXO/2T73PhS9S+GvRHH9XrvPEs5HnDLQPmnfehyfURAY
3mZbJHd9Z+aS9Wg0a3rZ91CET5WeV7i/TvaMZqNKpjVvfKaIR/lrDdNwiGFe
jtdyz6krzllfGafSfK9aES+L7T238wQR6/b7w+8HoRKle5NdfOoea7Erl/ne
K3L2yC3jxZOav1GrX8h/Jc1sJnIQsUf6g8NMDIo4E0nGJVetc28+9bkRNDmf
N9ujfXzxzHx24bprn71nxLzX9eTCojNidtLdc87Lmfm8vMFuv71+Mp7brCFr
xarWh/paw/J0i/j1pPlb11uK+At/wwelTdOYXJaernUui2fwHrkOk4pY/1mT
+1csE/EprzO2SIaJeZZaxthF++J5o1ZHFu93z+J5r3+N0/uUyrPPFt5XOZ/F
QmfNOfKoRRr38B04OHS5lB+Ya98zyyaS/ee/PL2grZj7ZvyoMJ8Wz0qn3+2V
ukzKOnd0rdSuWj/0rffk1qt9Mm7YcMOi/aqZLKD893rde6ksSvvoqV2TsljA
yaN29deKuepao4TcfvnMSu11h4UJZfzyrRIr2VcJ25huM9ypfz6v9/v6K5+1
YhZb0b/rBvN4zkfULXHsImbHT92/nWAYz/rUM9I6rypmu+a5aV3qns/abYt+
/XapmOktSXV98E3CPyXe1e6VWMbczJ6939w1k7NAy+9PD8rYW/WxZn7fM5i4
VffAGc4y5qxZmdWyaQlH+fT5mpM3DPO5SUFwv7gjYt51SV1NlY+pfMLtE9On
uGXxlxVtK+xfp3KRwRX12/OzGLsbOvnKxCzWZdl/PRfdSWWBqsdanXEQsy4y
o+0b1fPZtQ+ybepzs/i2qwvnp4SlCnFpR45T0tSWEXy+ivqP30flbEJwCb/7
IJz3nL68Wz8mZyNHDp8QnxMu3FcwnxMuHhwaxf8PBfHIpA==
     "], {{{
        EdgeForm[], 
        RGBColor[0.471412, 0.108766, 0.527016], 
        GraphicsGroupBox[{
          PolygonBox[CompressedData["
1:eJw1UFsKwkAMTLu4v9LWvkHrleoNhFZR0Lso3kXxeQePoqCfTpj4ETKZnSST
nc637SYUkQbhEEsvsgexQM5BjBAv8ClyZviA9wR4FlBbGS4d8RualadujdwP
RGLwJ+ACuXbsUxybvoMmAj567tTdu5DawjRf4Z6n0EtuftqA/obC3sj4vyfV
Txx1H+HczGr1qDqdnZgvrXtPXed5U20etC+1XuVLu/3quePmuUPf1c8DdQP+
bv+Z2V0X1GPgs+fsynb/AEdwJ58=
           "]], 
          
          PolygonBox[{{1639, 659, 787, 1385}, {1384, 338, 799, 1725}, {1635, 
           788, 658, 1638}, {1722, 247, 798, 1724}, {1726, 799, 247, 1722}, {
           1636, 792, 659, 1640}, {1720, 785, 788, 1635}, {1637, 658, 338, 
           1384}, {1643, 661, 248, 1641}, {1721, 786, 792, 1636}, {1385, 787, 
           661, 1642}, {1641, 248, 800, 1728}}]}]}, {
        EdgeForm[], 
        RGBColor[0.293521072672145, 0.14891994562598182`, 0.6949010680478327], 
        GraphicsGroupBox[{
          PolygonBox[CompressedData["
1:eJxFVM1L1UEUnffz95uJKPsD9KXPr+fz4bp9f0BBm1zYJrWeBQYFJu36gDYZ
CUEbsw8hSqNWQUVFoEK1SwySNi3MUIPnLmjVOZwTLYZ7Z+bOvefee+5UTp47
NpGFEK5jtWBVsenH2oDeDlm2fsv6DvReyNtYP4P2tGu1bLPeAXkQaw36L++p
z0B2ZjprFCE0IcdiCFewvpVCuAx5JIVwCfoC7ldL8rMSJOlnMwhju7EtFrLn
uw77p8197Is8hAeQn2CzDJur0Ou47yI++2QMYhuF3Mbaz1xaZEP/Szjrhr4M
fRiyif0E1mH4GoOcK3TfYxvG7jbmXp9vurYV1hH6ru94zlpS59lUpjp8CaoF
9XX4H8J5ngsfsa7ahrGJYRq2A7CpZcKWA/8e6J9LkrQnnntJfuYg5/H2BO6O
Oo+dkrCxljwfJM6ScqbPmAsH7Wbx5jj02UL1GPPbP9jvxfk67lcLxb/BmJnq
+CIoB75lnckX1p2cuZOU/1e8K7eoB+RHxfHpnz08n8kPcQz5fXKuzHG4UP7P
o/rPWIxJDBeM40MhP9cQc834fhfKl7EG3cMl+yzhbgv6xShe9Jk/jN3mno5G
8fsV5FP4PIDYi0m1pE7f76P6PQ55E3fbwDkN+SYq59dRufCc+TxMqvt8EvZk
TE1zdMMcJo+Ic8M5LCTNwa75yBpWzednUb7Znx7PMXnb6fnibA65ZsyPNt2O
0efZ+eEZrHrmu8ztf/9Gv89rhWrLGpNH+3Lxpez55f9B3tZdT/oYcL+5auZh
zee0OROV13ihuHXHPhX1T41ATmbiIXnfcF/YH8alTdNzzbzJJf4L5NbHQrwa
Nd84V+T2o/R/llb8Nlknj3JzkpiI7bR5wh6xVm+jYjY8c7vmGO/LtiFWYuZc
jziXl1GzxPNDePskqYaPk7jCt++ieEl+fndPe93XuutWcT+q5ipr23SOZdeD
vWOcKWNoNb85p5yhLevkyYy5NW4+n42qzaRrftf/Ev/Iv1Viwgg=
           "]], 
          PolygonBox[CompressedData["
1:eJwlks0rhGEUxe/MvO/zSMpfYCE2s2XhD1A2FsqGxdioGaIoSrK2RJSymfE1
5WvElnwuLGRnRzYWJEaNnbLyu53FqXPuufd578fbPjo9OJU1sw6QgO7UrIlA
kjMrwLtARM+CvmBWjWaBxHrGrBdeAV/whNgW/In8eXKbwR/8hpoP3l1H38L3
yWmQ30L+IXwAjOAtEKuRfxr07Uf0Cbwn1VtzoB/9i07gM+AevhjF78h/SNWT
91YEFfQzeMmopw28c95Yg3/TUwnvFXziDxEr41/gv+O10cMlfNnny2kHvoul
qN48tgK/DsptUHMFnwya9Qc9AT8Dq+g6ukj9WJDnPYwH7dR36zPl8fPogtfz
jTf0QdSuPOZeJxjO6ga7eDsgTXQDv0U51Swe20bvRe3Cd+67P4p6uxX/GF6L
4n6DKrXFoFm851LQzn33/k/4v7EZdWvvwXv5Bxx+SnU=
           "]]}]}, {
        EdgeForm[], 
        RGBColor[
        0.24851309502315128`, 0.3864669180652245, 0.8133578134906626], 
        GraphicsGroupBox[{
          PolygonBox[CompressedData["
1:eJxFVktoXVUUve++e+4xxFeQ4ihVqZ982kRIWojoqyjFDxStRHCUIE0ho2KL
ggrNSKQDUcGBvlZbf5GmWolRk9cUJ+ogCVWeDaVRA/3YBHltYkEwabGDuFbW
kg4O+9xz9n+vvc/d2L+354U0SZJFrCLWXCFJerMkmcK+KyRJFfStmCR1XC7h
/AS+pyDQiH079mXQSXw/hH0n9l1Ym6gHMo04fwA6GkBfwToD3YeKkt8Mng/A
8xz29+RJsh37g7gbitK5DetB8NyB7z043wC6D7wB6zvo6S9IdhfoCr+xfw10
AXLzWMOQGcH3OdCj0LOK/Z5UZ/fn0l2CbyPYF8HzFehWyG2xXcqdt2wn7naA
3gb+dtzn0NGE7xr2FfC8h/U51jGsvbj70XaHE/lBv5ifK0G+dkFfm3P7eK6c
MXev4m46SP5a0F3VdViH+xmsEtZpx0edjJd2y4nsXMrkaxH0T6zU/JSlb6xV
2TFecq4ouwO2JkG7g+r8F/W61pOuF3N8O86XC7J/2jqZ15MF5fbLKF+/iPJr
2DmhvqvW2Y3v5kz5abYt4utl2F6Pu3fgy7dRtr6JN2NmvC3WQznyln3+blF4
6DcemAvm4XoQZs5CzwnQKtYsYwf/PNZjBeWINWRNZ2yrZCwwdubqxaC6/wLf
XvJ+HvQZfDfifmMubFAP8U+MLjne6Uz2aGsgU07ZO0NBuTkepZc6qZtx1AvC
9t9B2H0Y96POD/PEWiw7zqlMPcaepX36wVgGQfdjDaWy/wfWBM47MvHQz37b
IT/7kz37K/ZbgvBAXBwPwvdO+HkkqE/Zr8vYt0HPD1H4pW3ipDWX7luC8EWc
0U/mc6txnqbqZ+aJte8xHp7NtCfud+by5SnQR6Jq/CjoRfcm+2TIM+BWY561
3I3vu3Pl8ELQHXlYJ8pdcF/TDu1RT+6ZwjwwNx3u8wNROPk5yH/6zhgHjBHi
40ZQ3jjz+E0+8gxHzcmjoPfCnw04+zCqbus9E9pyYeEYztuxf569lqufOPfY
KzX3MuXZUwvuf9of8BwmpgbsD3mL5m9xr1BPj2NlntlzS+67VfduBedjmWpC
nJwKyvXr8G0sqq+ueBaVbJdyJ60zdT2J+TuN2xnI9RpLxBR7m7GPRs34svu4
L9O7w/eHOe50Dhdh/3JR7w7x1Wncsu77jXPSQdf9s1R3rDn3g8Y/53TNOUnd
F+Q/E+X3SpCvq+459sK4e6rZeWKM9KVuf6i/YD3Me8mziDZ5x/OPo+hh6Hwy
1yy67hnLXFEPMUqsvh8VY8V99GmUv8ROj32oenZxprCfr3p+0kfOAZ6vzbSi
ajnhGhHvFb9rI67XZuOtA3Rbrvu7grA175697DeL9Weduy3LN3M8kx3GMeZ/
A9Jx75nnmudCBfLXQH8PyivnMGvdEDRf+SYvBGGKPXFfUF1Yn7ej8v4m6Giu
+N7A/b9BOn4Lwnwtu1nb1NhgjlLPvWnniGeznnecL/S36Jr2OibWnf8sjf5v
YU0OuS4NPiMP4xj3m5J6xk55T13EPXO54HeWZ30+/x7xtGL/j3NCnbN+g9b5
bX06lw83zDNnuweCatEUhYEWvzWkrd7X3TtV14s+0e6RqPnwSRTmiL3znPGe
V5xbjIv1mvP7UPf8PGh8/j+L9jku6l90DtdykMnPj2yLNtfeKOOzD/Yi+L7O
9TazLzbhLAvqb74hK8bA9ly8lKcs6zXmOv0UVNsnwHM4qh8v+l1q8dzb5Xei
yfP/nN8O4pZ2J/zvtOyZ/B9KGW1h
           "]], 
          PolygonBox[CompressedData["
1:eJwlk0tIVlEUhc//OPckfzWJRllgD0pRKAmKwB5WGFQGBY2SwKai0sSmvRxE
NguLzB5GaEb9FliNepGVNYgIygYmGZU0zYQm9S3WYMNaZ62z77777F3V2rG/
PR9CaCKKxPsYwq9CCAXiThZCTwphlPMZ+Dnwa/Qv4EniJPwDcaBoTzXaLfhC
eC38G7yfuIi3l2hEe07Uodfoe2hniJ25EKbRu9F6+ObLvO/obhf8Bnw+/hy8
Ek8b2iPurIQPwC/AK9GvgyeIFvJ/Rv+L/o77reCMOAq/m/nfxvAfiq5JtSnH
ZXg9+h+8u9HXgcvoi+CzxAh4rfLl7ZnBfza5N+qZetcMHwQPEcPwp/Bq6tmA
vxu+gvsHuX8efSvaes4q4AneAq4hIryT2IF3L/GRWkrwZvC+5Nwd5BvAu52z
PNognkbwSOZc6mkZ/Bj/6qJrmI3Oqdy6swpeBS9x9yf+5eBr+At4j8Cvgrdw
1ob3H3wZ/ib4w+Aad4H3EF15/4P+ZWN0rTqTtjnz3V7uNIC/ox+DH0avhW9L
7oXeSG81GV2LenQpuefq/WJqug8eU8/Am8hXgfc4d0bxPiBOgOsy59Y3fqCf
wj9F/mfwV9Fn0pRDueZFz2I9/AV8OnpWNKOa1dPE14L/+Q3aXHQuzbxmf0ny
22oml4J/o68puufqvd5Eb6OzJ/JGz55mVLOqHdIuqcZx7Q/RWfQMaZam4Lmi
d0C78Cl6tue0U5q15F0r4RkCDyfPhnbwNvhmsqad0m7dS+6lZlizPBGdSz1U
L9UD9UI90lstiO51A2fjySGsnShH76B2UTOiWemLnh3V3Ie3P3k3NVNXwG+j
d109VW//A7RckA0=
           "]]}]}, {
        EdgeForm[], 
        RGBColor[0.3120043982233792, 0.593402891514262, 0.7291847182668235], 
        GraphicsGroupBox[{
          PolygonBox[CompressedData["
1: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
04ht/wKpgf2A
           "]], 
          PolygonBox[CompressedData["
1:eJwllWmIj2sYxp//vP/3eQl1MMLYjn1XhDDWkP3glBAOWb6YkCVhrGWpoRAf
ZL4JkTCWOUmIDiJb4nyRjLUsITNIFH5X14e77uu+7ud57vfe3tZzl/y9uCCE
UILkkVZpCFswlCCDYgjfwNdyIawAjwZPyEI4nIRQjDwF/4B/DL8a/i/wRvBM
uIPYzqEfxfYdrh/4CPpnbDnwEuQydy0Fd8X/KrgMPoCbBtvugpvhU4K+CNkK
Nyo6luvcdwtcAV9I4Hex7VZ80bGsQSait0amoJcik9A7ITPQP3A+z/lGyHTe
OyYfuM7ct4a3XiJ34LZl1s/jMwa+OXhfcEwt0Ltg+6fAOVFudnCmFH010gn8
PzIl7xwqlw+Qm8E+XeB6cH4O52vga8N1j9b7KwfohfjMx7cC25/wDcE9c7Y1
yuwj32ps3dBHIku5L0E64L8YCXB78R+Cfz3wppzf1NvlqbkD4JXRb+itheCB
0XfoLtVwKvpz5SfvGGrA9ZHNcPOQnvjfTl2bVaoXvg+QyfgfJYz2cMPA3eGK
wEPRl2PrAe6G3NN7qhHcJ+7oiH5V+c35GxbhW6MaJ66ZaqeaqXaV2CrBZ7mz
Me+NhX8D/oQc5+w4bPfh3oKb5O0j39fgBvDF4JuZe1C9eA3Zjv4vtiK4BeDe
0TEqVn3DMs6OUL/m7SPfZ9GzoTur0O9gGw7XFHwG3z3Rus5Uwh3P/K0NwCfR
/1CPB5/R2ROZOfWYem0AUqZcYruk/kudW/WYeu1jaq4dclF34z8ucc7Wwl3I
zH3kvgNwpzPnSjN0Br1XdC2VI+WqH3IDfjb4UeYcKVeKsS5cNVIe3BPqjeWc
b8X3/Ad+Af4Kfz7nHlAvXEq9C1aAqzL3nHpPM6/ZV41UK81YS/Dg6F2kGqqW
hcg0uPF8TzXcSvCgxD1dgf4q89t7wC81H9higWdCs6EZ1izLNjY6B8qFdpZ2
13rtI84eQupkjlGx6hsvws3B/wnceGQ2el/tyJxj6oO+I7p31MNJ6p5R78jn
HbgY/DPnGqqWO7n/feKdoN2gmdPsyacIXCv1bGtnaXfNytzryvE6uLbRs/QL
W7l6LXq3KufK/SlwTFzDWeBdqWP/gG0X/qWpc6keUa88TM0pJsVWN/MuV042
wO0H/0z8s6hK3RPqDf0D9C94kXq3aqY121cy727t/C+pd7R2tWqm2ukO3aUd
3SZ6Z2p3agdvh3uS+tv0pt4uS71b9E0V+P8GaoTUhg==
           "]]}]}, {
        EdgeForm[], 
        RGBColor[0.43167624824839324`, 0.7024650835486765, 0.538134189814877], 
        GraphicsGroupBox[{
          PolygonBox[CompressedData["
1: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
           "]], 
          PolygonBox[CompressedData["
1:eJwtln2Q11MUxr+//e333mKZmmLz0qbSplpjaiYKk9dKq7yssru9C+l1F2nW
EMZgGloz4R8VKSlRaaZVu6HohcpojdplSNJoacaumoosJZ9nnv44M89zz7nn
3u+95zz323VSZUlFTpIkC7BcbESaJNuzSfI5NjMmSS9sZyZJhmDz8N2BfYFv
B1aJ782QJFdkPFYB7wEvJ+ES+DB4LXYpiUvJ/Ttzr8J/H/4TzMmDz4Ivhr+E
jQ3OqdylWAA/gu0Cl2FtwM3M6ZzrnMq9hTltyP0R87eC/8QawdMYOwE+g93D
3B6stxBcg50DHwpfB76LfF/Cl8JrwYWMjWZ+CzwLb8V2gGczVozvcdbcTfzb
jM0C38jYTHzr4JuIvRPbmfWetfc/8A8Dd8bfDL4Om0r8CvjR1Gess74XywUP
1Rh7/56YSfAh8Bnw7+AT4bfBK+D74A/Ah8Er4fvhG+HVwXtPdV/gGH2WveCL
4T2J3wQ+TXwZuAjbBU+IKQdvwPbi2875HmLuJfCV+I8xVqK1scuJ7YZtI189
MYOJLSKmDt+vjN2ErxP8ELgrYzXgk8wfCR6MTU98R+OZW47VED+fmFJwJ/zL
wC347wbfmrp29sDX439D35Bxjc7Q+eLvzvrdsI/hHeGv4J9MfH9iXwiujXxy
DMJXR0xBrtcsA29krB48GjsX/hj2FfgUOfLx9ccaM66Z8eC3yNc745p5NLoG
VAuaMxu8JJirRqrg7ZjzYsY1r9rPY2wMvifYz0X4xsI/PPv9C/C3ja51raG1
svBRWX+zvl3fqG/Vnbcwfw28PbwD1gRPo2tJPanezMBHwgvhi+DziVnIXqp1
/sFzNFc13xN+BH464xrdzNwGxvoxfzk2HH47/s/AW7Cp8NbgWlWN/g1+iLFP
s+65/4JrRLXSXXrC3B/g7ck/AP5TcE+qN5VzCnP3B/tWYyXRa2rta7B9+J4k
R0HGd3ws+Mx0dpvxTya2D/5V7KWUb/oW/j7+gfgr8XeBf60ewzePmIuJ/TE4
t/akvf2G3Qxfi40itoqYW7K+wxpwceq19I36VtW4al1zDoMPYtdqv+T/GXwy
uHdV83+BZzP/+qxjDsC3B59NW/xn2Fd1aq1twHpL/1L38gSsntirg2tbGigt
/DdYC6QZ/4A7MOd+8j2IPY9/IGNTctwj6pXNqbWqAv9c3XWwdkhTTgVrlLSq
GP9RaaV6NOuafYb4I8E+9ZB6STWsWpYGSAt0Zjo7aV5L8B3qLqUJTfBPorVC
NbYJPDdaW/XG7CZXQ+pvV43Oj9YE3a96ZEy0Zko7dYe6y9XkHASvUo/AC6Ox
NE5aVxB999IgadExLMmxZku7l2FX4htHzPnEnheNpUHSohWqf+kJY/nRPaRe
2gqfFq0R0gqd8QB8w1P7tmHT8S8N1jJpgrThPaw152yNpr4j3ZX2dBxci78d
fATxG8DHsVczrvk5+A9izRm/scvJPxH/y+A67DnVOv4DGeeYCO4SrH2acxm4
Y3Ttq0YuiN6j9iqNyQF/EF270pS10T2uXpeGJNFvpt7OOfAi+DvBb4POUGfZ
l7Fns9ZMaaf+AfQv0Bfbg38c/PUcf9N6/BdGn63eGL016ln1rt5cvb3SKGmV
vnECeG9wrjz834CfTq3dqlHV6prgt0w1odpYlLp39GbdEH2mOlvtsR+8Kfqt
0z/IL9E9od7QHa0k9t3gt0s1oFrQmlpbmtgIfi34bZJGSCtWBb+t0hxpT5/o
s9Ibq7f2cOp/H2mAtED/PPr30Zk8lfqN1lutf4iHmfs/45E5nA==
           "]]}]}, {
        EdgeForm[], 
        RGBColor[0.6012770891809831, 0.7427847145459091, 0.3641407711311881], 
        
        GraphicsGroupBox[{
          PolygonBox[CompressedData["
1:eJxNmGuw1lUVxt/zvv8L5oSjzSheJgFvH/JSwWlypqSwEkzlouWdi9OEmhfE
G1o2Chr6AY63QJA7aCEKSigHgSn76KEBtBouJRcN8MqhkbKOSs/P52Hsw//d
693/tddee++1nvXsf79rbh55U7PRaHzS1mi01O6qGo1hai+uG43tevGGnlv0
/xi9/6WewZLrstEYoHazdKfo/XQ9Um/cUFm+Qe+XFB57n/q7JXdo7NWSd0re
oWehJhuq99ep//A2676XuX6auWfK3hu1510mm3PUN1XyVdJ5p7J8lPqflr13
9W6i+kfL7juSp0geoXf3qu2jtl19L0p/gJ5HG24fUbsbv/QcLbmX7NSF/y+R
/gw9V6q/S/+H6Fkn+U+VfV4om49prn56rmrzumdnH76lnyvVN1M6RZtl7A+R
7bMkPyD5qcryPdLdqv6NGjtc/ZdJHsR6Jf82+/zd0nvEvKfo/zeb9mlQbJ2p
9v6G3xfRWSW/XtLzeJvn3asxv1L/g02fGf5c0PTecrYfFm5HqH+x5Lf17k7J
CyXvkXxHw+1uPbc3PB8y86O7NzqLWj7bAZEXt+z7fNn5R8YSA4vS31vr36/+
RdqPjsJnzPm+2rSdgZJHav0dao9XO1ntW03PT2ztkDyp4TM42PD+r2n6XPn/
TOFY7G46Rt7JuuhnXuJjad4/zN7Kj/HEu+ZapvmntPlcsDUl57uz6XknSJ5V
OFaRWR++3SZ5dmG9WyXPlfxm+vF1V9ProG9XdDZqrk16HpM8obav8+TL/sL5
M1VPX/ny6zbH5Eg9g6R/sdrvRT5X7UUt66BL33ei80LL6xqr54+V4/aVyvuG
fDC+kRuPZG9p2ZOtenpLZxtrrDzfSPk4rmV91rJO/h2h/12Sx5Qec3bpNbE2
YpT9Zp85y3Fq/0uO6NmisZv1jFb/cOlOV1//Nq+nveX52iMTD8MS1/303C4/
uvT/VrUj1M5Q30nEfG18OVL+jlT/E+o7uc3xSP/hiXX2Y4ye81qW2ddujRmi
/++pPU1reE59p9ae/xvx5zW9O1XtUPX/uHbcTiB2aufDXMmLCscbeQeunNVy
bt5UO5fmVMbEE+TLqIbj/3o9D+nd9bXj40np3FA7tmZXxqSHgktv6//xGntX
afzY0DR2YwuZ/VwPVjSN24OTV+zrtbXjc5ZsjAse8w6sejD4ADasz1h0sENe
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
           "]], 
          PolygonBox[CompressedData["
1:eJwllVtslUUUheec/5wZMJGiJlwEpS2KD4r3Aj4IPii0cinUaoQaKPWGpkKp
AqUao4CCDwQpcglBExWjxAgRRaXFKL4WDYoIgpcAsSgXBaOIAq3fynrYyV6z
9sw//76sKWuYUzM7H0JYghWw22II53IhNOGPwi8vhrANXEHQvfglKYRN4Buw
58HV2AJif4NvgnuCPWvxN2Gt+M3Yq/gvYXX4e7AbsxCGsecb/H7sX81Zk1j7
C/w5+EPwY+AX8Ddjz4InsL8//AqsE38X9jJ+C9/sJHYu583H/5i1EvABcL3O
wpbnfIf74EuxufDN2DK4S8Ez8ZcSfwV4K7aU+M2s1cJNBM+D+4X9jeDrwZ3w
o8DT8C9nbRaxq4gZiH8rthh8GtsL301Su4jvIH40+G3udwb/NeJrwUPAtXnH
KHYAeCJ4Bfgy+PexwTmvDVRtsCmcPZS1tdE1UW2Us8/w89F3GwP+quicKXf6
pxLwD+AR7K/g+wfxR2KP5l3zk/Dvgs+D34O/H9yIrdF+bCrcfuyW4Bp8H10D
1UI12kLs7+BKzr+HmJP4f0fXthT+Ffwu7A7wncop/jr2bMj7G43gf7Bq+DLi
V+OPh3+S2EPws8jtBPBT4CPgx8F3g5vBP4MfAU8CzwcfBc8G/8sZkzmvnPPW
4F/AasBXgdfhNxFfUL9hX4KrVBPqUIq1s/+NorkqzqtMzoFysUz1x18OX5lz
TwyHXwSu5/wZWF/wB8T0xu/kTtPhulg7WHBPHtP/gd/MnNN34Bdig3KOUexg
8IvBZ14Cnpbc61vBdckzollRDw4AD0uuXQ/3uwb/puRvayZuFhfN7WBtKnvb
sCVwi3QHzTZ4Y+Y76W5HiN9NfDXxh/HLWNsSPEPlyTOkWZJG7MS/Mrm31UND
8BdqJvLWjHb4lKwVqlHU/aNno0cahH97cm7riF+vu7B2WvMAX1O0hkhLpDEt
4AeSa6+cKDevw58APweeAt+bteN5a1Sv5JqoNpr5xfC7or+lHpgDXgl/Cu5P
7DvwPtW84H8eDs6StUA9mMfvie5N9WC3tIm1MQXPrGZ3N7iq4BqqlsXk3pSm
FPBbsa/51h6sAz6X3Nvq+ZBcE9VGmrISvl9yLqQh/ZNzptyVwX+BP5O17Zl7
/ix4hjQx80ydiZ4BzUI7uAFuLGd+knmP9mrmNHtaqwePKzq2A3tQuUjuvQbp
g3IbrVXq2VbNZvLbIU2el7xHe6VZ/xG7EdyLfFyEHZb+Rs+Wek69NxlrCa5Z
M7EXJ9dSPdAHvxJ+B7GfYg+Dn07WXuXwmeQ1cZrx89EaKa3Unofgrk3ufc3k
dck5V+7Vo934fYruddVQtdQboLdAM9DGWd9Ga6fesL34dxH/UeYcK9c/Rmub
NPYn/J3RtVmFjYb/Izp30shT+EejtVKa+Gv0G6ZeVg8vwD+kHi44Z8rd1dFv
p9be0r8U/Rarx9Rr0nxpv3pWvSsNk5ZJ46X10jxpnzRue3INVAu9QaXRb5be
Ls2AZuEA+GxmjahI1nBpuf55OrgteVakgdvg/geccxDg
           "]]}]}, {
        EdgeForm[], 
        RGBColor[
        0.7804755704799398, 0.7245278184011289, 0.26685671883835577`], 
        GraphicsGroupBox[{
          PolygonBox[CompressedData["
1:eJxNV1lsVVUUvfe9d84NYysUBBQjgwmQ0BZp+1EGWyNIpC3EKAklMWL4IAao
TDIINC1DIEALFYjxR6gYgYoWo5CAkZY4AMoQYxkMHwYTP/RTPgFdy7WIfpye
8/bdZ+999rD27pg3ml5ekUuSpDpNkjz2LvzZjPNzODcXkmQFVinW4zFJakH7
NCTJVqxy8BRnSTIc9LkQMAz7bPyeg3MRzm/jzlqsI7hzBPxLwT8rkyzKfBb0
OvN04rwXetuwHiTS/xLlYJ8E2gdY40G/lJN9tG0l7q0qyKY5mXg6oack6u5Q
7MWp+KiLelean/qbsPql0jk7J73LQbuH80Gcj0PWanwfAjnrQF+Pdco2XMSa
ifM4rJ6cbDuG/WOsepwHQOYWrKs4X4GMZpzP43wB33tzuleSir8u0fct5ukt
yBe0ZwnOe/LS8UJeehtA3wib2nB/eRQPZZbYtj0F8e3z+9ujaPxGv7UWZOuo
VHy7C5LJnXzkGZbqN8/74YcG/J6aKYYXbP/8TD54Ht+3pcoBvuk0VgPOlc4h
xrAG++uQNw/nKzhPxfcdqfTUWB956cf+qeR/CbsH4c0dmXzSY1804vtDfMfn
ZArkrEl1h3lH+xjTXVF2voi7rzBHQfs8KIaM5TT8ri8o/7oh5wbk9mFVpZJH
vzFnLtM+rK9xbsL9ieD5EbJbIPM86N+C9lkQP/3NPFqYKnYrnF+Uw3ffxbqD
cxno5VhTcG6MestC7Gsgey3Wh4lo7Xm9cTx0HcU+AXo6QNuX13fq2mp97aYP
S+Sndp+n08856W7NJH8X5PyVkz7q4r395qdf1rke6+wr5vxY3F0NnjHYdwZh
xdM4b8e5AueeIF/Nz9lfqfjJx/omFpBvdJS874L4zhbk24F51Qxzg7RzpjPv
99g2xqUiL19fD6qrTZDXDDtugn4BtBtROcncvB3FfysqbhMshzlaWVCdMicH
uE6JdWWP4hKkv5RYZ4yiP5gn1MV48K2383rrJuj7Ced3sNeCr8Y4cyuvO8yr
UtOZ76wP8p8AfXZetc0aXID73Th/EVSbpNPOqpxkUQ59c9Z2/x30bQH27anq
irXEmqQf+mM/k4qHd18NwuOx2BdBRqPjy52/a1O9s/FRXaSqQcaFuEh8ZO6Q
NtB0Yg8xiLGiPxe7zmkff5OHNpOfPq1xP6F/WHOUSbzNR+m/FoQZZfYV5VEO
Y3QN/K9hHUiUF9RL3KOfZtlX//q+oJonztGfo3wm9hFzaRt9SLxlbLe6T9HG
c/Yt8bWloLusJ9bVA+vlmbnE763moVz+Jp43uccxl+otv84Y1ms59Cd9ecB6
N9s/64PkLYrqA9THN/Ld98xP2c2WzzqmnKPuob3GyTLz0NdPRfnvXeTX5qja
KXCP6q9vsXaC4r0/UywnuOcyD1kvM23zz3nFi7IosyzT++rtw98zxWJDUB7V
OceqjbnMK/ZVYjdxuyboHRF7W1Sfuhmls8p6+b4+1x3zuM829Lm+SJ8R5Kf7
tqXB9hDbJrr2+aZJflef31sBeydn8v9e0DYG1eSfUTElXjCvZoJ2Mq866+ce
RWyvcM/r9Lv4pvHWRT9SL3FitbHiclTN7MR+3vXIunzf+D4j09svepboSjVr
HbQN1M/cZn8lfjAfBgTNTBczxafL/AvdX5YFfSPPSWMv48D8v5kJu6+Cfswz
z9zMuIF1KJEv6dNq85E/53plLlHOSucafcKBkphzxv2kzj2l3XMN+1q58Za1
zvnihmeDtqB5aGemd39iGx7L9K4ng+Y+6is2TpQaK5i7lMPY8g18y3H7psgz
Rn/3ZMZvk2uBNUG5lH8d98qCcpb9anSQDUNA/yMqt5njtX43/XguKBYbM8W2
xzPS0CBcH4F7P2SaeQYH9WHOD+y/nLOI2eRLo+jfgGck+N8kdmX/9dRuYw6x
iTjDuavE56IgTOWczvuUwznlbBBubsjkZ/r4jvt+u2eJLe6/fA/xuM+Ycsg1
NcPyptlm1iVzlLqXRc1k74FncdDMEUAblwmbnsH+kWuctX7fmH0JPL869nfc
92vs00rnNXUVOw9agzCR2LgqKo84+zCXHtr/jAPzvtw5M8gz2eCo/0k4IxZH
1Q/riDlzN6qufsNenskXpZnmXdrWAZmVmWz9Jai30d4r7jXDLedUUHwZ5w7r
4OzZ6L7K2DHOOxzr6iD8JDYzJ9c4L9lPWtynZnnmPhw0bzAH6CPOgsS8J6Le
8WiOZr4QiyqMUUuNU9M9A85zfjPPvwry7zRjV0tQjynC9yU5zfPb7Mcq4wn1
V/stzA/eZ5xOG48op9fzIefEycYKYgyxk/MJ7f0+SC+Dt9azYafnohP/k1Xp
fOP/JbuNiSMy8XP2HBnlT/r+H38psag=
           "]], 
          PolygonBox[CompressedData["
1:eJwllElIllEUhu/3/97vo8FSM2laZBlU4ETmoiz4qUyKbBBcFARGRIRlmIXa
bBC6yFKiqE0DWZLNWIuITBtEs4wINaKwWlXbtlnP21kcOO99zzn33jNlbqva
tCfmnNuBJCFPvHMdgXMf4s4djpxrAOcFdpYKHkG2YHgf21y4VqQUbhRZDJcW
OrcPPQs+Fb0Sfgx9M2eV4DLwWfBN8Bh6hNSg5/OIBPonYlQQ/y02S8CT8CmG
a+Y958EvkS7s94MbsB2AX4DeglyA8+Ai7Ndj8wnswEsD8wnQG5Fu+B6kCf07
shzfDPhW9Mv47EQvgS8mfhFyBr4Vuaj3ICfhF8GvQO/EZyJcMvIQ/TUyP25v
qoKvw38wbn/W3wfACf6XAE8G54CPwB9FmsE/8F+JXozUg6eBS53dOR19LmeP
0HfBT8f3V2i2spkClxtZ7hQzDz0G34/9U9UAfpSzA9x/BdwFXhbZ3/7XSLnS
/2KWwwr0P9ieiFkNkuFnRHZ3ATGnoc9DasDX8M9CT8LmDVwCiaOncXYrsB46
QbzP4Cpi5mPfBr6OjAvsTJxqptqpB9QLM0OLPawcgY8hH9E38J5ZcF/A1dim
4HMX39Bb7DzOXsC1YfMb2634HIdbHVntVeMr4HKkEKwhSOh/ynfMcqxc70UW
xq2mqu0R/IfQR5DncKdDu7sA/BF9JDRdPa3evoWko68lZgbc1ND07cii0P6g
v6hG2dg2RtYLyuE7cIHuC2zGWrz1nHrvNjZlcHe89ZJyoFzcAE/Gdg026cRu
jaw3FWMIro+zdGcz0I8+JTTbw/AT4G970zvw2YhvSmizoBqpVq+8zX4t932N
zEa2fZrR0HaGdodyrtzLRraawV58l4JPxe0N58CndF/cZkizVB/ZbngPPoTe
5G3W1WNzwQcj41Qj1aoT/h64HVwH7oUvTLKcK/fvwaXgJeBu5SayXtBMPva2
c7R7tLPa0avVA4HFLI8sx8q1dsQ3uEzwvrj1oHpxdmSxdTYHPcfbrOlP2eA5
3mZNb9BbHnjbNdoB2gXjwcudvVlvH/Q2O9qx2rXDoeVWNkOh9Zx6Tz3711uP
q9dVc9W+x9usqEfVq9qZ2p3KuXKfBl5HrFXgn8TbjTQH9udauGfeZls7QrtC
O1y7/BL2JZHtWO1a7UTtRuVcuVdMxb7qzVYz8wauzttd2mnabf8AGTfB3w==

           "]]}]}, {
        EdgeForm[], 
        RGBColor[
        0.8917580483516302, 0.6045319001577484, 0.22148367414814304`], 
        GraphicsGroupBox[{
          PolygonBox[CompressedData["
1:eJw1Vs9rXUUYve/eNzNBSZBW3bgx/qDQQhIsmDRpENOiJBv7IqgbF30uhdYW
dWOTivDieyl0o62UVGvBp1ASoWkWXdQkVfOiUhrdmNgaoYj6BwhCk4ie03Oy
mDtzvzvz/TzfmdtZPTp6JM+y7HeMAuNkyrIXIHgkZtmLmP+GcLWUZRew7se4
ifU7GE9h3Y75AMYKxnWcrZX1/QrW34Qsu4r1OPS1oGse+ycwvwzZFr7jc1bC
ey+NY27ATh1jE69TmK9BvhPrL7DxOM58Cz37ILuB9SLk7+PMAt6/w3wMsh6s
2zCPYPxCnzLZ6splbxTzmv2cw3oq175noP9RyHLMyxiLkN2BrSXEct2xnML7
X/Dpp6B8vOucXMklP4j1oZJktLsf+3Zg3oSOz4P8ewB+TmN9Autl6NuDb7sx
Et4nMTcwvoK+T6DvPEYB+R+YZyAbLkn2McZj0LsXugYxP4T5WYwm1i8F+U3/
W1ivY2xh/7mkfJ732fao3P8LeweTYmcOmvZzPck2zzD/rMOUzzKPrBGOZvN4
LJRVrzslYYU5aEF2G3v2l6SPNeFZyn61nPghdrohfy9JvhRU2wr0DJW0/xbG
bKaYiBOun0vKw6dB2OMe1ogYZI1ZX57nGe5nDYnnQcxFFIbKUf7XHSPjmDD2
WBvW6D7ovx+jB7KdUf5Szrw/nhRHA99Xg3D1YRKGJ52fj4Lw14GzHY6Z8b5d
yCee73bMa0kyYo7yS4X6i2eqOF/BfDgqVu5hvLVCMdB/xsdeY4w/BuGmnlSv
V0ra08D7n/QvKVbGTB3HonrhjSi8ErdLWL8aheu3MK9nqu1vmD8wtolx1pr+
0C/2UsX4JxZW3RP0ificIwaCsBKicMG+7jE2WtYzURaPzOaqT8P5XHNvs77E
COs75J5jPw6bF4a8h+/TufwZ2sZCplwz5ytB+riH587l4jjy1ynbJR5mjR36
32//byf15bR7k34fsI0B88q2ryP2q+56USdz1nKtyWvMQwzi1xVz6ji5Ixc/
3LSMdWe8w84zMdnMhSvWdtTn2bM1Y5u15po1IxcTJ18H+ci6V9w3/xTKca95
iHXZgOxuoT3kJ/JUp/udtSUuyOvVsmz+jLruJTdGxUv83esvfHvNZ+lL1Tjb
bVvd7sF5Y/K0e6aS5E+He6fpO6cr0zn61ON7h7ghXvuM76eTbNI/2n04qn/J
wcxnzfvZZyfMRw9G1YJ3Dutec6/Rf9ojV9Jmm3HL+o+4FmeTcngmKQfs3Q7z
KXmQ9wB1MGbqWY6aycHEF+3RViOKf+tR9wvlxB6xQEw0fc81nM+LQXfG89Az
5juFuao6l6xLX1l5pM8/QO8uyL+PqueC83PD/bTos8zbDvPnoLFHLtnlu4k4
nzPWB5K4jpzXbo5kjdgjX7q/6Ncex85aMTbmv9N3DO8IYu2Q83k6COdd0H0S
vl4mJsnHSf3endQvl415YoX5ngmKtc+4oZ0J88lZczL9JbY3C3Ea78kN45x5
vlio71jfGfs/kiT/LMjPDZ8lF9zjBMgPB/XEQFDOrpr7mIN91kPs0W/285rz
SAy9HsQNvUl+0MaKefeubRFXl4wt+kksMM9ngjirP0kveYdcxDt/yvVi/sf8
v8F/ItZyyz01ZswQn71eH4nixKNR/1bsi+27vM11G7dO6iCOJt3PxM414yr4
v6FsjmX8rPuFIF/eDNIxbt/oV+E76z//Q/Jf8omku/NJzP8DgBxe0Q==
           "]], 
          PolygonBox[CompressedData["
1:eJwlk8lLllEUxu/3vd73haKBpk0UjRQE+lWQQwkRDVSL0qCCkNCWgWZYtLCy
FuanYAsHkgYTskVg0LBo1SCpFYG1ySBdtKj+gKBFCvV7eBYHnuc8594z3HPX
NjTVNuZDCIexEqwtDeEZjufgrTGEd/BX8DXwCfAFbG8uhF9JCF1ZCIvhzfB1
6IvARc7sgk+jX0dvwTfI+QGsEVyCVYIfY5fBZcS0Efsb6wFfwvcQrZT7YnSM
YkewVnAvvk5ii1gl8efw3Va92A60cnyznG1HrwDXo9fkHNMMvk/MXbQ72L7M
OZX7GPpq9FL4wZxrKoA/R/eqmWg2Vfi6Euc4q/nAKxhcAT4fvpCYE5wHhgXg
sehZfMOuEduUehaaYR34FHpV3jPSrFZiR8Bv0DejbeTMxcQzXQ8eUY6ccyq3
7tTdT8n3Fq0D/iNxD93KDT9T4je8wd234H/R57AZ9Hz0224hZjTzjDVr3fEp
esaatXrug0+hb09cQze4E/0nfBJ+JXXNql01b0AbyJxLb9CAPo0+m7gG1ZLC
z6MVyLkbPIl9zHlHEuLH4a/hNfBV8FH4i5xndJXz8+Ct8G3wPeDlxFQH+1aA
l6Z+G+VYBj7AmXvkTuBF+Bx9nwSXcr46eoe0Szux0+AxYpZw/iV8HByx78TP
4KtXfOZdU0xPdA/qRX9iOLom1faImKPE3oTX5j2zYuad0+7pzqroP6S/pB3d
n7ln9a6ZlKG/h29KXLNq70jdi3wfUudQLr3Rl9Q7rl1Xz0PRPapX7Wg/+AE2
lPjP6e/1Ef8ncY2qtT1179oh7ZJ2RLuScX4Q/Tg2HPwm/6J3QLvwRO+Teoaa
5Vd8U9E7ql0tx5dDb4m+SzUc4u6QWtObT6D1Zj6rmvrBhei79Wf0d/4DY8yU
Fw==
           "]]}]}, {
        EdgeForm[], 
        RGBColor[0.8864315229528317, 0.3472861141115897, 0.1710886611279253], 
        
        GraphicsGroupBox[{
          PolygonBox[CompressedData["
1:eJxNVM1L1FEUffMbf+9XITpjNU1uokWuimpjH2CORAS5Spw2EZKELgI1MGiR
jrooSnIWaVSbWrRX8z8w+oBcqJs2hVEK4bo2rjqHc6QWj3fffffdj3PPfUf7
h3uGkhDCE6w81gIO81jduRAOYG/F2oI8hf3Cf+fD2DexlxPJP8K/cxHyNPYm
rOUgP3xTCLKlTPvlLIRByEkawslEcg6rSl1OfnjetPwbCR6E3WrQ/YD1Sw0h
vG1QzP4YQh37C/h+GGX3FfJ4VG2PM71jPPqmvxLWd/jpwL7ftWwE3VHfYv02
5B2sImRiRl2L7akrW74RlctwlL7F9l9S5d6HvRexTyTyt+Uaic9z5PeTOcOm
2RiuQz8UheVoVK2s+V0w3sZ80/jRz1XY3Ye+J8rHvHuxgnefG4TlNGK9hv4u
bG4hXgXynqgYtL2eKg5tGOsc7K/B/yz0t7EuQX8eupd54UlcqWNteXOAuTYZ
g6LxWXS/6JN3PLNG5sU814xz1f1tN24jUfcLroX4/AqyZ465vHw+Q05/IM9m
yoO+iD/xps8d84p8OxLks8lxyRVy5kGU7bG8zh+i5PdRtWzb50ec26D/hH0S
ik6sQ4mwJ58afS4515lEvNrwLJQ9R6ylYBvyodFYVfye+i7sFy3vjToPApsJ
zyXn7FGm2a1Df5YzgNzOZPLd5bcTeLsKmzXYNEbVsi+qt+wfMXtqjrZnyqXD
+TB+xX5S2IzA5h7evkqF5+5MX06EbdEcZx/pm/nQb6uxYa0lY7LmvvAdOUyO
LJo/ve4bcxswz4vmM3vd7Vkmr+lnLlU95Cz7Q47y3bhxIB58R3tyq9X/G3Nq
sy37/i3VPHIuWSfrfQPdnahe3ozqT6f/CvJwyX8R39Xda/Zoyn0i38j13Zxn
/KdV4avGWqPwGzEWddvQD3Ne8fzSx4r9sCeT5sruHXE4nqhm1tvnOeI8sdYx
18s55zydStXnmv+7mv9M/p2nU3GG3CG3GHMOmFzJlOtoqj41u49ZVIz+VFwp
WV+wzbpzK1guOXdiyDkmjow35llinn8Bn+W9zg==
           "]], 
          PolygonBox[CompressedData["
1:eJwtkjsvRFEUhfe9Y871KP0CBRWhQsQziITKmBkahSGZhGRmJHTehQkSCkZC
Q+EH+A0Sj3JUKpVOr0LiW9mKlay179rnnLX3bSuUM6XYzNpBAyikzYYpHICF
YFZEj8F3wBx6GT0C3wfz6FX0eOyeJnQAQ/AtMAu/SszO4B+R2TveCfR1yqwD
PPP9Av0Fr3P3G983wBT+Iv4b3QW6Y+9Rbw/6Ae89tV36jxPnM/iP4IN870Jn
0efwH7Ade6YEfwtoVS/IwfvoqXL2JHot7ZmVfQ/k4d8MJRf5mTpbmZV9FKyg
N9G38BOwCH+lVo/+a5xdCZ7tFL0OH0j8rjyeGt5map/mb9LbysHPUsYS/CX4
rGL8VXhj8Ls1c80+E3zWyqis2eDZtAPtYin43dpBAX6HpxL5jKd5yyO19pRn
VNbexGenmfTDa4nPVju6hB8Gf4t6nsTTvivtSLvSP6J/pRP8ov8Asm1DJg==

           "]]}]}, {
        EdgeForm[], 
        RGBColor[0.857359, 0.131106, 0.132128], 
        GraphicsGroupBox[{
          
          PolygonBox[{{246, 238, 1}, {1619, 237, 1383}, {1532, 525, 1618}, {
           246, 578, 238}, {241, 249, 233}, {1622, 227, 1624}, {1623, 233, 
           1379}, {1543, 525, 1532}, {580, 578, 246}, {1547, 578, 1546}, {249,
            241, 225}, {1545, 241, 1386}, {241, 245, 225}, {1533, 237, 
           1619}, {1380, 233, 1623}, {1542, 238, 1620}, {525, 242, 238}, {
           1621, 578, 1547}, {245, 241, 237}, {1386, 241, 1544}, {1624, 227, 
           1378}, {1617, 238, 1542}, {238, 242, 1}, {242, 525, 227}}], 
          
          PolygonBox[{{1544, 241, 233, 1380}, {1378, 227, 525, 1543}, {1546, 
           578, 580, 1548}, {1618, 525, 238, 1617}, {1383, 237, 241, 1545}, {
           1620, 238, 578, 1621}}]}]}}, {{}, 
       TagBox[
        TooltipBox[{
          Directive[
           GrayLevel[0], 
           Opacity[0.5], 
           CapForm["Butt"]], 
          LineBox[{1379, 1623, 1380, 1544, 1386, 1545, 1383, 1619, 1533}], 
          
          LineBox[{1548, 1546, 1547, 1621, 1620, 1542, 1617, 1618, 1532, 1543,
            1378, 1624, 1622}]}, "0.8`"], Annotation[#, 0.8, "Tooltip"]& ], 
       TagBox[
        TooltipBox[{
          Directive[
           GrayLevel[0], 
           Opacity[0.5], 
           CapForm["Butt"]], 
          
          LineBox[{1285, 1656, 1444, 1866, 1396, 1439, 1986, 1282, 1343, 1860,
            1735, 1736, 1671, 2012, 1670, 1734, 1733, 1275, 1340, 1427, 1846, 
           1848, 1847, 1387, 1850, 1429, 1849, 1428}], 
          LineBox[{1329, 1664, 1489, 1931, 1653, 1629, 1647, 1646, 1652, 1371,
            1328, 1663, 1662, 1930, 1929, 1423, 1941, 1942, 1940, 1495, 1375, 
           1334, 1648, 1649, 1633, 1634, 1945, 1501, 1944, 1500}]}, "0.6`"], 
        Annotation[#, 0.6, "Tooltip"]& ], 
       TagBox[
        TooltipBox[{
          Directive[
           GrayLevel[0], 
           Opacity[0.5], 
           CapForm["Butt"]], 
          
          LineBox[{1277, 1549, 1550, 1431, 1851, 1430, 1341, 1276, 1737, 1738,
            1672, 1673, 1863, 1441, 1861, 1440, 1862, 1551, 1552, 1446, 2013, 
           1445, 1344, 1286, 1988, 1447, 1556, 1555, 1291, 1992, 1453, 1873, 
           1678, 1751, 1750, 1872, 1346, 1290, 1991, 1452, 1558, 1557, 1587}], 
          
          LineBox[{1339, 1377, 1541, 1499, 2011, 1338, 1566, 1939, 1839, 1840,
            1838, 1422, 1928, 1488, 1660, 1661, 1540, 1539, 1487, 2008, 1327, 
           1565, 1478, 2017, 1479, 1536, 1537, 1476, 1921, 1477, 1922, 1417, 
           1827, 1829, 1828, 1320, 1563, 1919, 1474, 1918, 1475, 1535, 1366, 
           1601}]}, "0.4`"], Annotation[#, 0.4, "Tooltip"]& ], 
       TagBox[
        TooltipBox[{
          Directive[
           GrayLevel[0], 
           Opacity[0.5], 
           CapForm["Butt"]], 
          
          LineBox[{1309, 1810, 1411, 1808, 1410, 1809, 1308, 2000, 1468, 1917,
            1701, 1409, 1807, 1466, 1913, 1363, 1534, 1467, 1914, 1916, 1915, 
           1562, 1315, 1817, 1818, 1816, 1413, 1472, 2016, 1471, 1365, 1314, 
           2002, 1473, 1416, 1824, 1826, 1825, 1920, 1564, 1325, 2007, 1486, 
           1538, 1370, 1326, 1837, 1421, 1716, 1717, 1938, 1494, 1937, 1493, 
           1844, 1425, 1843, 1426, 1845, 1498}], 
          
          LineBox[{1432, 1644, 1388, 1625, 1626, 1853, 1434, 1852, 1433, 1740,
            1391, 1739, 1392, 1741, 1442, 1864, 1553, 1554, 1449, 1867, 1448, 
           1345, 1287, 1752, 1753, 1679, 1680, 1455, 2014, 1454, 1559, 1295, 
           1996, 1458, 1876, 1682, 1763, 1762, 1875, 1347, 1294, 1995, 1457, 
           1561, 1560, 1299, 1771, 1402, 1769, 1401, 2022, 1770, 1298, 1657, 
           1460, 1878, 1650, 1627, 1400, 1645, 1658}]}, "0.2`"], 
        Annotation[#, 0.2, "Tooltip"]& ], 
       TagBox[
        TooltipBox[{
          Directive[
           GrayLevel[0], 
           Opacity[0.5], 
           CapForm["Butt"]], 
          LineBox[CompressedData["
1:eJwV0L0uQwEYx+HXgKnGVtKk0kWHdiERXIBi1HRoF6VYGVAuRDESogm1VEJw
TTVRX5V4zvDkPf9fO5ycfHOvsjsSEVXSoxHvYxEfnLA+HrGkNdyB/UmbDbus
b7pf9jenNO1lfcv9sX85Y9te0Xfcof3HOc/2qv7iztt9z6+e39xFe4GM5wPt
kH2OaXHEhd8vWfOfSVLaBFfaNRUtS1rLcKN1qGp5ctoUt9odNa3AtFagq91T
10oUtRI97SH5PtocM9osj9pT8n2S9+cf/qsrEw==
           "]], 
          LineBox[CompressedData["
1:eJwVzkkyQ1EYhuH/RhpWIQa2kXkimkpVSoSRgYgmwRpkEZowYQ1M2QFioqui
EANNVoAng6fee75zB2diuV1pJRFR5SwTMcdOLuI4GzGmo2wza9/SI3tOs7SZ
sbe0a89omk2m7Rt6aB/RFOuU7Wt6YE80aDJlX9V9+x+/NJxL9hXdc17SOovM
s0CNc37cD/jkmy+q9r5+8Mo7b1Tsj/rEHQ/cU7b39JYrbrimaJ/UU332nhN9
0bxtfPjWdETBueN7l0suKPjvH5xaL+0=
           "]]}, "0"], 
        Annotation[#, 0, "Tooltip"]& ], 
       TagBox[
        TooltipBox[{
          Directive[
           GrayLevel[0], 
           Opacity[0.5], 
           CapForm["Butt"]], 
          
          LineBox[{1279, 1732, 1389, 1731, 1390, 1855, 1435, 1654, 1280, 1742,
            1393, 1674, 1675, 1676, 1283, 1574, 1575, 1509, 1965, 1967, 1966, 
           1578, 1869, 1760, 1761, 1759, 1397, 1512, 1993, 1292, 1583, 1296, 
           1997, 1459, 1399, 1683, 1973, 1348, 1974, 1588, 1515, 1975, 1516, 
           1590, 1589, 1300, 1778, 1403, 1777, 1404, 1779, 1301, 1659, 1461, 
           1885, 1405, 1628, 1651, 2019, 2021, 2020, 1462}], 
          
          LineBox[{1465, 1803, 1406, 1802, 1407, 1804, 1305, 1998, 1464, 1408,
            1698, 1980, 1981, 1519, 1982, 1594, 1595, 1520, 1999, 1306, 1596, 
           1312, 1812, 1813, 1811, 1412, 1523, 2018, 1522, 1600, 1469, 2015, 
           1470, 1415, 1704, 1705, 1367, 1318, 1605, 1323, 2006, 1529, 1610, 
           1609, 1927, 1485, 1833, 1419, 1832, 1420, 1834, 1491, 1935, 1492, 
           1936, 1424, 1630, 1631, 1632, 1667}]}, 
         RowBox[{"-", "0.2`"}]], Annotation[#, -0.2, "Tooltip"]& ], 
       TagBox[
        TooltipBox[{
          Directive[
           GrayLevel[0], 
           Opacity[0.5], 
           CapForm["Butt"]], 
          
          LineBox[{1297, 1585, 1586, 1514, 1972, 1513, 1584, 1970, 1971, 1969,
            1968, 1681, 1398, 1456, 1994, 1293, 1582, 1289, 1990, 1511, 1581, 
           1579, 1580, 1510, 1989, 1288, 1576, 1284, 1987, 1507, 1395, 1743, 
           1394, 1744, 1857, 1856, 1571, 1947, 1502, 1946, 1503, 1570, 1569, 
           1616}], 
          
          LineBox[{1311, 1597, 1598, 1521, 2001, 1310, 1599, 1316, 1820, 1821,
            1819, 1414, 1985, 1525, 1983, 1524, 1984, 1602, 1603, 1526, 2003, 
           1317, 1604, 1322, 2005, 1528, 1608, 1607, 1483, 1925, 1484, 1926, 
           1418, 1712, 1713, 1373, 1332, 1612, 1336, 2010, 1531, 1614, 1613, 
           1615}]}, 
         RowBox[{"-", "0.4`"}]], Annotation[#, -0.4, "Tooltip"]& ], 
       TagBox[
        TooltipBox[{
          Directive[
           GrayLevel[0], 
           Opacity[0.5], 
           CapForm["Butt"]], 
          
          LineBox[{1281, 1655, 1504, 1948, 1436, 1952, 1953, 1949, 1951, 1950,
            1572, 1954, 1955, 1859, 1437, 1858, 1438, 1677, 1958, 1959, 1961, 
           1960, 1577, 1508, 1962, 1964, 1963, 1443, 1871, 1451, 1870, 1450}], 
          
          LineBox[{1481, 1923, 1482, 1924, 1480, 1527, 2004, 1321, 1606, 1330,
            1933, 1934, 1932, 1490, 1710, 1711, 1372, 1331, 1611, 1335, 2009, 
           1530, 1496, 1943, 1497, 1665, 1666}]}, 
         RowBox[{"-", "0.6`"}]], Annotation[#, -0.6, "Tooltip"]& ], 
       TagBox[
        TooltipBox[{
          Directive[
           GrayLevel[0], 
           Opacity[0.5], 
           CapForm["Butt"]], 
          
          LineBox[{1381, 1720, 1635, 1638, 1637, 1384, 1725, 1726, 1722, 1724,
            1723}], 
          
          LineBox[{1382, 1721, 1636, 1640, 1639, 1385, 1642, 1643, 1641, 1728,
            1727}]}, 
         RowBox[{"-", "0.8`"}]], 
        Annotation[#, -0.8, "Tooltip"]& ], {}, {}}}], {
    DisplayFunction -> Identity, AspectRatio -> 1, DisplayFunction :> 
     Identity, Frame -> True, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], Method -> {"DefaultBoundaryStyle" -> Automatic}, 
     PlotRange -> {{-1, 1}, {-1, 1}}, PlotRangeClipping -> True, 
     PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.02]}}, Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{
       FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           GraphicsBox[{{}, {}, 
             
             RasterBox[{{{0.471412, 0.108766, 0.527016}}, {{0.293521072672145,
               0.14891994562598182`, 0.6949010680478327}}, {{
              0.24851309502315125`, 0.3864669180652245, 
              0.8133578134906626}}, {{0.3120043982233793, 0.593402891514262, 
              0.7291847182668235}}, {{0.43167624824839324`, 
              0.7024650835486765, 0.538134189814877}}, {{0.6012770891809831, 
              0.7427847145459091, 0.36414077113118803`}}, {{
              0.7804755704799398, 0.7245278184011289, 
              0.26685671883835577`}}, {{0.8917580483516301, 
              0.6045319001577485, 0.2214836741481431}}, {{0.8864315229528316, 
              0.3472861141115897, 0.1710886611279253}}, {{0.857359, 0.131106, 
              0.132128}}}, {{
                Rational[-15, 2], 
                Rational[-225, 2]}, {
                Rational[15, 2], 
                Rational[225, 2]}}], {Antialiasing -> False, 
              AbsoluteThickness[0.1], 
              Directive[
               Opacity[0.3], 
               GrayLevel[0]], 
              LineBox[
               NCache[{{
                  Rational[15, 2], 
                  Rational[-225, 2]}, {
                  Rational[-15, 2], 
                  Rational[-225, 2]}, {
                  Rational[-15, 2], 
                  Rational[225, 2]}, {
                  Rational[15, 2], 
                  Rational[225, 2]}, {
                  Rational[15, 2], 
                  Rational[-225, 2]}}, {{7.5, -112.5}, {-7.5, -112.5}, {-7.5, 
                112.5}, {7.5, 112.5}, {7.5, -112.5}}]]}, {
              CapForm[None], {{
                Directive[
                 GrayLevel[0], 
                 Opacity[0.5], 
                 CapForm["Butt"]], 
                CapForm["Butt"], 
                LineBox[
                 NCache[{{
                    Rational[-15, 2], -90.00000000000001}, {
                    Rational[
                    15, 2], -90.00000000000001}}, {{-7.5, \
-90.00000000000001}, {7.5, -90.00000000000001}}]]}, {
                Directive[
                 GrayLevel[0], 
                 Opacity[0.5], 
                 CapForm["Butt"]], 
                CapForm["Butt"], 
                LineBox[
                 NCache[{{
                    Rational[-15, 2], -67.50000000000001}, {
                    Rational[
                    15, 2], -67.50000000000001}}, {{-7.5, \
-67.50000000000001}, {7.5, -67.50000000000001}}]]}, {
                Directive[
                 GrayLevel[0], 
                 Opacity[0.5], 
                 CapForm["Butt"]], 
                CapForm["Butt"], 
                LineBox[
                 NCache[{{
                    Rational[-15, 2], -45.}, {
                    Rational[15, 2], -45.}}, {{-7.5, -45.}, {7.5, -45.}}]]}, {
               
                Directive[
                 GrayLevel[0], 
                 Opacity[0.5], 
                 CapForm["Butt"]], 
                CapForm["Butt"], 
                LineBox[
                 NCache[{{
                    Rational[-15, 2], -22.499999999999996`}, {
                    Rational[
                    15, 2], -22.499999999999996`}}, {{-7.5, \
-22.499999999999996`}, {7.5, -22.499999999999996`}}]]}, {
                Directive[
                 GrayLevel[0], 
                 Opacity[0.5], 
                 CapForm["Butt"]], 
                CapForm["Butt"], 
                LineBox[
                 NCache[{{
                    Rational[-15, 2], 0.}, {
                    Rational[15, 2], 0.}}, {{-7.5, 0.}, {7.5, 0.}}]]}, {
                Directive[
                 GrayLevel[0], 
                 Opacity[0.5], 
                 CapForm["Butt"]], 
                CapForm["Butt"], 
                LineBox[
                 NCache[{{
                    Rational[-15, 2], 22.5}, {
                    Rational[15, 2], 22.5}}, {{-7.5, 22.5}, {7.5, 22.5}}]]}, {
               
                Directive[
                 GrayLevel[0], 
                 Opacity[0.5], 
                 CapForm["Butt"]], 
                CapForm["Butt"], 
                LineBox[
                 NCache[{{
                    Rational[-15, 2], 45.000000000000014`}, {
                    Rational[15, 2], 45.000000000000014`}}, {{-7.5, 
                  45.000000000000014`}, {7.5, 45.000000000000014`}}]]}, {
                Directive[
                 GrayLevel[0], 
                 Opacity[0.5], 
                 CapForm["Butt"]], 
                CapForm["Butt"], 
                LineBox[
                 NCache[{{
                    Rational[-15, 2], 67.49999999999999}, {
                    Rational[15, 2], 67.49999999999999}}, {{-7.5, 
                  67.49999999999999}, {7.5, 67.49999999999999}}]]}, {
                Directive[
                 GrayLevel[0], 
                 Opacity[0.5], 
                 CapForm["Butt"]], 
                CapForm["Butt"], 
                LineBox[
                 NCache[{{
                    Rational[-15, 2], 90.}, {
                    Rational[15, 2], 90.}}, {{-7.5, 90.}, {7.5, 90.}}]]}}}, {
             Antialiasing -> False, 
              StyleBox[
               LineBox[{{7.5, -112.5}, {7.5, 112.5}}], 
               Directive[
                AbsoluteThickness[0.2], 
                Opacity[0.3], 
                GrayLevel[0]], StripOnInput -> False], 
              StyleBox[
               StyleBox[{{
                  StyleBox[
                   LineBox[{{{7.5, -90.}, 
                    Offset[{4., 0}, {7.5, -90.}]}, {{7.5, -67.50000000000001}, 
                    Offset[{4., 0}, {7.5, -67.50000000000001}]}, {{7.5, -45.}, 
                    Offset[{4., 0}, {7.5, -45.}]}, {{
                    7.5, -22.499999999999996`}, 
                    Offset[{4., 0}, {7.5, -22.499999999999996`}]}, {{7.5, 0.}, 
                    Offset[{4., 0}, {7.5, 0.}]}, {{7.5, 22.499999999999996`}, 
                    
                    Offset[{4., 0}, {7.5, 22.499999999999996`}]}, {{7.5, 
                    45.00000000000001}, 
                    Offset[{4., 0}, {7.5, 45.00000000000001}]}, {{7.5, 67.5}, 
                    
                    Offset[{4., 0}, {7.5, 67.5}]}, {{7.5, 90.}, 
                    Offset[{4., 0}, {7.5, 90.}]}}], 
                   Directive[
                    AbsoluteThickness[0.2], 
                    GrayLevel[0.4]], StripOnInput -> False]}, 
                 StyleBox[
                  StyleBox[{{
                    StyleBox[{
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox["\"-0.8\"", -0.8, AutoDelete -> True], 
                    NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    Offset[{7., 0.}, {7.5, -90.}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox["\"-0.6\"", -0.6, AutoDelete -> True], 
                    NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    Offset[{7., 0.}, {7.5, -67.50000000000001}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox["\"-0.4\"", -0.4, AutoDelete -> True], 
                    NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    Offset[{7., 0.}, {7.5, -45.}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox["\"-0.2\"", -0.2, AutoDelete -> True], 
                    NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    Offset[{7., 0.}, {7.5, -22.499999999999996`}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["0", TraditionalForm], 
                    Offset[{7., 0.}, {7.5, 0.}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox["\"0.2\"", 0.2, AutoDelete -> True], 
                    NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    Offset[{7., 0.}, {7.5, 22.499999999999996`}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox["\"0.4\"", 0.4, AutoDelete -> True], 
                    NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    Offset[{7., 0.}, {7.5, 45.00000000000001}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox["\"0.6\"", 0.6, AutoDelete -> True], 
                    NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    Offset[{7., 0.}, {7.5, 67.5}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox["\"0.8\"", 0.8, AutoDelete -> True], 
                    NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    Offset[{7., 0.}, {7.5, 90.}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}]}, 
                    Directive[
                    AbsoluteThickness[0.2], 
                    GrayLevel[0.4]], {
                    Directive[
                    Opacity[1]]}, StripOnInput -> False]}, {}}, {
                    Directive[
                    Opacity[1]]}, StripOnInput -> False], "GraphicsLabel", 
                  StripOnInput -> False]}, "GraphicsTicks", StripOnInput -> 
                False], 
               Directive[
                AbsoluteThickness[0.2], 
                Opacity[0.3], 
                GrayLevel[0]], StripOnInput -> False]}}, PlotRangePadding -> 
            Scaled[0.02], PlotRange -> All, Frame -> True, 
            FrameTicks -> {{False, False}, {True, False}}, FrameStyle -> 
            Opacity[0], FrameTicksStyle -> Opacity[0], 
            ImageSize -> {Automatic, 225}, BaseStyle -> {}], Alignment -> 
           Left, AppearanceElements -> None, ImageMargins -> {{5, 5}, {5, 5}},
            ImageSizeAction -> "ResizeToFit"], LineIndent -> 0, StripOnInput -> 
          False], {FontFamily -> "Arial"}, Background -> Automatic, 
         StripOnInput -> False], TraditionalForm]}, "BarLegend", 
      DisplayFunction -> (#& ), 
      InterpretationFunction :> (RowBox[{"BarLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{
                 RowBox[{"Blend", "[", 
                   RowBox[{"\"Rainbow\"", ",", "#1"}], "]"}], "&"}], ",", 
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"-", "0.8351233005523682`"}], ",", 
                   "0.8399067521095276`"}], "}"}]}], "}"}], ",", 
           RowBox[{"{", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"-", "0.8`"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"CapForm", "[", "\"Butt\"", "]"}]}], "]"}]}], 
                 "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"-", "0.6`"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"CapForm", "[", "\"Butt\"", "]"}]}], "]"}]}], 
                 "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"-", "0.4`"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"CapForm", "[", "\"Butt\"", "]"}]}], "]"}]}], 
                 "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"-", "0.2`"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"CapForm", "[", "\"Butt\"", "]"}]}], "]"}]}], 
                 "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{"0.`", ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"CapForm", "[", "\"Butt\"", "]"}]}], "]"}]}], 
                 "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{"0.2`", ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"CapForm", "[", "\"Butt\"", "]"}]}], "]"}]}], 
                 "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{"0.4`", ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"CapForm", "[", "\"Butt\"", "]"}]}], "]"}]}], 
                 "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{"0.6`", ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"CapForm", "[", "\"Butt\"", "]"}]}], "]"}]}], 
                 "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{"0.8`", ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"CapForm", "[", "\"Butt\"", "]"}]}], "]"}]}], 
                 "}"}]}], "}"}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}], ",", 
           RowBox[{"Charting`TickAnnotations", "\[Rule]", "None"}], ",", 
           RowBox[{"Charting`TickSide", "\[Rule]", "Right"}], ",", 
           RowBox[{"ColorFunctionScaling", "\[Rule]", "True"}]}], "]"}]& )], 
     TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.6926471769291067`*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Loss Specifications", "Title",
 CellChangeTimes->{{3.692647717425262*^9, 3.692647731965033*^9}}],

Cell[CellGroupData[{

Cell["Train a simple net using MeanSquaredLossLayer", "Subchapter",
 CellChangeTimes->{{3.692647743191873*^9, 3.6926477450147467`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"net", " ", "=", " ", 
   RowBox[{"DotPlusLayer", "[", 
    RowBox[{
     RowBox[{"\"\<Input\>\"", "\[Rule]", " ", "\"\<Scalar\>\""}], ",", " ", 
     RowBox[{"\"\<Output\>\"", "\[Rule]", " ", "\"\<Scalar\>\""}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"data", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"1", "\[Rule]", "1.9"}], ",", " ", 
     RowBox[{"2", "\[Rule]", "4.1"}], ",", " ", 
     RowBox[{"3", "\[Rule]", " ", "6.0"}], ",", " ", 
     RowBox[{"4", "\[Rule]", " ", "8.1"}]}], "}"}]}], ";"}], "\n", 
 RowBox[{"trained", " ", "=", " ", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net", ",", " ", "data"}], "]"}]}]}], "Code",
 CellChangeTimes->{{3.692647747264838*^9, 3.692647846550293*^9}}],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["DotPlusLayer", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open$$ = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = True), Appearance -> None,
                 Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 Opacity[0.3], {{
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
                 AbsolutePointSize[5], 
                 PointBox[{{0, 0}, {1, 0}}], 
                 PointBox[
                  NCache[{{
                    Rational[-1, 2], 1}, {
                    Rational[1, 2], 1}, {
                    Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
               ImageSize -> 32], 
              GridBox[{{
                 ItemBox[
                  StyleBox["\"Parameters:\"", Bold, StripOnInput -> False], 
                  StripOnInput -> False], 
                 ItemBox["\"\"", StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Size\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["1", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 Opacity[0.3], {{
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
                 AbsolutePointSize[5], 
                 PointBox[{{0, 0}, {1, 0}}], 
                 PointBox[
                  NCache[{{
                    Rational[-1, 2], 1}, {
                    Rational[1, 2], 1}, {
                    Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
               ImageSize -> 32], 
              GridBox[{{
                 ItemBox[
                  StyleBox["\"Parameters:\"", Bold, StripOnInput -> False], 
                  StripOnInput -> False], 
                 ItemBox["\"\"", StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Size\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["1", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["\"Arrays:\"", Bold, StripOnInput -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85], StripOnInput -> False], 
                 ItemBox[
                  InterpretationBox[
                   StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                   Spacer[{1, 11}]], Frame -> {{False, False}, {False, True}},
                   FrameStyle -> GrayLevel[0.85], StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Weights\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"matrix\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Biases\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["\"Ports:\"", Bold, StripOnInput -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85], StripOnInput -> False], 
                 ItemBox[
                  InterpretationBox[
                   StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                   Spacer[{1, 11}]], Frame -> {{False, False}, {False, True}},
                   FrameStyle -> GrayLevel[0.85], StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"encoded\"", "\" \"", 
                    TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"]}, "RowDefault"], "SummaryItem", 
                   StripOnInput -> False], "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"decoded\"", "\" \"", 
                    TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"]}, "RowDefault"], "SummaryItem", 
                   StripOnInput -> False], "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic], BaselinePosition -> 
        Baseline], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("None"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.692647851099977*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trained", "[", 
  RowBox[{"Range", "[", "4", "]"}], "]"}]], "Code",
 CellChangeTimes->{{3.692647860876752*^9, 3.692647869133441*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1.9500058889389038`", ",", "4.000001907348633`", ",", "6.049997806549072`",
    ",", "8.099994659423828`"}], "}"}]], "Output",
 CellChangeTimes->{3.692647869651445*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"loss", " ", "=", " ", 
  RowBox[{"MeanAbsoluteLossLayer", "[", 
   RowBox[{"\"\<Target\>\"", "\[Rule]", " ", "\"\<Scalar\>\""}], 
   "]"}]}]], "Code",
 CellChangeTimes->{{3.692647871925886*^9, 3.6926478918859377`*^9}}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["MeanAbsoluteLossLayer",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{15., {0., 15.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[{
           {Opacity[
            0.3], {LineBox[
              NCache[{{0, 0}, {Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
             LineBox[NCache[{{0, 0}, {Rational[1, 2], 1}}, {{0, 0}, {
                0.5, 1}}]], 
             LineBox[NCache[{{0, 0}, {Rational[3, 2], 1}}, {{0, 0}, {
                1.5, 1}}]]}, {
             LineBox[NCache[{{1, 0}, {Rational[-1, 2], 1}}, {{1, 
                0}, {-0.5, 1}}]], 
             LineBox[NCache[{{1, 0}, {Rational[1, 2], 1}}, {{1, 0}, {
                0.5, 1}}]], 
             LineBox[NCache[{{1, 0}, {Rational[3, 2], 1}}, {{1, 0}, {
                1.5, 1}}]]}}, 
           {AbsolutePointSize[5], PointBox[{{0, 0}, {1, 0}}], 
            PointBox[
             NCache[{{Rational[-1, 2], 1}, {Rational[1, 2], 1}, {
               Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}},
          ImageSize->32], GridBox[{
           {
            ItemBox[
             StyleBox["\<\"Parameters:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             StripOnInput->False], 
            ItemBox["\<\"\"\>",
             StripOnInput->False]},
           {
            TagBox[
             StyleBox["\<\"none\"\>",
              StripOnInput->False,
              LineColor->GrayLevel[0.5],
              FrontFaceColor->GrayLevel[0.5],
              BackFaceColor->GrayLevel[0.5],
              GraphicsColor->GrayLevel[0.5],
              FontColor->GrayLevel[0.5]],
             "SummaryItem"], ""}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->
      GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquareMinusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[{
           {Opacity[
            0.3], {LineBox[
              NCache[{{0, 0}, {Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
             LineBox[NCache[{{0, 0}, {Rational[1, 2], 1}}, {{0, 0}, {
                0.5, 1}}]], 
             LineBox[NCache[{{0, 0}, {Rational[3, 2], 1}}, {{0, 0}, {
                1.5, 1}}]]}, {
             LineBox[NCache[{{1, 0}, {Rational[-1, 2], 1}}, {{1, 
                0}, {-0.5, 1}}]], 
             LineBox[NCache[{{1, 0}, {Rational[1, 2], 1}}, {{1, 0}, {
                0.5, 1}}]], 
             LineBox[NCache[{{1, 0}, {Rational[3, 2], 1}}, {{1, 0}, {
                1.5, 1}}]]}}, 
           {AbsolutePointSize[5], PointBox[{{0, 0}, {1, 0}}], 
            PointBox[
             NCache[{{Rational[-1, 2], 1}, {Rational[1, 2], 1}, {
               Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}},
          ImageSize->32], GridBox[{
           {
            ItemBox[
             StyleBox["\<\"Parameters:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             StripOnInput->False], 
            ItemBox["\<\"\"\>",
             StripOnInput->False]},
           {
            TagBox[
             StyleBox["\<\"none\"\>",
              StripOnInput->False,
              LineColor->GrayLevel[0.5],
              FrontFaceColor->GrayLevel[0.5],
              BackFaceColor->GrayLevel[0.5],
              GraphicsColor->GrayLevel[0.5],
              FontColor->GrayLevel[0.5]],
             "SummaryItem"], ""},
           {
            ItemBox[
             StyleBox["\<\"Ports:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             Frame->{{False, False}, {False, True}},
             FrameStyle->GrayLevel[0.85],
             StripOnInput->False], 
            ItemBox[
             InterpretationBox[
              StyleBox[
               GraphicsBox[{},
                BaselinePosition->(Scaled[0.] -> Baseline),
                ImageSize->{1, 11}],
               CacheGraphics->False],
              Spacer[{1, 11}]],
             Frame->{{False, False}, {False, True}},
             FrameStyle->GrayLevel[0.85],
             StripOnInput->False]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Input\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox[
              
              TemplateBox[{
               "\"vector\"","\" \"",
                TemplateBox[{
                 "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                  "\" \"", 
                  
                  TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                   "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                 "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                 InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]},
               "RowDefault"], "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Target\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox[
              
              TemplateBox[{
               "\"encoded\"","\" \"",TemplateBox[{"\"vector\"", "\" \"", 
                  
                  TemplateBox[{
                   "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                   "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                   InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                 "RowDefault"]},
               "RowDefault"], "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Loss\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox["\<\"scalar\"\>", "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  None,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.692647892392412*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"loss", "[", 
  RowBox[{"<|", 
   RowBox[{
    RowBox[{"\"\<Input\>\"", "\[Rule]", "5.0"}], ",", " ", 
    RowBox[{"\"\<Target\>\"", " ", "\[Rule]", " ", "3.0"}]}], "|>"}], 
  "]"}]], "Code",
 CellChangeTimes->{{3.692647894705843*^9, 3.6926479249022903`*^9}}],

Cell[BoxData["2.`"], "Output",
 CellChangeTimes->{3.692647925467596*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"data", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"1", " ", "->", " ", "1.9"}], ",", " ", 
     RowBox[{"2", " ", "->", " ", "4.1"}], ",", " ", 
     RowBox[{"3", " ", "->", " ", "6.0"}], ",", " ", 
     RowBox[{"4", " ", "->", " ", "8.1"}]}], "}"}]}], ";"}], "\n", 
 RowBox[{"trained", " ", "=", " ", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net", ",", " ", "data", ",", " ", "loss"}], "]"}]}]}], "Code",
 CellChangeTimes->{{3.692648189213097*^9, 3.692648190244525*^9}}],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["DotPlusLayer", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open$$ = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = True), Appearance -> None,
                 Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 Opacity[0.3], {{
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
                 AbsolutePointSize[5], 
                 PointBox[{{0, 0}, {1, 0}}], 
                 PointBox[
                  NCache[{{
                    Rational[-1, 2], 1}, {
                    Rational[1, 2], 1}, {
                    Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
               ImageSize -> 32], 
              GridBox[{{
                 ItemBox[
                  StyleBox["\"Parameters:\"", Bold, StripOnInput -> False], 
                  StripOnInput -> False], 
                 ItemBox["\"\"", StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Size\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["1", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 Opacity[0.3], {{
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
                 AbsolutePointSize[5], 
                 PointBox[{{0, 0}, {1, 0}}], 
                 PointBox[
                  NCache[{{
                    Rational[-1, 2], 1}, {
                    Rational[1, 2], 1}, {
                    Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
               ImageSize -> 32], 
              GridBox[{{
                 ItemBox[
                  StyleBox["\"Parameters:\"", Bold, StripOnInput -> False], 
                  StripOnInput -> False], 
                 ItemBox["\"\"", StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Size\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["1", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["\"Arrays:\"", Bold, StripOnInput -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85], StripOnInput -> False], 
                 ItemBox[
                  InterpretationBox[
                   StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                   Spacer[{1, 11}]], Frame -> {{False, False}, {False, True}},
                   FrameStyle -> GrayLevel[0.85], StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Weights\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"matrix\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Biases\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["\"Ports:\"", Bold, StripOnInput -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85], StripOnInput -> False], 
                 ItemBox[
                  InterpretationBox[
                   StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                   Spacer[{1, 11}]], Frame -> {{False, False}, {False, True}},
                   FrameStyle -> GrayLevel[0.85], StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"encoded\"", "\" \"", 
                    TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"]}, "RowDefault"], "SummaryItem", 
                   StripOnInput -> False], "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"decoded\"", "\" \"", 
                    TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"]}, "RowDefault"], "SummaryItem", 
                   StripOnInput -> False], "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic], BaselinePosition -> 
        Baseline], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("None"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.692648192430231*^9, 3.69264822167736*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trained", "[", 
  RowBox[{"Range", "[", "4", "]"}], "]"}]], "Code",
 CellChangeTimes->{{3.692648196903866*^9, 3.692648205108556*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1.8999911546707153`", ",", "3.966649293899536`", ",", "6.033307075500488`",
    ",", "8.09996509552002`"}], "}"}]], "Output",
 CellChangeTimes->{{3.692648205978541*^9, 3.692648223608526*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Options", "Title",
 CellChangeTimes->{{3.69264827634664*^9, 3.692648278727507*^9}}],

Cell[CellGroupData[{

Cell["BatchSize", "Chapter",
 CellChangeTimes->{{3.69264828207302*^9, 3.6926482927219543`*^9}}],

Cell[CellGroupData[{

Cell["?", "Subsection",
 CellChangeTimes->{{3.692648568665213*^9, 3.692648571195511*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"trainingData", " ", "=", " ", "\n", "  ", 
   RowBox[{
    RowBox[{"RandomReal", "[", 
     RowBox[{"1", ",", " ", 
      RowBox[{"{", 
       RowBox[{"10000", ",", " ", "4"}], "}"}]}], "]"}], " ", "->", " ", 
    RowBox[{"RandomReal", "[", 
     RowBox[{"1", ",", " ", 
      RowBox[{"{", 
       RowBox[{"10000", ",", " ", "4"}], "}"}]}], "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"net", " ", "=", " ", 
   RowBox[{"NetChain", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"DotPlusLayer", "[", "8", "]"}], ",", " ", 
       RowBox[{"DotPlusLayer", "[", "4", "]"}]}], "}"}], ",", " ", 
     RowBox[{"\"\<Input\>\"", " ", "->", " ", "4"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"NetTrain", "[", 
    RowBox[{"net", ",", " ", "trainingData", ",", " ", 
     RowBox[{"BatchSize", " ", "->", " ", "512"}], ",", " ", "\n", "   ", 
     RowBox[{"MaxTrainingRounds", " ", "->", " ", "20"}]}], "]"}], ";"}], " ",
   "//", " ", "AbsoluteTiming"}]}], "Code",
 CellChangeTimes->{3.692648578698723*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.236011`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{{3.692648580197791*^9, 3.692648601632324*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["MaxTrainingRounds", "Chapter",
 CellChangeTimes->{{3.6926486126855307`*^9, 3.692648619397951*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"trainingData", " ", "=", " ", "\n", "  ", 
   RowBox[{
    RowBox[{"RandomReal", "[", 
     RowBox[{"1", ",", " ", 
      RowBox[{"{", 
       RowBox[{"10000", ",", " ", "4"}], "}"}]}], "]"}], " ", "->", " ", 
    RowBox[{"RandomReal", "[", 
     RowBox[{"1", ",", " ", 
      RowBox[{"{", 
       RowBox[{"10000", ",", " ", "4"}], "}"}]}], "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"net", " ", "=", " ", 
   RowBox[{"NetChain", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"8", ",", " ", "4"}], "}"}], ",", " ", 
     RowBox[{"\"\<Input\>\"", " ", "->", " ", "4"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{"NetTrain", "[", 
  RowBox[{"net", ",", " ", "trainingData", ",", " ", 
   RowBox[{"MaxTrainingRounds", " ", "->", " ", "1"}]}], "]"}]}], "Code",
 CellChangeTimes->{3.6926486284464073`*^9}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"4"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Inputs", "Input"}, "Mouse"], 
            "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"8"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["2", 
              GrayLevel[0.5]], {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"4"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "2"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"4"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Outputs", "Output"}, "Mouse"], 
            "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {8, 4}], "Biases" -> 
               NeuralNetworks`TensorT[1, {8}]], "Parameters" -> 
             Association["Size" -> 8, "$InputSize" -> 4], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {4}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {8}]]], "2" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {4, 8}], "Biases" -> 
               NeuralNetworks`TensorT[1, {4}]], "Parameters" -> 
             Association["Size" -> 4, "$InputSize" -> 8], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {8}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {4}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "2", "Inputs", "Input"] -> 
           NetPort["Layers", "1", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "2", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`TensorT[1, {4}]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`TensorT[1, {4}]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{206., {30.771240234375, 37.228759765625}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.692648629441633*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Method", "Chapter",
 CellChangeTimes->{{3.692649281729438*^9, 3.692649286295433*^9}}],

Cell[CellGroupData[{

Cell["Stochastic Gradient Decent", "Subchapter",
 CellChangeTimes->{{3.692649291061027*^9, 3.692649301570755*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dotPlus", " ", "=", " ", 
  RowBox[{"DotPlusLayer", "[", 
   RowBox[{"1", ",", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", " ", "\"\<Scalar\>\""}], ",", " ", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", " ", "\"\<Scalar\>\""}]}], 
   "]"}]}]], "Code",
 CellChangeTimes->{{3.6926494371861486`*^9, 3.692649471792757*^9}}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DotPlusLayer",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{15., {0., 15.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         TemplateBox[{GraphicsBox[{{
              Opacity[0.3], {{
                LineBox[
                 NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                LineBox[
                 NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                LineBox[
                 NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                LineBox[
                 NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                LineBox[
                 NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                LineBox[
                 NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
              AbsolutePointSize[5], 
              PointBox[{{0, 0}, {1, 0}}], 
              PointBox[
               NCache[{{
                  Rational[-1, 2], 1}, {
                  Rational[1, 2], 1}, {
                  Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
            ImageSize -> 32, BaseStyle -> GrayLevel[0.65]],StyleBox[
           "\"uninitialized\"", 
            GrayLevel[0.5], FontSize -> 8, StripOnInput -> False]},
          "Labeled",
          DisplayFunction->(GridBox[{{
              TagBox[
               ItemBox[
                PaneBox[
                 TagBox[#, "SkipImageSizeLevel"], 
                 Alignment -> {Center, Baseline}, BaselinePosition -> 
                 Baseline], DefaultBaseStyle -> "Labeled"], 
               "SkipImageSizeLevel"]}, {
              ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
            GridBoxAlignment -> {
             "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
            False, GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]& ),
          InterpretationFunction->(RowBox[{"Labeled", "[", 
             RowBox[{#, ",", #2}], "]"}]& )], GridBox[{
           {
            ItemBox[
             StyleBox["\<\"Parameters:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             StripOnInput->False], 
            ItemBox["\<\"\"\>",
             StripOnInput->False]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Size\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox["1", "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->
      GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquareMinusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         TemplateBox[{GraphicsBox[{{
              Opacity[0.3], {{
                LineBox[
                 NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                LineBox[
                 NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                LineBox[
                 NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                LineBox[
                 NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                LineBox[
                 NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                LineBox[
                 NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
              AbsolutePointSize[5], 
              PointBox[{{0, 0}, {1, 0}}], 
              PointBox[
               NCache[{{
                  Rational[-1, 2], 1}, {
                  Rational[1, 2], 1}, {
                  Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
            ImageSize -> 32, BaseStyle -> GrayLevel[0.65]],StyleBox[
           "\"uninitialized\"", 
            GrayLevel[0.5], FontSize -> 8, StripOnInput -> False]},
          "Labeled",
          DisplayFunction->(GridBox[{{
              TagBox[
               ItemBox[
                PaneBox[
                 TagBox[#, "SkipImageSizeLevel"], 
                 Alignment -> {Center, Baseline}, BaselinePosition -> 
                 Baseline], DefaultBaseStyle -> "Labeled"], 
               "SkipImageSizeLevel"]}, {
              ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
            GridBoxAlignment -> {
             "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
            False, GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]& ),
          InterpretationFunction->(RowBox[{"Labeled", "[", 
             RowBox[{#, ",", #2}], "]"}]& )], GridBox[{
           {
            ItemBox[
             StyleBox["\<\"Parameters:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             StripOnInput->False], 
            ItemBox["\<\"\"\>",
             StripOnInput->False]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Size\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox["1", "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]},
           {
            ItemBox[
             StyleBox["\<\"Arrays:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             Frame->{{False, False}, {False, True}},
             FrameStyle->GrayLevel[0.85],
             StripOnInput->False], 
            ItemBox[
             InterpretationBox[
              StyleBox[
               GraphicsBox[{},
                BaselinePosition->(Scaled[0.] -> Baseline),
                ImageSize->{1, 11}],
               CacheGraphics->False],
              Spacer[{1, 11}]],
             Frame->{{False, False}, {False, True}},
             FrameStyle->GrayLevel[0.85],
             StripOnInput->False]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Weights\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox[
              
              TemplateBox[{
               "\"matrix\"","\" \"",
                TemplateBox[{
                 "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                  "\" \"", 
                  
                  TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\"", "\"1\""}, 
                   "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                 "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                 InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]},
               "RowDefault"], "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Biases\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox[
              
              TemplateBox[{
               "\"optional\"","\" \"",TemplateBox[{"\"vector\"", "\" \"", 
                  
                  TemplateBox[{
                   "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                   "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                   InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                 "RowDefault"]},
               "RowDefault"], "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]},
           {
            ItemBox[
             StyleBox["\<\"Ports:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             Frame->{{False, False}, {False, True}},
             FrameStyle->GrayLevel[0.85],
             StripOnInput->False], 
            ItemBox[
             InterpretationBox[
              StyleBox[
               GraphicsBox[{},
                BaselinePosition->(Scaled[0.] -> Baseline),
                ImageSize->{1, 11}],
               CacheGraphics->False],
              Spacer[{1, 11}]],
             Frame->{{False, False}, {False, True}},
             FrameStyle->GrayLevel[0.85],
             StripOnInput->False]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Input\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox[
              
              TemplateBox[{
               "\"encoded\"","\" \"",TemplateBox[{"\"vector\"", "\" \"", 
                  
                  TemplateBox[{
                   "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                   "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                   InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                 "RowDefault"]},
               "RowDefault"], "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Output\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox[
              
              TemplateBox[{
               "\"decoded\"","\" \"",TemplateBox[{"\"vector\"", "\" \"", 
                  
                  TemplateBox[{
                   "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                   "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                   InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                 "RowDefault"]},
               "RowDefault"], "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  None,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.692649472488381*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"1", " ", "->", " ", "2.2"}], ",", " ", 
     RowBox[{"2", " ", "->", " ", "3.8"}], ",", " ", 
     RowBox[{"3", " ", "->", " ", "6.4"}], ",", " ", 
     RowBox[{"4", " ", "->", " ", "9.1"}]}], "}"}]}], ";"}]], "Code",
 CellChangeTimes->{{3.69264931882056*^9, 3.692649411944188*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", " ", "=", " ", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"dotPlus", ",", " ", "data", ",", " ", 
    RowBox[{"Method", " ", "->", " ", "\"\<StochasticGradientDescent\>\""}]}],
    "]"}]}]], "Code",
 CellChangeTimes->{
  3.6926494165571537`*^9, {3.6926494787803698`*^9, 3.692649515978158*^9}}],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["DotPlusLayer", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open$$ = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = True), Appearance -> None,
                 Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 Opacity[0.3], {{
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
                 AbsolutePointSize[5], 
                 PointBox[{{0, 0}, {1, 0}}], 
                 PointBox[
                  NCache[{{
                    Rational[-1, 2], 1}, {
                    Rational[1, 2], 1}, {
                    Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
               ImageSize -> 32], 
              GridBox[{{
                 ItemBox[
                  StyleBox["\"Parameters:\"", Bold, StripOnInput -> False], 
                  StripOnInput -> False], 
                 ItemBox["\"\"", StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Size\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["1", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 Opacity[0.3], {{
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
                 AbsolutePointSize[5], 
                 PointBox[{{0, 0}, {1, 0}}], 
                 PointBox[
                  NCache[{{
                    Rational[-1, 2], 1}, {
                    Rational[1, 2], 1}, {
                    Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
               ImageSize -> 32], 
              GridBox[{{
                 ItemBox[
                  StyleBox["\"Parameters:\"", Bold, StripOnInput -> False], 
                  StripOnInput -> False], 
                 ItemBox["\"\"", StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Size\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["1", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["\"Arrays:\"", Bold, StripOnInput -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85], StripOnInput -> False], 
                 ItemBox[
                  InterpretationBox[
                   StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                   Spacer[{1, 11}]], Frame -> {{False, False}, {False, True}},
                   FrameStyle -> GrayLevel[0.85], StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Weights\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"matrix\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Biases\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["\"Ports:\"", Bold, StripOnInput -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85], StripOnInput -> False], 
                 ItemBox[
                  InterpretationBox[
                   StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                   Spacer[{1, 11}]], Frame -> {{False, False}, {False, True}},
                   FrameStyle -> GrayLevel[0.85], StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"encoded\"", "\" \"", 
                    TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"]}, "RowDefault"], "SummaryItem", 
                   StripOnInput -> False], "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"decoded\"", "\" \"", 
                    TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"]}, "RowDefault"], "SummaryItem", 
                   StripOnInput -> False], "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic], BaselinePosition -> 
        Baseline], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("None"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.692649417457041*^9, {3.6926494764996843`*^9, 3.6926494869730473`*^9}, 
   3.692649521390979*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", " ", "=", " ", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"dotPlus", ",", " ", "data", ",", " ", "\n", "  ", 
    RowBox[{"Method", " ", "->", " ", 
     RowBox[{"{", 
      RowBox[{"\"\<StochasticGradientDescent\>\"", ",", " ", "\n", "    ", 
       RowBox[{"\"\<InitialLearningRate\>\"", " ", "->", " ", "0.1"}]}], 
      "}"}]}]}], "]"}]}]], "Code",
 CellChangeTimes->{3.6926495283851137`*^9}],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["DotPlusLayer", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open$$ = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = True), Appearance -> None,
                 Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 Opacity[0.3], {{
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
                 AbsolutePointSize[5], 
                 PointBox[{{0, 0}, {1, 0}}], 
                 PointBox[
                  NCache[{{
                    Rational[-1, 2], 1}, {
                    Rational[1, 2], 1}, {
                    Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
               ImageSize -> 32], 
              GridBox[{{
                 ItemBox[
                  StyleBox["\"Parameters:\"", Bold, StripOnInput -> False], 
                  StripOnInput -> False], 
                 ItemBox["\"\"", StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Size\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["1", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 Opacity[0.3], {{
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
                 AbsolutePointSize[5], 
                 PointBox[{{0, 0}, {1, 0}}], 
                 PointBox[
                  NCache[{{
                    Rational[-1, 2], 1}, {
                    Rational[1, 2], 1}, {
                    Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
               ImageSize -> 32], 
              GridBox[{{
                 ItemBox[
                  StyleBox["\"Parameters:\"", Bold, StripOnInput -> False], 
                  StripOnInput -> False], 
                 ItemBox["\"\"", StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Size\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["1", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["\"Arrays:\"", Bold, StripOnInput -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85], StripOnInput -> False], 
                 ItemBox[
                  InterpretationBox[
                   StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                   Spacer[{1, 11}]], Frame -> {{False, False}, {False, True}},
                   FrameStyle -> GrayLevel[0.85], StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Weights\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"matrix\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Biases\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["\"Ports:\"", Bold, StripOnInput -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85], StripOnInput -> False], 
                 ItemBox[
                  InterpretationBox[
                   StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                   Spacer[{1, 11}]], Frame -> {{False, False}, {False, True}},
                   FrameStyle -> GrayLevel[0.85], StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"encoded\"", "\" \"", 
                    TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"]}, "RowDefault"], "SummaryItem", 
                   StripOnInput -> False], "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"decoded\"", "\" \"", 
                    TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"]}, "RowDefault"], "SummaryItem", 
                   StripOnInput -> False], "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic], BaselinePosition -> 
        Baseline], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("None"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.6926495377402763`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Use regularization to prevent overfitting. Create synthetic training data \
based on a Gaussian curve:\
\>", "Subchapter",
 CellChangeTimes->{{3.6926495567334223`*^9, 3.692649559450459*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", " ", "=", " ", 
   RowBox[{"Table", "[", "\n", "   ", 
    RowBox[{
     RowBox[{"x", " ", "->", " ", 
      RowBox[{
       RowBox[{"Exp", "[", 
        RowBox[{"-", 
         RowBox[{"x", "^", "2"}]}], "]"}], " ", "+", " ", 
       RowBox[{"RandomVariate", "[", 
        RowBox[{"NormalDistribution", "[", 
         RowBox[{"0", ",", " ", ".15"}], "]"}], "]"}]}]}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"x", ",", " ", 
       RowBox[{"-", "3"}], ",", "\n", "     ", "3", ",", " ", ".2"}], "}"}]}],
     "]"}]}], ";"}]], "Code",
 CellChangeTimes->{3.6926635275205307`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"plot", " ", "=", " ", 
  RowBox[{"ListPlot", "[", 
   RowBox[{
    RowBox[{"List", " ", "@@@", " ", "data"}], ",", " ", 
    RowBox[{"PlotStyle", " ", "->", " ", "Red"}]}], "]"}]}]], "Code",
 CellChangeTimes->{{3.69266353784103*^9, 3.6926635586339808`*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {{}, 
    {RGBColor[1, 0, 0], PointSize[0.012833333333333334`], AbsoluteThickness[
     1.6], PointBox[CompressedData["
1:eJxTTMoPSmViYGCQB2IQDQEcB1YmOZeeXHfcPg0M2A4EpimtXPDywP6zZ0CA
5YBwDR/b6vSV9sZgwHygM2/Oyq6IrftnzQQBxgP/nu/uV+bfux9q4AGb6U9s
tYwO2YO1n/mzf4vt/L//766yByuf+XP/t0taiVcu7YPa922/b6PErCqZS1Dz
P+/vu+303PL1NXuIcR/2i+q+vNWqcct+Blj/y/0rfZLUFoo9tTcAq3+8/0DX
/S19Fx5B5W/uV6/K5RF4/Np+Aph/cv+Vx3lKkt/f2cN8HNTcuNfc4539Aoi8
ffc570SRro9Q/k175sV/qmKPf7E3gZhv//gw7+JJdx/Zz4HYb18zr+5vieol
mPvsE7yVpcW/LIKq/2yfEXJIaN7nS/YZEP/ZN6y79r9t+3Go/p/2URmqkdNc
j+y/AAkf+2O7ubiEg1bAws9hUWuPWffdQ/bQ8HW4ociz4JDiYqj5zA5eEqvW
z9JYZ38OEj8OixcwypQVb9wPsY/NYQpTFHv/kwNQ8zgc6oQuha5K7rQHAJg1
5pI=
      "]]}, {}}, {}, {}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-3., 3.}, {-0.15837363579595626`, 1.298673134248191}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.692663559573234*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{808, 849},
WindowMargins->{{Automatic, -10}, {37, Automatic}},
Magnification:>1.25 Inherited,
FrontEndVersion->"11.0 for Mac OS X x86 (32-bit, 64-bit Kernel) (July 28, \
2016)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[422, 15, 100, 1, 114, "Title"],
Cell[CellGroupData[{
Cell[547, 20, 95, 1, 81, "Chapter"],
Cell[CellGroupData[{
Cell[667, 25, 181, 4, 164, "Subchapter"],
Cell[CellGroupData[{
Cell[873, 33, 323, 7, 64, "Code"],
Cell[1199, 42, 22347, 513, 191, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[23583, 560, 471, 11, 64, "Code"],
Cell[24057, 573, 20803, 414, 191, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[44897, 992, 126, 2, 64, "Code"],
Cell[45026, 996, 139, 2, 39, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[45202, 1003, 243, 5, 64, "Code"],
Cell[45448, 1010, 264, 6, 39, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[45749, 1021, 241, 6, 64, "Code"],
Cell[45993, 1029, 2894, 60, 300, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[48936, 1095, 248, 4, 207, "Subchapter"],
Cell[CellGroupData[{
Cell[49209, 1103, 690, 17, 89, "Code"],
Cell[49902, 1122, 6306, 132, 111, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[56245, 1259, 455, 10, 64, "Code"],
Cell[56703, 1271, 6188, 129, 111, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[62928, 1405, 131, 2, 64, "Code"],
Cell[63062, 1409, 73, 1, 39, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[63172, 1415, 211, 4, 64, "Code"],
Cell[63386, 1421, 256, 5, 39, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[63679, 1431, 362, 10, 64, "Code"],
Cell[64044, 1443, 9178, 164, 295, "Output"]
}, Open  ]],
Cell[73237, 1610, 442, 10, 64, "Code"]
}, Open  ]],
Cell[CellGroupData[{
Cell[73716, 1625, 174, 4, 164, "Subchapter"],
Cell[73893, 1631, 7272, 151, 129, "Output"],
Cell[81168, 1784, 597, 17, 64, "Code"],
Cell[CellGroupData[{
Cell[81790, 1805, 312, 6, 64, "Code"],
Cell[82105, 1813, 7137, 148, 129, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[89279, 1966, 451, 13, 64, "Code"],
Cell[89733, 1981, 54871, 900, 379, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[144641, 2886, 549, 14, 89, "Code"],
Cell[145193, 2902, 88909, 1673, 460, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[234175, 4583, 102, 1, 114, "Title"],
Cell[CellGroupData[{
Cell[234302, 4588, 135, 1, 79, "Subchapter"],
Cell[CellGroupData[{
Cell[234462, 4593, 756, 19, 113, "Code"],
Cell[235221, 4614, 20781, 414, 73, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[256039, 5033, 157, 3, 64, "Code"],
Cell[256199, 5038, 211, 5, 39, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[256447, 5048, 242, 5, 64, "Code"],
Cell[256692, 5055, 13256, 316, 73, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[269985, 5376, 282, 7, 64, "Code"],
Cell[270270, 5385, 72, 1, 39, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[270379, 5391, 523, 12, 89, "Code"],
Cell[270905, 5405, 20804, 414, 73, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[291746, 5824, 157, 3, 64, "Code"],
Cell[291906, 5829, 234, 5, 39, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[292201, 5841, 89, 1, 114, "Title"],
Cell[CellGroupData[{
Cell[292315, 5846, 95, 1, 81, "Chapter"],
Cell[CellGroupData[{
Cell[292435, 5851, 89, 1, 54, "Subsection"],
Cell[CellGroupData[{
Cell[292549, 5856, 1071, 28, 161, "Code"],
Cell[293623, 5886, 150, 3, 39, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[293834, 5896, 104, 1, 81, "Chapter"],
Cell[CellGroupData[{
Cell[293963, 5901, 836, 22, 137, "Code"],
Cell[294802, 5925, 5768, 119, 111, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[300619, 6050, 91, 1, 81, "Chapter"],
Cell[CellGroupData[{
Cell[300735, 6055, 114, 1, 79, "Subchapter"],
Cell[CellGroupData[{
Cell[300874, 6060, 337, 7, 64, "Code"],
Cell[301214, 6069, 22267, 511, 83, "Output"]
}, Open  ]],
Cell[323496, 6583, 384, 9, 64, "Code"],
Cell[CellGroupData[{
Cell[323905, 6596, 320, 7, 64, "Code"],
Cell[324228, 6605, 20860, 416, 73, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[345125, 7026, 423, 9, 113, "Code"],
Cell[345551, 7037, 20783, 414, 73, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[366383, 7457, 200, 4, 164, "Subchapter"],
Cell[366586, 7463, 622, 17, 113, "Code"],
Cell[CellGroupData[{
Cell[367233, 7484, 281, 6, 64, "Code"],
Cell[367517, 7492, 1932, 44, 297, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

