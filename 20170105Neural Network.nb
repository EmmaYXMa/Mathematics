(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[         0,          0]
NotebookDataLength[    597238,      12833]
NotebookOptionsPosition[    588300,      12517]
NotebookOutlinePosition[    588684,      12534]
CellTagsIndexPosition[    588641,      12531]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Neural Networks", "Title",
 CellChangeTimes->{{3.6926446321814623`*^9, 3.692644643892906*^9}}],

Cell[CellGroupData[{

Cell["NetTrain", "Chapter",
 CellChangeTimes->{{3.6926446469607267`*^9, 3.692644653633976*^9}}],

Cell[CellGroupData[{

Cell["\<\
1. Define a single-layer neural network that takes in scalar numeric values \
and produces scalar numeric values:\
\>", "Subchapter",
 CellChangeTimes->{
  3.69264536502649*^9, {3.692904414393135*^9, 3.692904415466309*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "=", 
  RowBox[{"DotPlusLayer", "[", 
   RowBox[{"1", ",", " ", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", "\"\<Scalar\>\""}], ",", " ", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", " ", "\"\<Scalar\>\""}]}], 
   "]"}]}]], "Code",
 CellChangeTimes->{{3.6926446698115683`*^9, 3.692644713213236*^9}}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DotPlusLayer",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{15., {0., 15.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         TemplateBox[{GraphicsBox[{{
              Opacity[0.3], {{
                LineBox[
                 NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                LineBox[
                 NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                LineBox[
                 NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                LineBox[
                 NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                LineBox[
                 NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                LineBox[
                 NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
              AbsolutePointSize[5], 
              PointBox[{{0, 0}, {1, 0}}], 
              PointBox[
               NCache[{{
                  Rational[-1, 2], 1}, {
                  Rational[1, 2], 1}, {
                  Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
            ImageSize -> 32, BaseStyle -> GrayLevel[0.65]],StyleBox[
           "\"uninitialized\"", 
            GrayLevel[0.5], FontSize -> 8, StripOnInput -> False]},
          "Labeled",
          DisplayFunction->(GridBox[{{
              TagBox[
               ItemBox[
                PaneBox[
                 TagBox[#, "SkipImageSizeLevel"], 
                 Alignment -> {Center, Baseline}, BaselinePosition -> 
                 Baseline], DefaultBaseStyle -> "Labeled"], 
               "SkipImageSizeLevel"]}, {
              ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
            GridBoxAlignment -> {
             "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
            False, GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]& ),
          InterpretationFunction->(RowBox[{"Labeled", "[", 
             RowBox[{#, ",", #2}], "]"}]& )], GridBox[{
           {
            ItemBox[
             StyleBox["\<\"Parameters:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             StripOnInput->False], 
            ItemBox["\<\"\"\>",
             StripOnInput->False]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Size\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox["1", "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->
      GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquareMinusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         TemplateBox[{GraphicsBox[{{
              Opacity[0.3], {{
                LineBox[
                 NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                LineBox[
                 NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                LineBox[
                 NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                LineBox[
                 NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                LineBox[
                 NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                LineBox[
                 NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
              AbsolutePointSize[5], 
              PointBox[{{0, 0}, {1, 0}}], 
              PointBox[
               NCache[{{
                  Rational[-1, 2], 1}, {
                  Rational[1, 2], 1}, {
                  Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
            ImageSize -> 32, BaseStyle -> GrayLevel[0.65]],StyleBox[
           "\"uninitialized\"", 
            GrayLevel[0.5], FontSize -> 8, StripOnInput -> False]},
          "Labeled",
          DisplayFunction->(GridBox[{{
              TagBox[
               ItemBox[
                PaneBox[
                 TagBox[#, "SkipImageSizeLevel"], 
                 Alignment -> {Center, Baseline}, BaselinePosition -> 
                 Baseline], DefaultBaseStyle -> "Labeled"], 
               "SkipImageSizeLevel"]}, {
              ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
            GridBoxAlignment -> {
             "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
            False, GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]& ),
          InterpretationFunction->(RowBox[{"Labeled", "[", 
             RowBox[{#, ",", #2}], "]"}]& )], GridBox[{
           {
            ItemBox[
             StyleBox["\<\"Parameters:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             StripOnInput->False], 
            ItemBox["\<\"\"\>",
             StripOnInput->False]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Size\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox["1", "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]},
           {
            ItemBox[
             StyleBox["\<\"Arrays:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             Frame->{{False, False}, {False, True}},
             FrameStyle->GrayLevel[0.85],
             StripOnInput->False], 
            ItemBox[
             InterpretationBox[
              StyleBox[
               GraphicsBox[{},
                BaselinePosition->(Scaled[0.] -> Baseline),
                ImageSize->{1, 11}],
               CacheGraphics->False],
              Spacer[{1, 11}]],
             Frame->{{False, False}, {False, True}},
             FrameStyle->GrayLevel[0.85],
             StripOnInput->False]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Weights\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox[
              
              TemplateBox[{
               "\"matrix\"","\" \"",
                TemplateBox[{
                 "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                  "\" \"", 
                  
                  TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\"", "\"1\""}, 
                   "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                 "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                 InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]},
               "RowDefault"], "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Biases\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox[
              
              TemplateBox[{
               "\"optional\"","\" \"",TemplateBox[{"\"vector\"", "\" \"", 
                  
                  TemplateBox[{
                   "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                   "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                   InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                 "RowDefault"]},
               "RowDefault"], "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]},
           {
            ItemBox[
             StyleBox["\<\"Ports:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             Frame->{{False, False}, {False, True}},
             FrameStyle->GrayLevel[0.85],
             StripOnInput->False], 
            ItemBox[
             InterpretationBox[
              StyleBox[
               GraphicsBox[{},
                BaselinePosition->(Scaled[0.] -> Baseline),
                ImageSize->{1, 11}],
               CacheGraphics->False],
              Spacer[{1, 11}]],
             Frame->{{False, False}, {False, True}},
             FrameStyle->GrayLevel[0.85],
             StripOnInput->False]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Input\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox[
              
              TemplateBox[{
               "\"encoded\"","\" \"",TemplateBox[{"\"vector\"", "\" \"", 
                  
                  TemplateBox[{
                   "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                   "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                   InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                 "RowDefault"]},
               "RowDefault"], "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Output\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox[
              
              TemplateBox[{
               "\"decoded\"","\" \"",TemplateBox[{"\"vector\"", "\" \"", 
                  
                  TemplateBox[{
                   "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                   "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                   InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                 "RowDefault"]},
               "RowDefault"], "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  None,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.692644715492651*^9, 3.692644715568952*^9}, 
   3.692904335827467*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trained", " ", "=", " ", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net", ",", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"1", "\[Rule]", "8"}], ",", " ", 
      RowBox[{"2", "\[Rule]", "19"}], ",", " ", 
      RowBox[{"3", "\[Rule]", "28"}], ",", " ", 
      RowBox[{"4", "\[Rule]", " ", "37"}]}], "}"}]}], "]"}]}]], "Code",
 CellChangeTimes->{{3.692644787293194*^9, 3.692644838758964*^9}, {
  3.692645253227458*^9, 3.692645263014154*^9}}],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["DotPlusLayer", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open$$ = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = True), Appearance -> None,
                 Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 Opacity[0.3], {{
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
                 AbsolutePointSize[5], 
                 PointBox[{{0, 0}, {1, 0}}], 
                 PointBox[
                  NCache[{{
                    Rational[-1, 2], 1}, {
                    Rational[1, 2], 1}, {
                    Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
               ImageSize -> 32], 
              GridBox[{{
                 ItemBox[
                  StyleBox["\"Parameters:\"", Bold, StripOnInput -> False], 
                  StripOnInput -> False], 
                 ItemBox["\"\"", StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Size\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["1", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 Opacity[0.3], {{
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
                 AbsolutePointSize[5], 
                 PointBox[{{0, 0}, {1, 0}}], 
                 PointBox[
                  NCache[{{
                    Rational[-1, 2], 1}, {
                    Rational[1, 2], 1}, {
                    Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
               ImageSize -> 32], 
              GridBox[{{
                 ItemBox[
                  StyleBox["\"Parameters:\"", Bold, StripOnInput -> False], 
                  StripOnInput -> False], 
                 ItemBox["\"\"", StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Size\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["1", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["\"Arrays:\"", Bold, StripOnInput -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85], StripOnInput -> False], 
                 ItemBox[
                  InterpretationBox[
                   StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                   Spacer[{1, 11}]], Frame -> {{False, False}, {False, True}},
                   FrameStyle -> GrayLevel[0.85], StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Weights\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"matrix\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Biases\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["\"Ports:\"", Bold, StripOnInput -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85], StripOnInput -> False], 
                 ItemBox[
                  InterpretationBox[
                   StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                   Spacer[{1, 11}]], Frame -> {{False, False}, {False, True}},
                   FrameStyle -> GrayLevel[0.85], StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"encoded\"", "\" \"", 
                    TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"]}, "RowDefault"], "SummaryItem", 
                   StripOnInput -> False], "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"decoded\"", "\" \"", 
                    TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"]}, "RowDefault"], "SummaryItem", 
                   StripOnInput -> False], "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic], BaselinePosition -> 
        Baseline], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("None"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.692644843237027*^9, 3.692645268462347*^9, 
  3.692904339891013*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trained", "[", "2.4", "]"}]], "Code",
 CellChangeTimes->{{3.692644854327754*^9, 3.69264486701199*^9}}],

Cell[BoxData["22.04000473022461`"], "Output",
 CellChangeTimes->{{3.692644859481917*^9, 3.692644867963624*^9}, 
   3.6926452707595663`*^9, 3.692904340004087*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trained", "[", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], "]"}]], "Code",
 CellChangeTimes->{{3.692644874652532*^9, 3.692644880788294*^9}, {
  3.6926451841414347`*^9, 3.692645228300157*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "8.600027084350586`", ",", "18.200010299682617`", ",", 
   "27.799991607666016`", ",", "37.39997482299805`"}], "}"}]], "Output",
 CellChangeTimes->{{3.692645198755097*^9, 3.692645239452104*^9}, 
   3.6926452741030207`*^9, 3.692904340077016*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"trained", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "7"}], "}"}]}], "]"}]], "Code",
 CellChangeTimes->{{3.692645292177231*^9, 3.6926453111076727`*^9}}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1:eJwl0HtQE1cUBvAllipoS6MCgQoCIjVGQhUfEB45CImAsFwE0bSkBBTaNM3I
owbUagNMBQoiCAaoMxBeAwoyRaZYBSfY0oItdKiAkGGIoIgjUjCFYuQhzd79
Y2f3N/d+53yzjnGnjsQzCIIINT7Uu/J4w+3sXZm+xk91+eqspmbRKqNaFcs3
GrqjZjWhuabs86okymP6mzOaqv5vlqWqdMoOguh/ND2pHgkSVSFl9cufpzTj
QVbXPlVVYnskP9NM7/lun0jVTJmofTCoSaprZxxX3ceekw3wudybZbciHmL7
LC/xORp94gXeCGVJQ+M6MMnqkx1eHMfnf1xhwvXiIwdMWycpK0fAGlTnw6rG
HV7ivk8vbQFNj6JWNjWL+wW4OILsHtvQS/6L+7gatgEr46j89bfz+PxKmQs8
PaNqSh1bwPnfUtiAHhfzc1hvKHek2O0C93n5vFywhO/fucOFfd7Rp69XruD9
CV0fg1a/VqgYXMX9mmz2ACk/qQ/ZYgLU/4rOdocvPW+FBwYyKMOxV3vhWLtO
tEGyhjJhAfthYNiy+9zldyg7cBsPgFMjR9dywxTnzQlPWGWFfFIy+i42mciD
klHRFxPm6yhLdFovIERC+8VtZpSVHI4PGOQ+vLZIc3z/cakv3Pfc9DYgaT3l
jvAZPgjEjyI8sjdQVmeVA4hsayyGWt/DfWwj/cA3H6X4/v0+7pO74gfa3szy
epMP8Dy3nw5CEhHVM1mCLTkr9YfkfGvSzJmJ51czA4An1WWYtNMmugNAVlG8
Xhe0EffzThbAmXQ/8ewANmFvI4SwH+diH8k24X3ufwnhEu/q3UoD7Y9SD0ER
0/v3g4WbcV+SGwiMgIfbu7da4vxRbSCQTjFkRgNtk/QgiAvVszf6W+G+Y/uD
QdefLLrYhy2pGAsGp7o3Xn1SazyvsPQw+LukPicJFu7HDg2BXmJisjkP20H9
Xwhs3RFVNuVsg+8HN4aC9sbtirUt2B39USQkaS1OiXxtcZ7xloS+SLleOYgN
8S1hUMq525UX9yF2BBfB8Iuvixnx2A69bghY9W6xaZ9jE4d2Iyhzrl088RV2
B28vgh/sCly9FHTeiYfgmkVC0YscbIlegKB8jhkjbKZ9WYxA19zDaW+h75vF
ILBPzDLsbqX3ZUoQVEwvF9q1YY8pTiBQP3veOd9J5z+TIqgcurezepi262kE
T66mvWaN0K5TIHCKdO/MH6XnOaYhqOqrF599Qve3PGf0g6KC8Gls5bLSmM8i
xV0zdF6RYcwLzXb66Ol+rzIRVP9y4dcdC3R+4iKCCaVnQbmB7ifORuDMn4/e
vET/j6EcBCdXmtjfr2Crw3MR1LRJF1ZX6X1/5iH4H9JWr9w=
      "]]}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 7}, {-0.99995356798172, 66.19992065429688}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.692645304873239*^9, 3.692645311927071*^9}, 
   3.692904340153776*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
2. Define a network that takes in scalar numeric values and produces vectors \
of length two that are used as probabilities for the classes True and False:\
\>", "Subchapter",
 CellChangeTimes->{{3.692645502844046*^9, 3.692645509410571*^9}, {
  3.692904419822603*^9, 3.692904420198244*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "=", " ", 
  RowBox[{"NetChain", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"DotPlusLayer", "[", "2", "]"}], ",", " ", 
      RowBox[{"SoftmaxLayer", "[", "2", "]"}]}], "}"}], ",", "\n", "\t", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", "\"\<Scalar\>\""}], ",", " ", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", " ", 
     RowBox[{"NetDecoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Class\>\"", ",", " ", 
        RowBox[{"{", 
         RowBox[{"True", ",", " ", "False"}], "}"}]}], "}"}], "]"}]}]}], 
   "]"}]}]], "Code",
 CellChangeTimes->{{3.692645572405744*^9, 3.692645682451355*^9}, {
  3.692645944702682*^9, 3.692645963983323*^9}}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"encoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Inputs", "Input"}, 
             "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"2"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["2", 
              GrayLevel[0.5]], {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[SoftmaxLayer, {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"2"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "2"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"2"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {2, 1}], "Biases" -> 
               NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[1, {2}]]], "Parameters" -> 
             Association["Size" -> 2, "$InputSize" -> 1], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {1}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {2}]]], "2" -> 
           Association[
            "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
             Association["Size" -> 2], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {2}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {2}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "2", "Inputs", "Input"] -> 
           NetPort["Layers", "1", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "2", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`EncodedType[
             NetEncoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Output" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Class", 
              Association[
              "Parameters" -> 
               Association["Labels" -> {True, False}, "Dimensions" -> 2], 
               "Input" -> NeuralNetworks`TensorT[1, {2}]]], 
             NeuralNetworks`TensorT[1, {2}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{264., {30.771240234375, 37.228759765625}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{
  3.692645661688342*^9, {3.692645946110168*^9, 3.692645964702517*^9}, 
   3.692646392313026*^9, 3.692904340225499*^9, 3.692904394929038*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trained", " ", "=", " ", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net", ",", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"1", " ", "\[Rule]", " ", "False"}], ",", " ", 
      RowBox[{"2", "\[Rule]", " ", "False"}], ",", " ", 
      RowBox[{"3", "\[Rule]", " ", "True"}], ",", " ", 
      RowBox[{"4", "\[Rule]", " ", "True"}]}], "}"}]}], "]"}]}]], "Code",
 CellChangeTimes->{{3.692645980077159*^9, 3.6926460242509193`*^9}}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"encoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Inputs", "Input"}, 
             "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"2"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["2", 
              GrayLevel[0.5]], {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[SoftmaxLayer, {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"2"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "2"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"2"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {2, 1}], "Biases" -> 
               NeuralNetworks`TensorT[1, {2}]], "Parameters" -> 
             Association["Size" -> 2, "$InputSize" -> 1], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {1}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {2}]]], "2" -> 
           Association[
            "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
             Association["Size" -> 2], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {2}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {2}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "2", "Inputs", "Input"] -> 
           NetPort["Layers", "1", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "2", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`EncodedType[
             NetEncoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Output" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Class", 
              Association[
              "Parameters" -> 
               Association["Labels" -> {True, False}, "Dimensions" -> 2], 
               "Input" -> NeuralNetworks`TensorT[1, {2}]]], 
             NeuralNetworks`TensorT[1, {2}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{264., {30.771240234375, 37.228759765625}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.692646034240129*^9, 3.69290434971354*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trained", " ", "[", "3.5", "]"}]], "Code",
 CellChangeTimes->{{3.69264604160351*^9, 3.692646048993393*^9}}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.692646049528092*^9, 3.692904349815283*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trained", "[", 
  RowBox[{"Range", "[", "10", "]"}], "]"}]], "Code",
 CellChangeTimes->{{3.6926460533608847`*^9, 3.6926460654441957`*^9}, {
  3.692646171186792*^9, 3.692646176524859*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "False", ",", "False", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True"}], "}"}]], "Output",
 CellChangeTimes->{3.692646066684383*^9, 3.692646177742922*^9, 
  3.692904349890065*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"trained", "[", 
    RowBox[{"x", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Probability\>\"", ",", " ", "True"}], "}"}]}], "]"}], ",", 
   " ", 
   RowBox[{"{", 
    RowBox[{"x", ",", " ", "0", ",", " ", "5"}], "}"}]}], "]"}]], "Code",
 CellChangeTimes->{{3.692646200932927*^9, 3.692646265051319*^9}}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1:eJwt13c81P8fAPCLaGhIu8QVITMt7dcpSkJlJBKXzIZQiqguI4RCZoUjoghF
w4gzQnalUqmurKz7lFFW336fXu/fXzwfr/l+f467W2p90tBWiMFg/J7AYPz7
GXfBWlTdxnMr/SvTdO5WKH/N1DNlmgFtRv3GrfC3osiHyXT8Z+5p9laI44VI
izA9/pm3O2MrHN/iduK3dCDG1+0AeD3mEPFDOhbrwzVZMOnjN/k+6bv/zL8W
pgnNvGduvd/RXOdUTbh3J6as58E9jB97pgkGrgZW3dsz/pnzuEsToqbkR3Xa
Z2F+1PZtIHGrSujnu4cYvzu+DRKrE1x6pPOwfoafFgzGPFL8EozmlXG1YId9
TeurETQrrlALeoV/m+S/zv9ndsmgFqzfYrAx0L8Q3WSnDY1Z40LyVDHur2+4
Ay5WK+uqW5Vhf2EdHUh78EQuPRLNqXHQgVcx24SX15J4caAOyNofKFywoRzn
qdTqQLWwrypj9nP0cqNdMG/LR4mGiop/ZhY56kJmVuDH46rVeL79BXrQLdEd
rHuYOPiLHsif0d2qEIFmCIT1gbtZLLF1BM3frK8P4S+C7cyf12C/Sd/04Uzr
tZ87LerwPD5z9kCCWI3PLO1GtHXDXti6xdOCY4nmhLbthRYnpbXUWTTr/che
WPAqqKP2HpqfL7sPwmL0dgWIv0SXe+4Dn+X1M/5+JJ6uZgj28DK21/U17ueU
bgSMpF/5H4PQzKdlRhAzUbKlOhnNWdpiBFUv7KTuviX5+tONQcF4PMl2YxPO
l3Axhu8O8hmfJ7zBfLetJnA0/HxRY+hbjOf+3A9CQ0lfiu+imZNnmMIN0ypG
Vimae1HRFKolZ28PGST5zUdMQSk1rXLXgXfo1c2m0FvwurFUuhnn51ceAKf2
Fa25me/xfvTLzIFv+X5yyQs0V7bTHIyaA1Tr2tAcFbGDsL6m06N90QecX290
EIQfpIjP80dzDnYehBivpVvPWn3E/u/mH4KS2QtjN4h/wvkaXCtYE1JVpK2E
5lyttoI7ou5t+3aQOHPICoJH3qod9SI+s5wN+79EVNz4jmbGebGh+5744Bjv
M9pt5WGYutRX/st6Pj4P+yxrqNocpnZBm09eXxXWcPlAvMYSQzRH/bM1CIU+
3XnwGJp9cvoRGP2v1/5dHJqx58QR6GkxSWsQ+ornL1hlA7Ux8it4tWj+/je2
cCV3jbrVezQj9oct6DRqbvivHc38I2YH5ZMsdm3+S6y03Q4Kz4Q6PlX/hvPk
cuzgvvHI3ewoNK8w1h6uitcoJrJb8by3vR0hT2PJIwOnVnL/KY7QZnkSxj1b
yd9npSNsuj/b2DQazedNPwrfd1mcn16P5ry+eRS2+/Q1eGxqw/5zSo7B8NBM
N8N57djvi7oTyCyx/vtXBs16YO4EBlq5gffVSTzPxwlSwg/ET9Yndn7rBIZq
iZVFPmj+xQsn4b7DqkVKP0k8+7gzWH80Lhau7cB5qp9dYOrNrydc3qO5/CEX
eGjuJPmlA83Ime4Kwh/8PfIndGJ+7hZXSG7OX+2igWZqJLhCxxtm2uckNN/c
4RQcbewNzfP4jufbN8cNJEI9QN6fmLXSDfL3iAoiItA8Iz03EGuQ3u2cReI9
vm6QUWcoIt+O5n/87QaC6qceEXu78Pw/2s6Ay3Nf65Py3aT/J3eQatsh+ms1
mjtx3B1qhKbc82KhWZ8XecByVsjPQDMSFzLzgPf5kZzkIDRv3jsP0My+E/+e
IvGYD+dg1s2qD9uf9qCNGeehKO/KhepyNGOR7Hk41qy3bN9LNFNM5zw8n/vS
0bIbzT4Veh48Qt8Pu0v24nwzmQvw1a97XiYHzcnadxEeOE8zWrCrD883uYsD
tTdme9zfj2Yl/uVAR/mihG02JG467xIsWrii5/hFEpfWugS+Jdo+JY/QDMnE
S7Bf4mLO0WUCzP/B9obRnJ+zn42hWUojPjDn8/AGwykUzm+c7Quqkxnsznlo
XqyqLxyxmJExaxVxpI0v1E5U0rJzQLO2vPKFeBOb0zPfoLlOuX6Q6Hmse6Xp
D+yXGekPK3lThv0PoVmMHH/gTUwT+XKExE83+gM/pI0Z4ozm14oFgBT3kGlX
IJqxxjcAbpTvKU8sRPNEvQIhfPqaeIllP8n7V2AQLDN8le6ogOappAfBgyjn
PJ4qmnupLggape83OW1Cs1MkgmHGKjmxGmM0sy8+GK7sX+Du40/qE4tDwDth
fN9gL+kfMCsU9q586qI0gGZNXh4KUiWnwqxHSDx+fSjkf+tubBTpx34S7FDo
X/5+z30pNGdudihYZzzSt9uLZicbh4FmntOu5hzitOxwmKGr6Dgzn9TvrAyH
lg/tATt4pJ7xORzcxy2qcmvR3HKx65ANu3eGtZP6CIfrwKyQ19adP4D7n5CP
AMZrPqvwHJrRkx8Jvl1FiecuofmW7yJhCiNOaEMAmvl7IBIkVMzKH0WS/CiV
KFju/3JnVjbJD02KAt1NpQZJHWhW0vVouH77tkWA4SDOv3g9FhbkX3q2wwzN
/ZgbC7caraRE2GiG9dtYuPNnMf/SCZJPLbwBT00jjngGoDkzbt+AFjG/o05F
pD702U2QO23nbqw4hPMk58aDysYvRgkriUM2xMMaxgG17nVohoJlPGwL3tVx
cTua/yU1HiyTlY3TLUjcfEsCRDX1qwldQ3MN1nNBZO3FzqyB/+d7JcK0sd+l
oyNo5mBYIkiUOMdrM35h/dLURGDqW5t8nIZmlb9MhM222mWicmjmWoUkOB0p
lnDoAJr9/n0StA1F7xd7RuLf9yZDkubqU5/KSL3+sWSwCqm/llVN/NovGT7I
irwwaib52wuS4aWR66ZbA8S58ilQ9ECPqaL4G/cfEb0D0ScmdBtEo1ly/FQw
zrslujQezez/LxUkRNbLDCSj2a1L0uDqLSeL6Ickf71FGvjWfKz/Uofm3/+Q
Bs4rHuc4TxzGOPX5Lui2Hz0f7jJM7kMkA3acl8nQckfzlq7IgG1zWz78ukDs
oZcBG7X11x8MRrPvXM8AxRS1AZlUUj8qcx/EbAcdHrWQ/tl6mVDbdt64eecI
zq+0yoYqr3U+VwzQ7GWns6F8DvVgswmaGxGQDYVa7JmJ1mhe8YNsyEjeVu14
nnityAMIsZnEGntI6rOyH4BBW6iSlNQozvdelAO1Sm1NFrJolt3KHNh9SuPC
TUU04/COHNAR+ty4QIPEb7nmwDam0pnZe9FsxdocWGvxnDfZm/iJTy5INo2Y
DLSjOdIij+HGYv2/6r1knpjUY1h4hJvm3I/mztR4DPP6d4z1/Ufy7Rwfg7h4
BPf7/DGcp9vwGIT1VHs+7SIeSXgC3WXWnKr7aIa/SR5IhzUfvZqL5qqdzgNj
SwMT4wISHw3Pg6LhDYr8KjSfasyDcJVZTb9bSdzJIB82RRfLyy8ax/7Fewog
+Khkg99lNPfk8WegOuvtku1Wf/A+s6aUQEdIh3ekLZq7SrIE4qb+7uw8hmZU
qJbAtIkLHga7kzjTuAS6f5nteBtG6hMTSiCl5ZOTYzma/21DKUimtRdfW/Ef
1kd4lsFUGDrcMkC8Z20FuGsqTH48imZtMqiAju0HM69N+Iv3tcW+Akp1Ska3
zUQz/WIr4JxhyPW7iiS+5G8F9Nguf37mMLF7fSXUBpsozGpA88bPv4Cdfea/
l5nQ7z10PY9ZB/FzfF5fPIBmFG6tg8FN6VktB4nr6e8Z3Ctj9lHWJH91bB2M
yt9qnuKM5k6YXQ8Z1p/yflwh+XenNoB4s5VXEQ/NZvg1QnOpzQRz5QmYf+n2
K3gUUG7JHEKzbcffgp2IG7++Xgjr/WRa4Iir56NpN4TRpeF8ULNXqtc7PPGf
+acYrdAgoSzmtkEE6wfPtUNBpvdNZWHRf2aJXu0EUT2TRdGiaP7RqE7Y1yUf
O2EqiVfHd0KnTF3UW3E0wyOrE2bHzg/nSJF4ZGMnHPPJCGjagGZWzfoOiw+8
dfNyJv3EQr+D5wTFvbWf0Jwazy7o0BJrlvtK8jO8u2BvQK/VpTZi/8AukJ2Z
dXJdD5mnEt0FtZJrrnGHST+Nh10gtX5r/enZk/B+dDu7oNTJUG/JLjTLUb8b
prac03HKJX45pQfWnb07/doTNOfvjB44LNH8Kiuf1K+Y0wNPddYe+skj+c5S
PWD3iHI5XYfmV63qgZKrNjfPdaDZaeY99OvNQHB5wWSMq6T2QHKLV07qYjT3
VXoPNJxNd6+SQvNcs3tALnOy8NTlaPadvB54vahsfog6cUtND6gOamhe1yX1
3lQPtN9ZGpHghWa8WN0Lvb5fR4Q5xNrre6HfOtHKwQfNKdxMf+6TXqqkfoU4
TrsXFkUzS0uj0awVpr2w11/6R/tDUu/o0QuF9kv0lLvIfG5+L5Rpf3oQ2kvm
XyvqhWqZuPlDFOl3rrQX3n2RbH32i5x3ezU931Ty3J6JU7BfyvteUNBZnOYq
jWYl/e6FCIWFE/NMiBNX9oGFpVxq6wGS/3Z1H8hGrNadYYHmTNLog9y/+qFH
rNFs9pY+aHrrLTnjJJrfTX+One3Xu+ZIAJppa90H4V+LbacXkH4TwvrAfH7d
5PVFJL/xeh8s0/+Qbl2C5sVF9cHDp4M/n1Siuaq3+uDVtRUXrJtIvnJqH8za
ej3qSR/ZJ76wD0Jv2FUeZk7FfNv2Pjh7xvuUlwyaU9/ZB5aG8dLRcmj+mu4+
UJ769mytMvGIoA9eeGgraGxAs2yH+0DITDZwmiGaVz5VAG7zv+k+8SH9c1UE
YDHw59fLy8QNagLQalh4uzcQzf6uLgAJ/31jS0NJv9nrBJD5i5cefIvk628V
wPc3CdOsH6EZBwwEYB5xqH5aJ6l/eVwAkjlTFx/rRjMbnATw5eUT+xd9pL7a
WQA2MyUmXB4k/fNPC8DpSsXqvxPEMH7eSwDeHLXYn5JoZmSQAO4en2Dz1hDN
W5QmgONBmdlr9ouR+78rANV7B/+EmxH7pgvgYeejqD1skt+RKYBC66Mvqk6Q
eNgjATQeeK1aEEDm+ZcKYFgrZSShCM1ifBSAV0GCT3kJybdsob93rLoxvauc
5Bd8EsAk6WtLV9WQ/Vz4Apg34r6r/B2pf9EugNX39WK//0AzVv6gzzd3cL26
zDR0mzAF/UGCUhO5aeR+RShwE+rSO7eCWFOUAi/qE7tMDc2NmUxB0IvKAJPN
aI7GdArSzt9s9jAh+Wvp7z2t7dvcS/3RzE3yFGxLqE9SDCLzTBUo4B4wrwu/
SvJdVlBgWeOy7EgkyU9SouBDNrdW+DaZ169GwSvP/5jaRcSG6ykonZX/onIQ
zV+gQ8HSGu1BtWHSX2wXBRzfl1IxY2j2GO2tv7+fchCajvH3uynIb5kvNUUc
zfPbQ8HDVDdXXSU0M3U/BUlb1BfXHSb5c2zoeQZTfcZs0Kwm2t+sWrtXOKA5
120pkPGOzL/sROpn2lOQXDFixvJE88ccKUjZUxqTE4Fmp5+k7+uw0bwblSTu
eI6CKlflC1XVxDM8KfjuI9Lxq47My6GtcOfJI6MmMm/Ei4K73YtNpn9Fc70u
UnDvVNt1zig5j6UvBff93GbZq8zA+pgQCno3H/L2W4lmylylQHlQa+D2ajTn
Pu171nPe8DegGbxr9H6QE2O+g8Q/hdHnGfkhbWCF5o5GUnDjxHHVtWEkXhJH
Py9Z4wSjCNJ/QzwFC1s2ibtGk37ZtGN0xfoz48g+txIoiJS/90jhHrFTIgWh
Xzs3S5aR+uFkCvxNjuwWHkKz09Lp57GnxcJ2mPRbkEFB4S4Tp8oxNO8y7f4t
O8OChGZi/Mh9CizklN7NFkez52RRsOp3v7WsEvGhhxR8jvE+p30YzbvylIKR
8LGgVBs0p4v2nJDTcVMc0NydeRTsumTHq3Mi9UL5FOQ66oru90IzXQsouLJR
ItwumtRvKqJgbUviXf86Evcoo0Bc1WE4q5HsV06796LqzubXpP+Mcvp+ZQra
FD6Q/km05xxrkq7uQLMqnlMw6iW8W5Qhjv5TScF7sXUlOgvRPKVaCirWxH5v
WYTmH6Ode2h8poskcTrt0KxSy1hpNEexjgIdoz3jXcvRXNl6Cp7ecNAIWkXi
Uxvp57Xi5v263Wgm9zUFgwM7Unz0ybyPtPcU9d/asIf0n9dEgaiRbnCKIekX
TNvNa+ToeTM0+/QbCgwbTBVU7Mn+a99RMM1tzu1gb1LP+UCBA/BubPMl83Jo
l005Hj7sR/Zpp30uvuySTSDJ1/lIQVelK3tzKPG0Fvr8i14u6Y0j+QGfKLjI
C4nZnUf23cenoPsTL2Ikn+znSXv/2EBoaiHZL4W28jrzQGEemjFMuzld7lxB
Bam/8ZV+/UQXH1RqIvu9/UZBx4mfUmIU6SffTsG+INnFeT9IfDftwjTT+fb9
pL8T7eutz2aWDRHn0maZXWF4jpP72NpB/z1pyXzrnjILz7OrkwL9xSYp1bJo
HquLfh5tqryDcsQWtNvuT/7YK0/y3Wl7sQrFZyqh2dm0M2xlvIzU0Zwl3RRM
zf5p2LIFzeynXal1lSHYT+zTS4HEDIfFFw+gGTdpW77TXCduTuI5tH85Dh1b
dYjM/0Zb7prFuzNH0CxWHwW+7xUz/54k837R1nSqPDgrkPQzoOjXb3PXjvIr
ZD8b2rnbp606G0zyz9GWW7hv8qdraO4d2tPKP+SmRZH4H9rNCwXTWcnkvCk/
KHB+PofnVEzmf/tJgeJKjfSlJWTfIdqtN8yimkpJ/qR++nk7xx/fWEHyVWhv
XqywULSOnOcM7ckum1zjPpB9RQYoSJC0lq0dIvPFBynYuFpJ1fo32V+adtOu
QY3hYWJV2pPPXt4tO0767abt/PKeq5eQBM73o826PMBTnonm/aL9jfI9FKJA
XDNEPz9RA3sZRTSnmfa8JfNd8pTQrHbaurp3fdtV0ez/aD9MrkvfshbNWPmL
Ah+zeaN9mqQ+lLZsWWqUwUE0d8dvCuqVh5NbLEj9PtruUTo5Ry3RTAvaNY5d
DZcPk3kutF3FlaYU25P+N2kXH8r0VDtN9u2hbT6cyxYPIfYdpmCitcjJ+Ksk
/yrtzBqT88qhpF807QkJv2J1rpN5d2mnaa9/zYklrqM9FF6g/TOF7C8xQv+/
UilVfFVE+kfSTlt/cIo3j/SLp128fbBTvZTE79AWmMmlhD0nfkJ79+Ur0vtq
yfmbaYt+MZzT+J7MWzhKgWdo65+6QfJ8wmiH3/RqOf+LxGNp37szt0BlmNwX
l3Zz4U73kDHSL5P2uq70fj2h2VhfTfuH5unOmplo1oQxCuwGJr58oYjm2tO2
vKdVb6GMZp+gvf+wbw2lQupdae9oEK6Yq45mXqAtly5UcFiD5EfQbrdmpIxs
J/2Kadu8GnNfcYjMmzVOv98FbjpTaIlmzKNtzPI8tYdNvJi2VuboCbcjaI4s
bdkrI9YljmieBu1Wzd96ZmdIfwva1g/6mYHXyPwk2se9jcZ1w8h+qbTdjHLf
TbtO8tNpBwy5XQ2NIufJpZ25YWQsOo7kV9IeKfn79k462aebduiraSHllWS+
0h/6/9/tEw6XXxCr0b59un67Tg3ZdzXtx/NCR2vqyXk30W4xn+3w+g2J69KW
b124/Vsr6e9Ae2XuOankdtLvGO2Nfh9HbDtJ/UnaevJx2V3dpP4MbddjTKmf
P0ncl7bX5ksjDwdIvT9tv+nfmk4PkXgQ7Zis20HDw+S8YbSTOBPt80fJfUXS
Tt9nu81rnNxPDO3cZRVLtv5H8m/SLhqQG/n7l+Qn0P4fnicuFA==
      "]]}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 5}, {0., 0.9997097849845886}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.69264624323002*^9, 3.69264626610415*^9}, 
   3.692904350081328*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", " ", "=", " ", 
  RowBox[{"NetChain", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"32", ",", " ", "Tanh", ",", " ", "1"}], "}"}], ",", " ", 
    RowBox[{"\"\<Input\>\"", " ", "\[Rule]", "2"}], ",", " ", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", "\"\<Scalar\>\""}]}], 
   "]"}]}]], "Code",
 CellChangeTimes->{{3.6926462709784527`*^9, 3.692646313852862*^9}, {
  3.692646402144946*^9, 3.6926464490227013`*^9}}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"2"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Inputs", "Input"}, "Mouse"], 
            "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"32"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["2", 
              GrayLevel[0.5]], {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "2"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"32"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "2"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["3", 
              GrayLevel[0.5]], {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "3"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {32, 2}], "Biases" -> 
               NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[1, {32}]]], "Parameters" -> 
             Association["Size" -> 32, "$InputSize" -> 2], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {2}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {32}]]], "2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Tanh, "$Dimensions" -> {32}, "$Rank" -> 1], 
             "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {32}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {32}]]], "3" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {1, 32}], "Biases" -> 
               NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[1, {1}]]], "Parameters" -> 
             Association["Size" -> 1, "$InputSize" -> 32], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {32}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {1}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "2", "Inputs", "Input"] -> 
           NetPort["Layers", "1", "Outputs", "Output"], 
           NetPort["Layers", "3", "Inputs", "Input"] -> 
           NetPort["Layers", "2", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "3", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`TensorT[1, {2}]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Input" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{288., {39.771240234375, 46.228759765625}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.69290435014505*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
3. Define a three-layer network that takes in vectors of length two and \
produces scalar numeric values:\
\>", "Subchapter",
 CellChangeTimes->{
  3.692646659113158*^9, {3.6929044234134083`*^9, 3.692904424460939*^9}}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"2"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Inputs", "Input"}, "Mouse"], 
            "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"32"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["2", 
              GrayLevel[0.5]], {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "2"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"32"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "2"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["3", 
              GrayLevel[0.5]], {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "3"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {32, 2}], "Biases" -> 
               NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[1, {32}]]], "Parameters" -> 
             Association["Size" -> 32, "$InputSize" -> 2], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {2}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {32}]]], "2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Tanh, "$Dimensions" -> {32}, "$Rank" -> 1], 
             "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {32}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {32}]]], "3" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {1, 32}], "Biases" -> 
               NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[1, {1}]]], "Parameters" -> 
             Association["Size" -> 1, "$InputSize" -> 32], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {32}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {1}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "2", "Inputs", "Input"] -> 
           NetPort["Layers", "1", "Outputs", "Output"], 
           NetPort["Layers", "3", "Inputs", "Input"] -> 
           NetPort["Layers", "2", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "3", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`TensorT[1, {2}]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Input" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{288., {39.771240234375, 46.228759765625}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{
  3.692646314490692*^9, {3.692646396127309*^9, 3.692646451659688*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"trainingData", " ", "=", " ", 
   RowBox[{"Flatten", "[", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"x", ",", "y"}], "}"}], "\[Rule]", 
       RowBox[{"x", "*", "y"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", 
        RowBox[{"-", "1"}], ",", "1", ",", ".005"}], "}"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{"y", ",", " ", 
        RowBox[{"-", "1"}], ",", "1", ",", ".005"}], "}"}]}], "]"}], "]"}]}], 
  ";"}]], "Code",
 CellChangeTimes->{{3.6926466808062477`*^9, 3.6926467371439037`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trained", " ", "=", " ", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net", ",", " ", "trainingData", ",", " ", 
    RowBox[{"BatchSize", "\[Rule]", "1024"}]}], "]"}]}]], "Code",
 CellChangeTimes->{{3.692646839478088*^9, 3.692646861951653*^9}, {
  3.692646981679017*^9, 3.69264700648776*^9}}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"2"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Inputs", "Input"}, "Mouse"], 
            "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"32"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["2", 
              GrayLevel[0.5]], {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "2"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"32"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "2"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["3", 
              GrayLevel[0.5]], {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "3"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {32, 2}], "Biases" -> 
               NeuralNetworks`TensorT[1, {32}]], "Parameters" -> 
             Association["Size" -> 32, "$InputSize" -> 2], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {2}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {32}]]], "2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Tanh, "$Dimensions" -> {32}, "$Rank" -> 1], 
             "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {32}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {32}]]], "3" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {1, 32}], "Biases" -> 
               NeuralNetworks`TensorT[1, {1}]], "Parameters" -> 
             Association["Size" -> 1, "$InputSize" -> 32], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {32}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {1}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "2", "Inputs", "Input"] -> 
           NetPort["Layers", "1", "Outputs", "Output"], 
           NetPort["Layers", "3", "Inputs", "Input"] -> 
           NetPort["Layers", "2", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "3", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`TensorT[1, {2}]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Input" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{288., {39.771240234375, 46.228759765625}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.692647012621269*^9, 3.692904355553383*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot3D", "[", 
  RowBox[{
   RowBox[{"trained", "[", 
    RowBox[{"{", 
     RowBox[{"x", ",", "y"}], "}"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "]"}]], "Code",
 CellChangeTimes->{{3.692647034281608*^9, 3.69264706891683*^9}, {
  3.692647103582386*^9, 3.692647104685025*^9}}],

Cell[BoxData[
 Graphics3DBox[GraphicsComplex3DBox[CompressedData["
1:eJx1nAlYVVXXx6/zmOJQmlqSog1akrOlHlLLKRWHN3NKVBxKTd60HAtMK18b
RLTE8lWccQZTQATOZRSRebjMcAFBHFIcUnPofmefc/Z/L3bfy/N8z/38v6t9
1/nddfZZe+21z0tzl02aX9disXRqYLHU0z5fKh73u8NxS+WfmmRv4X5NWbAi
aGfI0utUd2sadkU52qyNz9LCKqpb7u65rNzc9/kCl9HlVHde3qZMma+PU0j1
gNbvFpj2mbX0uTEZph5Ta/xXfotWLOYf1e94rFZNe4XoPk5usaaeSXXrjKOZ
qukP1Z1XjC807cup7tb4RJlqXi/VLRPdK1WTD9UDFn9Vzf2muv3yK4Ij58rG
mXb9CjgT3eO1I5XgTHS3W9fKwZnoAfVWloIz0e0jpuSBM9GdB21PB2fqz8FE
KzhTPT3oHXAmunXcYys40++NjE0HZ+qn56E8cCa6j/VeKThT++p3KsCZ+t+o
PeKv1veOWwb+fDydZ8/bl2FHdJ8HTSvAmej23cF2cCZ6wEslheBMx0/blwPO
RLcMO5oCztT+6y+jwJnar5uyiNsr9HuntI0EZ+r/2hdTwJnoztZ1OeBMr+tt
O/ymusf9RDs4U38OD6wAZ+rPG30qwZlzYvYln5aBM9E9fsoqxX9P9IARfxeC
M7UPWJYLzkT3Oe+WCc5Et4Z3uQjOdJxvOoaDM/Xzo+DPwJnaNy0KBWc6/uWu
ieBM9eKCDHAmunPRq7ngTP1vU4T7k+r20Tml4Ex1X58ycOY8mJ+f3ywAZ6Lb
W53KA2eiBzRLzMG4RLdGjsoEZ6Jb4n5IBmeqXw2JBWfqT7/fzoAztW+xR3Cm
9t0+OA3ORPcJP4JxqW75OOASOBPd7X5VBjjT603U4p9zpvrDNXngTP35JaNA
iudM/Xe0D8+U4tnQ37OlS/Gs627ethQpng095cWLUjzruiXmUKwUz7pu3/D6
eSmedd1as/y4FM/GOPX//ESKZ+N7P+l8RIpnQ1+79ZwUz8Y471bESPFs2Ndd
lCjFs677tHojRYpnXfc4tDldimddD3haL1PiHKNf14bXYiTOuu5m+dsqcdZ1
j/JFURJnXbfvjz4ncTbsPfuekTgb35t4/ZjEWdd9Vln+K3HWdcuHPaZInA39
9rxfJc7G+N+sPSpxNvycOOd3ibOuO3dMCZM463rAyMmREmfjewMXWSXOBrcK
/+ha+RP/u9N9Va3nPf+rXjaj1nOL/wXdHkXnI/x92HtWrfuT/w1MmFkrnvhf
WP2JtfzG34S6tf9t/rW3TUK+QfUn3h7gTPVOc+eBM9WPD/IAZ6p7eb4HzlQP
LJrO47CW3jZgBc/naulve21QpHjW//dZEbGqFM9M9xn0RbQqxTPTA+Y6RalS
POt6VUGYKsUz0+0zxvD4yaS6m0fSUVWKZ/17O1TuAmfqp8uMxaoUz7p99+W/
KFI8M9068KVARYpn3c+Rc04rUjzrfh76NEyR4pnpHoefj1KkeNa/d/j+aEWK
Z10/dCtW4qz//s5dXbIkzob+dZcMibOu+wyNSJE467qbGpQocTbsbT1jJc7G
+L02hkucjXG8uxyXOBtxmhSzXOJs2E/99LDEWdcDlnqHSZyNcbYvipE467p1
6ZuJEmfDPnxVisTZsB/aKkPirOt2t2eyFCnf0P0ZdF+sK4huX9YuX5XyDZ3b
5kvIP2vZp7QT+QS1X/JMMjgT3bpuQiw4U3+2vX0GnOl9v+bpCnAmuseX54Jx
ndTec4CwI7rbpjcugTP1f0d8hiLlG/o4PX7KUaR8Q9dfKM5TpHxD98fvQKEU
z/r8ZP+jRbkUz7rukdbbLsWzoT/XqUiKZ10PmDcmV4pnw95iyZTiWdetdw4k
SvFsjDN/+Tkpno15NM5zmRTPhv8/+4VK8WyM3yrjghTPhr3jcIYUz8b4oy25
Ujwb9pczC6V4Nq4rtp5dimfDPi6hTJHWg/r9+0II1u9UD/D0qgBnotsPZtnB
mY5zNlnkzXSc5+bngDPR3Y49lwLO1P7O+khwps8l9ynvgjP15/ibkeBMdGvK
nWRwpuNsnIj8v9Y4lhPCjugeYWfsirQe1MfP6VehSOtB3X6He6Ui1Td0PjeK
q8GZ6G7P9xHrbaLb67xcAc5E93m6oRScqf1c5zxwJrrHnmHp4Ey/t9lLVnCm
z/lfVLFOod87ZXg0OFP92bh0cKb+vLoxD5ypP7+FYv1LdedWL1Tg39R+9wPw
rPW9B+dUgzPJRzyiVon6EdUTP60GZ6JbDz+9DM5E99nUqwycqX7JpQCcaR7k
uywDnOn43TIEZ2pfOGYTOFP7edFYB1HdbW+0mK+pPr2/mEeI7vzm5jJwpvZq
x0pwpPbfvwOeVPfYePuaEveKd/fCkD9U/sl0z6aCP9Htf7te5fYK0QMuHRf1
QKI73yu6qkrj6/7UKRb1K6L77BxyTZXG1/Xc9dX4N/U/NBD+1FoH/LftVdle
99N2WfhDf3eXOtdk//U4bxx+VbnzddWSpYU3Vf7Jxm/4JnSF6B4Lbl5VJXvd
z2dev6ZK9jqHBZFX4R8Zx3lRvBif1nsHf49xqP/2f1mF/2R8e/W0a4pkr4+/
KQTfS/0P6PUdxqH+W1JKhf80nu+5X1O+fOlyhMNRq67b1+t2pZI/f02Cw3GF
fm/6w/lCJ/aNv/q1Qul31Cnd4aig9m27LiqHTuwLxvxhV7rodqgnqXW05c6T
fiXQub2mux2oLFQK9O/NhX1d7Xqd2uZCJ/ar3JbkKC66XRrs61ssNbOapkHn
9vU0/SunFOVlXVdh31BbrsXt4vVP/wiuBzgcjtseq1Vuz8fR7H84Mz0S9rje
p9q3Bb2jdjTsEQ+aPGfZbSt0bv/Y4RjeNyJSfdHwE/ba15YmLEyHzu3/djgU
L88UNdfgQO0fX3PKg87tNb3dguActbPBGfbaOBOGTSmFTuy3+I0rUvsavyON
503Dm1ZAJ7+vZ59+ZWqeESfUn8O5Haugk/EVrwcV6jojDqn97IZ51dCJ/YNb
c6tUHrekHtApamQF4pPojf8cWYY45LoWJz2b1xQj3ojus8qah7gi+pMTz2Yh
friuxU/ynJZJiB+uN9AeO90TwhEPXA+wGPVz/rtzXfvdt3w+7Rx+X65rv0uf
hasv4nfkusbh7VMVmfi9iO748mQefhei9ympWwL+RP+u3LMMnIl+98HKCnAm
9ZWmn3SwgzPRnXbcLQJnrmvcHr7QLR+ciV7zel42OBO978MX08GZ69r9HrHu
hQRw5rp2X3utfBoCzlx3sxj1c86Z608cjqndz58BZ65rnAuXPBcPzkR/0HR2
GjhzXeNza+bX2eBMOFwOupEHzsS+3ZyCInAm9p/OfcEOzqRe5f73/TxwJrpr
ynobOBP93hr/LHDmusbTvmVkOjhzXeNp3zr4IjgTfcnPM6PBmesa5/Tmr58G
Z667Woz6OefM9UcOR693k0+BM9c1Dt87jbGCM9c1zluuDE8EZ6Krr4WmgTO5
XpduShY4k/H3TBlsA2eiT02Oz5Pi2agD/1UvQ4pno25cNzlViudMxtMSVJEk
xbOuB1yYmyDFs64/ivaIluI5k3G27K0JleI5k80bQTM7HpHiOVOPZ1Y/rx3P
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
2Y79IaIvevBWBfYzaL3Uc0mlqZfQOl5ydGEO+pm4zuoD6bfSzP6ki9C13/HT
z0bFYj+S1M0Cbm+yYf+P1uv2FRdiv4roa+oNtWN/heg9d3YrV4+bfVS8XsT2
+1w7JaPvh+uan2GvhUVjf47UwTwmTbZhP4zWqb7tUYD9G1qv85pcjP4n9DVY
LJ4ejyKx/0TrLY/3ZmG/h9aFprewYb+H1A08evdPUdEHbK6zeB3gmLR+t5rr
d95/iXWouU7n/YJYz9Yx1uO8vw3jWIx1N+/HwnrzhrG+5n0tXGf9LY+1dTHv
w8D4FmP9y/sG4I/FWOfyfW58bx1jPXtEWrdaHMa6le8jcp3VN9j6lO8DkfWv
3i/E98O4PdsXY+tT3u9L1mVKi5nhKu9PJfrscdq6m/dTkvXXgJXaepP3/xF7
x7gph1Xer0bXj0u771R5PwrRT7V6cgD9E2T8LRF1grDfT+yn+rufxf40WSdO
zXcPx34qsV/ucj0K+39k/NiJ30aj75asd2J/ey9B5X2iRP/96bpolfc1En1C
+NkwlffhkfOaPiuTj6m8/4Prmj/tGuyNQr8CXW++/e847K8TfYbHKxexH8x1
zf9mbWalYP+S2Leb9lU6+lnJ+uK7Y0lJ6B8l66NFXw2LRb8j19l7CVJ+CUH/
B9e1753a78UU7PeTddDyznUzsT9N10fZTjnYTyX+1Jt8Ihd9n2QdEdBrWhL6
LImeuKO+Ff0QZL0we2iyDfvfRC/NSyrAfi21n9yvxOwDTqF9FP0/vxWH/X6S
987olVyK/V2il/pZyrG/S/PPiz6XFb6/S56beR3vXsF9Sp77+n4uz0OIvVdo
UrXK94NJfuURTN47RPKWlbn9rnL7Wud3T39crRSZfZl8/Botbid13orzEuR5
Z285/LJyw+x35DrrW/v1xl7F0+zP4zrj0C7vLM6HkOdjlx+Ty3BOgOgbXS6U
KkvMvkmus36Jp5MDFd6nyPW/tLy69Tsn1BizL40872xDN8fh/AnZH6lZkFCM
cwhEt6SkFKBvnu7LrO+aq9w3+zW53kx7jn/x7jH0F3Kd9Um27LEX/XxcZ30X
6o4o9J+R56m9e/lFnIeh+xTzuuXiXATRG+9vkIM+fvJ8tKZMylSOmH3nXGfv
7fl8UCr6Srmu8Uy3zjuqTDX7ILl+TfvBPinegr5DrmvytvnNz6JPjpx39xqv
xqCvi+43DVss+rSJvd6nzc/J0Dq/+8E0nPcgz/d137RIwfkEot9os/Mi+ump
/aFZ8ej/pvsmqWutymKzj5brrH9vrPdBhfetcr2a/Y6jvNBnSc7xO//7iyPo
C+Q66//xahCGPjaiu7QbEY2+K+LPgU8exqPPg9SZd52MUBV+PofoRRExkQo/
T0L7lmcfDVf4+Qda/8/cEaLwfn1SJ3edHhKs8P5yYu8auTRQ4X26XG+jXXBR
s7EK7ysl47g/9tyBPki6T7Hp/cPo2yP2VuujIPSZEX1Rk0Nn0RdFrnfjbu9z
Kj/HRZ7jG1g/M+/DpnlF1cOF6i/mfEWed8sK9qWq/JwSraOyvtx75jzGdZYP
7yz8Rp1tzmPkuVw6pdtenBMjz6l2fYpsOK9F9BkvN89WPzPnMa430X6XNXP8
Vd6vzHXWF3r+rYPor+W69r0z/nj1PM6hkTpVrxuvl+A8GO23jN1ZgPNLRHd6
sNmm3jHnMa6zfvVz/Q+iz5vr2npciRp2SJlnzmPk+Tig+gMr+lDp8zQ4Ngnn
4kidZ9GabeU4n0brP52X2XGeiujVE/8uxPkfolsXbLepfB7juua/z5CaU+pM
cx7jOuvnmXjsgNLQnMfIc/lp4cAYhc9jXNfylnappano76T1MfvHOTjXR+pO
r8zMqcT5OqLXNPuoAufBiN5+8BY7zi9xnZ3bDSgrMPOrfKqnr+qUrS4z5yuc
a9Hyn5W2syrvU+f6bS0fnlpvL/qqua7Fz7ZjU2LRB8x11tfd7kk6+laJntvk
ei76LIk+YLR7Cc7dkfzBaXHzKpWfE+O65v+Z1tXlKj/XxHXWJ9Aur0Tl53CI
vnHUmFyVnxvhujafBJz/KVXtZc4LXG9h9vXxvnyuZ2gc3i/cgT5yrrP7a9Kl
WPQ9c5397h+1zkSfLtGvu9ry0VdK+uXKLm2wow+S6LMDonFOWSW63nfH8yGS
v9WfXiTeB0j0Sde7ivOzpG6zPeDtIjxHie46/ah4jx/X2f5pk5nifX1c1+6X
9/+1JRLrHK7L52S5rvm/o/EJcU6W5KVZg26K9+MR3Xv7PvEePHJdnpsWi7gn
9mOHDLqMPI/Uc2aeaS7O1xHdEnwoHxyofbMY8d45rmsciv64Kd47x3Utrla1
/17M71x/Kp1jJXns8DQvcY6V6J2vrMqXzqPp+gxHo1JcL9Hbda4n6qpEf5zW
S+SdpC60aPd6G66X6IHqvAxcL9FXTEi/gOvluna97v33hWG+JnlydqvSHPhP
9OS2wQXwn+i+fn+XwH+i990/vQz5JakveVzvnwI/SX3p/a9ai3yC6/o52T/O
YP4leXhbf3sO/KF1p0eL8+EPyasf3vusCHkeqTtlZ/ir+F6ir1qxOQjzHe13
2jQvC+MTPah+UA7yJ5JPer389mHMCyQvffiaU4r0Hir/iIGO/+89VP4Rlmb/
33uojDpV4j/eQ2XUqf75HiqjTvXP91AZfSn/fA+Vf4TPU+M9VLXfN+UfwZ6n
/3zflFG/+uf7poz61T/fN2X488/3TWn+aF/wz/dN+Ud4OGq/b0quX9V+D5Xe
j6G/h4rzJHnjWN8H4bgfaP3qeMNQxB+p/yjHqk8jPmidavWgE/i9uc728TuM
OSDOB5k66yec30Gcx6T5aqfZ+5HncZ29n6dr4XHcp7SvY3uz33FfkOtqN21t
KLiRcU61P3Ue3LiuYW7U8lfxHjlSpzrWrDoBHIhe8aBY9O2R33/jxW6R4EDr
Wr93PgMOXGf7kkPXH0SckLz6Uspzkbhekp9n1XeI/Uuix+5//QKul9S7xr7Z
+BKul4z/3an1qbhfSH6+7HbqJVwXid8PH/07HtfFdW1edWm7LhLXxXW2/lrd
6RTinNTBFga0Tob/5HuPPWqZAf9pP8NbWSIvIfpk/9Fi/if1Lo+tcZfgJ9Hj
FjpEHxjX2fuLViT+jvuOrCMqrr1pgz8kn18YFJkPf4iutK4ownzCx2PPnR7h
4jwR19m6/va4UMzbXNfGqVfdoxTjk3x7ZfnqMtzn/L9j6+JB9cPFeXmRl17a
1Ocy7n8+v3r+bfTz83+T+bV50iMx73D9uMXoV+f3Cde1+6ijd+twjEPqVNcc
k8R+EtFnprqK+Y7r7D0Pp4d6YXyua/H58sjnQnCfcJ2dU0ucmYDvJc+77J/3
FeF7ie67Ji8f/z3RA49vtcEfrrP5mfUzc3+4rsVtbp+HwfCH62z6nzpN9NOQ
50/YnCmX4Cd5PlYHN7DBT/rctNzKgp+0v/fRZxkYl9SvLKUDU+A/113NPmHu
P9fZvOq18pj0fhKjTjWvRwT8J7rToydxuE+o/3e8Lv2jflXHrF/VPmetP9+t
E4pScL1Ef/JV10u4XqL3fDP7Aq6X1IWO73fE4vtIfaztruXiecz19yxGHy/n
wHX2PrH+SaKuQZ7/AR0H/w4O5Hu9PtgZAQ6kfrXivYOi74TY/9Bzq4hPUreZ
efWvSHAgz+vGSd+eBwdib7F+EAYOxD6o4Osz4ED6Ql3DuwfBDzJOwFjrIfDh
OruvWV8r50Pznd2Xt4EPGb/mc8sB8KF1rXZeJ8CH1K8G9qwn5lViv2n7hRDM
X8RP39m3zoGbXNfi/tM8gfVbcnvaj/fs9FTMa3Jdi4/DdXbue92Qz/B95Pm4
ZUjsPnH+Vzx3cpNm2DA+eX45fo3NwvhcZ3kg66Pj45O61uyFZ47h+8jz8bc/
YyLwveT58p1HB9EfQJ5TFy4m5ItzmiKvXOfd1gZ/uM7ef8j6zbg/XGc8S0ac
hj/ke7/fekL0/9Hn4C/ll+AnyVtfWXywDH6S59fa48PE+o3YD6y8WIB5mfaV
dbieA/+5vt5i9HFx/7nO+rG/3RUC/8nz9PuE8wnwn+iX4krTcT20P+1qWxuu
i+xP5SZ+fBnXRfJx3+Mtxbkmop/xvlGC6yL1q5qwkeKcLNGD3N4R8cN1z6dG
PxW/Xq5r8TNgTmE4rpfrmvnbh9cn4XpJPvB9lx+zcL1Eb3l1fT6un+h9chuJ
+sX/qtuQfbTlRS6iXkHWHy5b+4lzrEQfEdlanGMl9bEDuZPEOVaus/mt39fi
HCvX5XOsXD9k9k1xblz/y+EotD0S54VJXWvCh/dFfZlc78hFd8T7+oi+du1/
xPv6CIfITlPEOVZi3+hOp8v4N6kj6fuY/wfzji09
   "], {{
     {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
       GrayLevel[1], 3], 
      StyleBox[GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1: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
c91fNaLvUutG5TgLUutG6aVLonNV7SU1i86zVmIvpT2ReA9lT+o6iWrXqsNs
yddau+gcWXXLKZlzNum99vlzKk5dF52T1svX7Pp8vXSNzmEb5jpxqsaE/8/I
nONJJ3ePzklVz+wGj0tcP7wpOj9VzbNHdExUvOgYPQ6qkV4fnVcqHrWJrgmo
pvp5as0pTXtQcTRx7f2y6LxYY7s7tS+SPwz5nJRf+jt1nUp1+HmpdZq09NzU
elUaW+OyJV/v8jPSKZrf8kXSdJWY552i6wmqu/aMzt9VP6yQxw6tp6ui6yfK
45U3aO/jHcbn5Og9KdWQp2bObxVnX8m8d/U9/G3qfEG5be3ovSTVQutE722p
znlr9JirDtwwej9LOvmU6D0m1UuXpq6taa9kUuY8XHqjUfSel+qoV0T7c+2B
jsy8r6b5/H0eZ6VXP02tXaVvx2ber1qtNR1db1G9dHTmPS3NvbrRe2SqjU/O
XBeQtvksdX6hHKRB9P6d6revZt6rWwqfl4+bNMk3qfM45fv1o7WK4vLXeaxX
Xj8xcx1BfmZM5n24VXCT6D01jee4zLnrGrhldO7/E7Z5dL1C518eXa/Qe51G
G5R4T+Ss6H067df8kLrmqf2sCZnz55+1PjLvI2rtt4quJ6i/cfSeoPLis6P3
7/SOV0bX3LTX2SK6vqFnuzqf85ozp0bvaWr/aHzm/FzP/D+cl+Wm
          "]], 
         Polygon3DBox[CompressedData["
1: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
Q//OlSMf/5Tjes/J8WnnX4l4M29d37/BS7teUqznr3Pk19ly6KHM+F7w4vBr
cIH7w0vkuH9ztIJ34/0f0+/RivN3hT+i/yPnz+v6qPnkpxLxr3uN36vwOTub
G2kf+l7Gr2H8GF6/BV6f9hB8L+Mztwl9YXxZJ0c8eqDquUGMn9SKHLhQCk1v
buxqHKI/nTbRawJ/7fygXey9yjGXndOuZWuCTeBtmqgVOuXQZuYYc42atk+K
mlKtqwZeL4XmVRurEddNobHVjmqEv+h3bkI7vJVibbnGPldr0qbRH2+e5f87
C/4Avt44B58Jvw9f57yD7696aiCfM7IVmqNJsQbUIqcx/g79q+nP3iY0/jYp
NJRa6nTG36V/jXGtTWiQf5qY42qTUxl/uwlt1pXxU+C3nL+uM/hk+E3nq+sC
no32iFo3xfnmrJxiTZnLrCmsla2ZrTUUT9ZS5lhz7RYl9MIA+t9z7tol8ttO
OfL1hiX0Sd8c+W+rEvlhvxz5b8sSemHfHPll+xLrSRNAvWO9eTq8TY58tFaJ
fLQj/DXcq4Q+2Bj+At64hD7qlyMfnQi/Bl+So54YCb8OX5qj3jgJfsP1DHdu
E2t28RQ1h2vZmLAYvGwTscKaZVl4lSZqGWPmEik0tbH09xS5wJyg1rEGWy5F
jWZtZo26QooazNq1fQ6t3rsJLWONsyq8ThO1jxp9tRQ1r9rdGmz5FDWNtdnK
JfLv1jn0gxqrlSJmqr2MiXOmiEnGyn/ga1No7kG891f4ghT3cDe4PdfgjhSa
bpi1OuNLwivAr/L+R3ltCP2Dee0MxrrBs5eIAye2ou2XogZ3zBr8qBQ1i7W5
79FneaTEZ83F992QQwNPqevLnJbrenNOOjefaWJum0NvzLH+za2b5FhLrilr
FWOKudMcaqxRI6mVzBnzw6vmiFPd6fcw9tBfnfH1GP+4jhnLjIGe45zaHz6k
ibnmHD8lxRx07htTN0sRo421xug1UmjIn+ocHZJijjp3zWFzpci55rYh8KZw
H/jHHBqlbYoaQu3yeYpYa8xVe1pjzJQiR1l7WGOoTbrV882hc6TIaeZWNf8C
KTwBawFrigVT1PTWGuY4tYqaxdynJps/RY2uVjNH9nRON5E7zaE94J5N5FZr
oo4pcqq1kjVFlxQ1h7WGNVqnFJrP2k2N3L7+XrXzJPj2FDlwYIkcaDx6uonc
qAZfKoVGVZsf3Yp8s6dhs4RmnSdFTlTL3ghfA99oDiuhIWZLUVM9UHOiXoEa
2Fx5LXw+fCm8eYma+uQUHoK1tppabW3Ong/esYQeGJyj3joKfgo+J0e9qUen
V6eH17WEx9W/zscZ6/xzPrlGXCt6dnp3emKzlPD89P705GYt4cnpzenxdS6h
EW9IUbOoHfWY9Jqs8fUmrdH1ro6v62GZHLWE81/tNLyuD2uCmUt4qHqpeqB6
rXoqelsnNOG1uL6G1vnr/F+ohGfqGj6jNmOBnp9jemh6aXoqeqd6Ypem0AR6
ZXosei16gnq3epSHpfAU9S7NiQPrenN9qgkG1fU9ZwlPwtpkWF3feop6i3qI
eqMnwwek0BRzl/DsLk6hgfXy9PzGwVc24QXunKMWM2eZu/TY9Nr0NPQy9eT0
5vQ09Hb1pa29zTHmGmsMvbXRTdQeeiB6P3qCeiN6LnpfenB6MXo0emd6Yno3
ejxnpfDU9H70mMbA45rwnvTQ9NL0oPRK9dj02syJ5kY9Lr0uPTy970Ny1FrW
XDvB++eoxcy55l49yPNSaHy9yaE5vBM9lL4lPMdLUtQkepHWDBPhSU3UEtYE
V6fwvK0V9Az1DvWo9Lb1fPR+RjbhvetZnZuiRtDLska4Cp7YRO1wJO1J+mfn
8GdOYfzAFB77vOY2eHAKT30B13MJ/+HIHP6Ev9nfPiRHvblHCb/oqBz+gznN
XHdEjlxnzjO3jay5cL8S/sxxOerTvUv4P8Nz6PsBJfyjY3Po+31L+EsjctQD
XmOv9cE5/JgDSvglJ+Xwsw4q4fecksO/Ohp+Fj4vh19yYAn/5WQTHnxECT/0
rBz+02El/NAzc/hhg0vo6VNz+F2L5qjN+vGatfQQ2lS6o3L4TSPgF+GxOfT3
MfBz8Pk5/Jzh8PPwBTn8n2PhF+ALc/hTagBz77k5tMGp/k8p9lR6Oj95fWqK
7/C73AO5DZ7cxN6I+Uv93KXmCz0YvVU9Cr0ZPZ5eVU/q/Vizqq8713ynnupR
85n6696a77rXfGWNcWMKj8baw5qke81P6i9rlm41fz5f9ZZ6Tn2nvrI+UM+p
z9S3elDqW/Wd9YI1vXpO/ac+0yOaDD/chHd0Wo7axnvivTk+h9fnnHJujfYz
UtwT7401r7XvS014UXpK96XwpPSa/vNsaj7Wy9Ej0CtQT+p9WeNZ6+kh6OVM
qfnb/PxG1ec9a/5Wn+oh9avx3bh9Bu09+tcy1r1NzCm9Vue8c+3mElpIzan2
vLVEbWRNZG10S4nayJrA2kDNpDacMYeWuqmEVlXDqmW9PhNrvvJ6OWcn1Hji
9XKN6P26pg+omlBtuDBtkRJrQq/RNe1acQ2Nr/HKtTWhxL3zHqrNJ8GbNVHT
WdtNLKGV1eBq8etLaHU1vlp/dInayxrKWmpMidrHmszaTM27EPhXCi2sRvP6
zFG1220ltJs1p7Xn7SVqS2s2a7cb4TWa0Pxqf9e03rIxxbV+Q4laQE2vtr8D
3qWJGtVaNdXPX6xqH9eoXq0xxbXrGr2nzj/XrjFFL9YYZKwxBo6t8d/YaIy8
qOa/vjX+j6v50fhujLi3zu8RdX1PrvPT+boj728Hzw7fzdhe8NwprtHjOWpM
57v6zdrTGK2XbI1n7LZmfTxFDLKWVc/rjRnjtmlFzftYihhpLXxuiVrGmtTa
1Jis92KNaKxWg42q+Vhtpga7ta4/tZk5Re/fmG2uMebpZRtzjYXGyEk1Xg2p
69X4pR4dWtfzVTXfGc/MEVfW/OX6tkbVm7fGtXY1R+gFqREH1Hw8puY/8505
44qan80l5ozRNd+bS6x3rN3dX7E2P6/Etbams7YbVSKWGlP1Jt4qkcvNseba
N0t8l9+plni7hLY155v73ylxr73naiE1r1p3n6qF3y2R+9VMaqdpJbT0fzkf
/qDEtfgvh8Pvw9c2ofHUervW7zu8avH3Smg/NYXa4pMSc8k5ZSz91DXfRAw0
Fg6s33dirQ2mlNACajq13eMltJ6aUe34WAntqCZUGz5cQouqGdQOD5XQDuYs
c9eDJXKXGkOt8XoJraYGU4tNL3HvnQPmso1aoU8eTOEPfMz4HU3kHHPPhyVi
mzFOrfRRiVykRlerX15ibVjzWfu5Rryf36RYO5eWqM2t2azdtmjF2ngiRXze
vBVrwTXj2tmqFfn5qRT+0matyM+uGdfOhSVqLWsya7ONW1GfPJTC79mkFbnI
NepavaBE7WZNaW25ZSv0wJMp/KrzS+Rac6615qatWNvWaM7PrVuR+9UA+l/G
hHbmqhSxYnyJ/KBHolcyrkStb01mbXZRidrMmtHa8ZISud6cb615WYlaWQ9D
L0OPoGMTXqDewRUlcp850Fr2yhK5zxxo7XpdiVxvztfLubpE7WtNbG08tkSt
ao1qrXpNCe/RGtla+aoStbM1sbXxtfBSTXiUepVe04dqftdbuynHHv+0JrxB
PVS91P7e4xK/2d8+Hf6ixJ6D/s86TfiXF5cY+4T2Zf089YKe+TfONfjjJjx/
/Uc9EL2Qz2hfl/CUfbbDPQy9Zu/J1Ko3/D3Wg+Ymc5T1nh65z1q4p6F3rmfv
XnTvJrz8c3jtmyaeWfD79dx9VkU/0nrS+sL6x/rGekpPz3rKesh6Q8/Oteka
tV7R43MvyXpL70+P0Pry+CbqL/d4fNbDPQT3ftzTca/YPQT3etzzcO9Dj9u9
IPfE3BvTY5+nxB6JeyX6we4lOYedy64ZvVjrPetj61vrNfdA9I/1i9XP7gm5
N69f7F6Rz+z47I57TB1L7AnpJ+uHulfknrZaSE2kP+szQz475B5VhxL6XG1g
DjeX+0yNz9a4p9WpxBp2LbuG9I7dU/JZAfdAf6kazVjgmlS7uQej3t+zCd9N
T9NnJawZ9DqNUcYq17zeps/k+GxOP9dciT0F9/rdE3WvQQ/UZy+Mcf95o63Y
23EPwr0C9yx8dsg9M/cyfAbIZ4Hco+tSwnN079J6XC/SPQT3EvY25pXwYN0b
tF61XtYDdi9Uz1Jv2Hraetb61nrXPSKfzXCP170j/X21pJpSP///uqK9fg==

          "]], Polygon3DBox[CompressedData["
1:eJwt13e4FNUVAPB9uwuKgqiohKKIFCM1dEOVbmhKT2hGqpGmUiRSLFQVBBWB
KKBGignYgoAF0CAgSlPp3VA/FEFRMYqAv/PN++N8557fnDtvd3bm3nklew5u
NyidSqU+FnlEgWwqVQ50yUml/iJGqktmUqkbxfXG9R2bJC9RlzRupKeFeT8b
z2JH1AVFfraCvcy+U18hirJPWAvzX5Y/Z7vZRD1vi5tYY9aS/WJ8mh1XFxYl
2IdsNjuhvqAuJFazlayOfNh5i8fnFCWMG7L79f5d3y3sH+Ko+ipRgK10/Hl2
TF0oPiNbxd5kV8vVWB32lfEr7Hv11aI428BKxWcWN/hbDdSPZ5O/HZ+hmHFd
NkH+p/qMeVeKYuZ+yuexH9TXiOvZRlZV7xj5dbaM9dYzX/yovk7cwDY5/h9W
RK7NGrMzxjeae7s8gj0onla/qO+kcTbm61vreBH2u5jveG31OPmU+ks9l4pL
RGdWjBWNyCbXdrz8kvrb+G1FEedbz0vE94/v7Hg99UT5C3VH4+H6HtZXT30V
r8R6sD5xr7F1ognrwwaxCnE99bVlj7LHWS22QbRiA9kwVk39iWjB+rMhrIr6
U9GSDWBDWVX1etGM9WP3sUrqnaIHe5hNZE3Vlfzd4WwBe411YxXZMDafzROL
1TeLvmyG+jkxX/2x3qasr3qwuRXVlfmDbCF7nXVna0Vj1psNZOXVpfR1juvG
JojZ6tX8Nna3+m/6yqo3itZsEBvOqqs/zCTP47Fsch/G/fhBJvkdjmaTZzae
3ZLGd7JHzJ1k7q2sDLuLTWUzWXO2SbRhg+MeYjXUpfX9OZ55NpXVZ2tEI9aL
DWDl1GX1/ZVNY7NYM7YqkzwDR7LJPRL3yh+MR7BX9b2hrwfbJXqysWwya6He
IbqzMXFdWBN1oXguRWHnqBn3iPy5uoPxMH1j9NWNe01cKa5zvEZ8b3mu+ms9
aXGtvjV8M7tDvo+NYDXV14pr4hkxp5Zjj8kF1Pnj7xtXZaPlK0R5467m9jQ3
7XhBVoF1Y71YJj4Hq8i6s94syy4Xl8XfcaxafEe5oPqK+PvG1ePezH0uD5qX
R+SNNYFtYe0cH6Ie5Xy11XtE73hG2VOslbq83sHsRbaQdWQV2H3sJfYq68xu
YffE2s1eZG3Y71k/NpPNZa3ZbtEr1gs2hbVUbxfd4nqw8ayx+jPRng1lo1md
+M2crzK7i/VleVk5FhvPXLaAdWLbRFc2io1jjdRbRRc2ko1lDdVzxFfqVKyf
0keOn4/rLzdgzdixeJbZz7HviFLsC/Yt+yZ3nYv17h2f42Jcd8eaqlvrO2mc
wwvLzdkd7LTxAX0D5afYDNYh1nDxa6zhsT6LFebtZffqe1L9rL626v1iAJsS
6wZrH2uuGMKmszmsa/ze4gH2bKwFrEsmWdubs3tiPRAn1Pt4fzZZPV1fu9y1
pFM6Wf9jHziZjRvOc8CaqdsoT8U1Ys/IS9jbcR1s/Mszyb24L5vch3E/Lssk
9/vebHK/xn27VFRh7czr4nz51EfEY7FHxhrJ7lX/Ev2sAqsoVsezKMamk7U0
1tQL2WSNHZpO1tJYU8+qvzf3J+ObRWXn2+z4GXZWXVZUYlvYW/FMytVZXfZ1
rIXsSXlxfDf2QHwO5yzLOrEe7EI6Wcf7pJM1N9beb9UX4plkTdSt9H1jfCkv
JbdnXdmv6eS75ZfrxvtB7D96zrECrJ66ib4jxpfEGizfGXsq+ymdvF/dEu9A
rKXYrs4rSrA71J30nTX+NdYDuT5ryo4a/8guxPcXNdh2dpZdjOskarId6eSe
PJ973eP6D3D+tCiaTj5vfO5P1Yf1jWJz4vcwt1dcd5GH1WD12AHj4+x5+X32
EXtU/T/xEHuBvcLuVh8SI9ns2C9Zz0zyd4ulk+8a33mEOhPvaayVur2+7+M8
meT9Jt5zFqlPqLPxPmXcmnVw7Afjy1gZuSPrzs4b54n9RW7DOrIfjX82/xK5
FmvADhr/n+WVa7L6bL9xPnNLyx1YN3bOOH/s83Jndhe7GPupuU/Ii9gSdr/6
9njHYlvYTjaezYjroL5cXMbec7yKvtHya2wp66Nnkciw0vEbsb3GtfVNllew
NWyonsVxHViZ+D3ZvvgN9U2RV7K1bEjs+Wwq+yAneZcfzt7JJHvJ/myyH8a+
GM/+s+yjeCbjGYl3ejGNfaheb+6DsW+zp9gqto4NY39kk9g77AM2iP1L5LCb
WDm22/g7dlpdIp5Xto69HnueXJ5VZ4fjerB8cjlWjR2K9wJ2Tl1clGHb2Bvx
2eWqrDY7YfzvuLfkUqw822P8XiZ5LziYTfbw2MvfzSTvAAeyybtDvEMsjPXJ
vGKitLlbc/eFU7lreKzlPfWvyCTvyIeyybtwvBO/n0neC76MddW4cFxj40fY
m7GfOF+/WEvZw/HZ2XLWl93GprM1bAN7iLVkr7CtbA+bxFqxeWwb28seZ63Z
fLad7WNPxJobe6bxC7Heibbx28ZeoydH5HVsWaxnfJa8nm1hY/Q0ZbPZxpzk
HHGuP8U7PvuM7WITWDM2h22KtYqNZc3jfYptZjvYONaIzWDr2CY2ik0XB9SZ
2G/Z8nhG9S2Qd7D97Ek9z4h96oup5H/QpY7fqm+ivJyvYgMzyf4xLp3sWbF3
vRXvgWI8Wxp7r77+8fuwCWwZW8kGsOdizVLni2DvOt5Q33PyWraRjdTTmM1k
H7PNbDR7WuxVn0+209Tbjs9kh1mBeNbZ+2wa26M+F+9+Ykms6SYslHfyA2yy
A3eyV9kudpBNYf/NJP9DHo/1yLiM+A0hPNI8
          "]]}],
       Lighting->{{"Ambient", 
          RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
         "Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{0, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}}, {
     {GrayLevel[0], Line3DBox[CompressedData["
1:eJwt0jkvBVEYgOGxr9cS0RINUVCKglIUVCIKOqKgIBEFpULodPwCWiL0Ejr7
cu1rRMTW2NfwnETxznMy92TmO5lb0t7b1JMQRdGwXhXWj7rUbGIU5XGBxVxn
JU9Zywc28pttzE6Kopi6rcs5yGqOsp4TbOEUOznPfi7xntd817aewz0tG2iH
K4xzlbtc416Yifvc4AE3uaXD8BwecYfHjPOEuzzlHs+4z3NOO8cNP3Shl3BG
jZlti0NcZB/n2MFJNnOcdRxhFQdYxlJ1WWewlZ/e0cA71vCYFeFcLOKtfVd8
U66ewl4VmjGHBYwxn9lhD7MYYyazmBHex3SmMkVp1klMDd843OOvkvUTftOX
jBHNuNz+/x/+AMQfSu8=
       "]]}, 
     {GrayLevel[0.2], 
      Line3DBox[{690, 1000, 473, 689, 1106, 912, 691, 1107, 913, 692, 1108, 
       914, 693, 1109, 915, 694, 1110, 916, 695, 1111, 1006, 1206, 696, 1112, 
       917, 697, 1113, 918, 698, 1114, 919, 699, 1115, 920, 700, 1116, 921, 
       701, 1117, 922, 702, 1308, 1001, 923, 1002}], 
      Line3DBox[{704, 1007, 1207, 703, 488, 705, 1118, 924, 706, 1119, 925, 
       707, 1120, 926, 708, 1121, 927, 709, 1122, 1008, 1208, 710, 1009, 1209,
        711, 1123, 928, 712, 1124, 929, 713, 1125, 930, 714, 1126, 931, 715, 
       1127, 932, 716, 1128, 933, 717}], 
      Line3DBox[{719, 1010, 1210, 718, 1011, 1211, 720, 504, 721, 1129, 934, 
       722, 1130, 935, 723, 1131, 936, 724, 1132, 1012, 1212, 725, 1013, 1213,
        726, 1014, 1214, 727, 512, 728, 1133, 937, 729, 1134, 938, 730, 1135, 
       939, 731, 1136, 940, 732}], 
      Line3DBox[{734, 1015, 1215, 733, 1016, 1216, 735, 1017, 1217, 736, 520, 
       737, 1137, 941, 738, 1138, 942, 739, 1139, 1018, 1218, 740, 1019, 1219,
        741, 1020, 1220, 742, 1021, 1221, 743, 528, 744, 1140, 943, 745, 1141,
        944, 746, 1142, 945, 747}], 
      Line3DBox[{749, 1022, 1222, 748, 1023, 1223, 750, 1024, 1224, 751, 1025,
        1225, 752, 536, 753, 1143, 946, 754, 1144, 1026, 1226, 755, 1027, 
       1227, 756, 1028, 1228, 757, 1029, 1229, 758, 1030, 1230, 759, 1031, 
       1231, 760, 1145, 947, 761, 1146, 948, 762}], 
      Line3DBox[{764, 1032, 1232, 763, 1033, 1233, 765, 1034, 1234, 766, 1035,
        1235, 767, 1036, 1236, 768, 552, 769, 1147, 1037, 1237, 770, 1038, 
       1238, 771, 1039, 1239, 772, 1040, 1240, 773, 1041, 1241, 774, 1042, 
       1242, 775, 560, 776, 1148, 949, 777}], 
      Line3DBox[{781, 1149, 950, 779, 1150, 951, 783, 1151, 952, 785, 1152, 
       953, 787, 1153, 954, 789, 1154, 955, 791, 1155, 569, 793, 1156, 956, 
       795, 1157, 957, 797, 1158, 958, 799, 1159, 959, 801, 1160, 960, 803, 
       1161, 961, 805, 1163, 963, 807}], 
      Line3DBox[{806, 962, 1162, 804, 1255, 1054, 802, 1254, 1053, 800, 1253, 
       1052, 798, 1252, 1051, 796, 1251, 1050, 794, 1250, 1049, 792, 1249, 
       568, 790, 1248, 1048, 788, 1247, 1047, 786, 1246, 1046, 784, 1245, 
       1045, 782, 1244, 1044, 778, 1243, 1043, 780}], 
      Line3DBox[{809, 1055, 1256, 808, 1164, 964, 810, 1165, 965, 811, 1166, 
       966, 812, 1167, 967, 813, 1168, 968, 814, 1169, 1056, 1257, 815, 585, 
       816, 1170, 969, 817, 1171, 970, 818, 1172, 971, 819, 1173, 972, 820, 
       1174, 973, 821, 1175, 974, 822}], 
      Line3DBox[{824, 1057, 1258, 823, 1058, 1259, 825, 1176, 975, 826, 1177, 
       976, 827, 1178, 977, 828, 1179, 978, 829, 1180, 1059, 1260, 830, 1060, 
       1261, 831, 601, 832, 1181, 979, 833, 1182, 980, 834, 1183, 981, 835, 
       1184, 982, 836, 1185, 983, 837}], 
      Line3DBox[{839, 1061, 1262, 838, 1062, 1263, 840, 609, 841, 1186, 984, 
       842, 1187, 985, 843, 1188, 986, 844, 1189, 1063, 1264, 845, 1064, 1265,
        846, 1065, 1266, 847, 617, 848, 1190, 987, 849, 1191, 988, 850, 1192, 
       989, 851, 1193, 990, 852}], 
      Line3DBox[{854, 1066, 1267, 853, 1067, 1268, 855, 1068, 1269, 856, 625, 
       857, 1194, 991, 858, 1195, 992, 859, 1196, 1069, 1270, 860, 1070, 1271,
        861, 1071, 1272, 862, 1072, 1273, 863, 633, 864, 1197, 993, 865, 1198,
        994, 866, 1199, 995, 867}], 
      Line3DBox[{869, 1073, 1274, 868, 1074, 1275, 870, 1075, 1276, 871, 1076,
        1277, 872, 641, 873, 1200, 996, 874, 1201, 1077, 1278, 875, 1078, 
       1279, 876, 1079, 1280, 877, 1080, 1281, 878, 1081, 1282, 879, 649, 880,
        1202, 997, 881, 1203, 998, 882}], 
      Line3DBox[{884, 1082, 1283, 883, 1083, 1284, 885, 1084, 1285, 886, 1085,
        1286, 887, 1086, 1287, 888, 657, 889, 1204, 1087, 1288, 890, 1088, 
       1289, 891, 1089, 1290, 892, 1090, 1291, 893, 1091, 1292, 894, 1092, 
       1293, 895, 665, 896, 1205, 999, 897}], 
      Line3DBox[{911, 1005, 685, 910, 1307, 1104, 909, 1306, 1103, 908, 1305, 
       1102, 907, 1304, 1101, 906, 1303, 1100, 905, 1302, 1099, 904, 1301, 
       1300, 1098, 903, 1299, 1097, 902, 1298, 1096, 901, 1297, 1095, 900, 
       1296, 1094, 899, 1295, 1093, 898, 1105, 1294, 1003, 1004}]}, 
     {GrayLevel[0.2], 
      Line3DBox[{251, 474, 1106, 252, 488, 280, 1211, 503, 295, 1216, 518, 
       310, 1223, 533, 325, 1233, 548, 340, 1244, 563, 1150, 355, 578, 1164, 
       370, 1259, 593, 385, 1263, 608, 400, 1268, 623, 415, 1275, 638, 430, 
       1284, 653, 445, 1295, 668, 460}], 
      Line3DBox[{253, 475, 1107, 254, 489, 1118, 281, 504, 296, 1217, 519, 
       311, 1224, 534, 326, 1234, 549, 341, 1245, 564, 1151, 356, 579, 1165, 
       371, 594, 1176, 386, 609, 401, 1269, 624, 416, 1276, 639, 431, 1285, 
       654, 446, 1296, 669, 461}], 
      Line3DBox[{255, 476, 1108, 256, 490, 1119, 282, 505, 1129, 297, 520, 
       312, 1225, 535, 327, 1235, 550, 342, 1246, 565, 1152, 357, 580, 1166, 
       372, 595, 1177, 387, 610, 1186, 402, 625, 417, 1277, 640, 432, 1286, 
       655, 447, 1297, 670, 462}], 
      Line3DBox[{257, 477, 1109, 258, 491, 1120, 283, 506, 1130, 298, 521, 
       1137, 313, 536, 328, 1236, 551, 343, 1247, 566, 1153, 358, 581, 1167, 
       373, 596, 1178, 388, 611, 1187, 403, 626, 1194, 418, 641, 433, 1287, 
       656, 448, 1298, 671, 463}], 
      Line3DBox[{259, 478, 1110, 260, 492, 1121, 284, 507, 1131, 299, 522, 
       1138, 314, 537, 1143, 329, 552, 344, 1248, 567, 1154, 359, 582, 1168, 
       374, 597, 1179, 389, 612, 1188, 404, 627, 1195, 419, 642, 1200, 434, 
       657, 449, 1299, 672, 464}], 
      Line3DBox[{261, 479, 1111, 263, 493, 1122, 285, 508, 1132, 300, 523, 
       1139, 315, 538, 1144, 330, 553, 1147, 345, 568, 1155, 360, 583, 1169, 
       375, 598, 1180, 390, 613, 1189, 405, 628, 1196, 420, 643, 1201, 435, 
       658, 1204, 450, 1300, 673, 465}], 
      Line3DBox[{265, 481, 1112, 266, 1209, 495, 287, 1213, 510, 302, 1219, 
       525, 317, 1227, 540, 332, 1238, 555, 347, 1250, 570, 1156, 362, 585, 
       377, 1261, 600, 392, 1265, 615, 407, 1271, 630, 422, 1279, 645, 437, 
       1289, 660, 452, 1302, 675, 467}], 
      Line3DBox[{267, 482, 1113, 268, 496, 1123, 288, 1214, 511, 303, 1220, 
       526, 318, 1228, 541, 333, 1239, 556, 348, 1251, 571, 1157, 363, 586, 
       1170, 378, 601, 393, 1266, 616, 408, 1272, 631, 423, 1280, 646, 438, 
       1290, 661, 453, 1303, 676, 468}], 
      Line3DBox[{269, 483, 1114, 270, 497, 1124, 289, 512, 304, 1221, 527, 
       319, 1229, 542, 334, 1240, 557, 349, 1252, 572, 1158, 364, 587, 1171, 
       379, 602, 1181, 394, 617, 409, 1273, 632, 424, 1281, 647, 439, 1291, 
       662, 454, 1304, 677, 469}], 
      Line3DBox[{271, 484, 1115, 272, 498, 1125, 290, 513, 1133, 305, 528, 
       320, 1230, 543, 335, 1241, 558, 350, 1253, 573, 1159, 365, 588, 1172, 
       380, 603, 1182, 395, 618, 1190, 410, 633, 425, 1282, 648, 440, 1292, 
       663, 455, 1305, 678, 470}], 
      Line3DBox[{273, 485, 1116, 274, 499, 1126, 291, 514, 1134, 306, 529, 
       1140, 321, 1231, 544, 336, 1242, 559, 351, 1254, 574, 1160, 366, 589, 
       1173, 381, 604, 1183, 396, 619, 1191, 411, 634, 1197, 426, 649, 441, 
       1293, 664, 456, 1306, 679, 471}], 
      Line3DBox[{275, 486, 1117, 276, 500, 1127, 292, 515, 1135, 307, 530, 
       1141, 322, 545, 1145, 337, 560, 352, 1255, 575, 1161, 367, 590, 1174, 
       382, 605, 1184, 397, 620, 1192, 412, 635, 1198, 427, 650, 1202, 442, 
       665, 457, 1307, 680, 472}], 
      Line3DBox[{277, 682, 1308, 683, 278, 501, 1128, 293, 516, 1136, 308, 
       531, 1142, 323, 546, 1146, 338, 561, 1148, 353, 576, 1162, 1163, 368, 
       591, 1175, 383, 606, 1185, 398, 621, 1193, 413, 636, 1199, 428, 651, 
       1203, 443, 666, 1205, 458, 685, 686, 687}], 
      Line3DBox[{459, 667, 684, 1294, 444, 652, 1283, 429, 637, 1274, 414, 
       622, 1267, 399, 607, 1262, 384, 592, 1258, 369, 577, 1256, 354, 1149, 
       562, 1243, 339, 547, 1232, 324, 532, 1222, 309, 517, 1215, 294, 502, 
       1210, 279, 487, 1207, 250, 473, 681, 688}], 
      Line3DBox[{466, 674, 1301, 451, 659, 1288, 436, 644, 1278, 421, 629, 
       1270, 406, 614, 1264, 391, 599, 1260, 376, 584, 1257, 361, 569, 1249, 
       346, 554, 1237, 331, 539, 1226, 316, 524, 1218, 301, 509, 1212, 286, 
       494, 1208, 264, 480, 1206, 262}]}, {}, {}}},
   VertexNormals->CompressedData["
1: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
    "]],
  Axes->True,
  AxesLabel->{None, None, None},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGridsStyle->Automatic,
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], "RotationControl" -> "Globe"},
  PlotRange->{{-1, 1}, {-1, 1}, {-0.8584892153739929, 0.8419820666313171}},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], 
    Scaled[0.02]},
  Ticks->{Automatic, Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.692647069437653*^9, 3.692647106026314*^9, 
  3.6929043683418283`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ContourPlot", "[", 
  RowBox[{
   RowBox[{"trained", "[", 
    RowBox[{"{", 
     RowBox[{"x", ",", "y"}], "}"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", "\n", "\t", 
   RowBox[{"ColorFunction", "\[Rule]", "\"\<Rainbow\>\""}], ",", " ", 
   RowBox[{"PlotLegends", "\[Rule]", "Automatic"}]}], "]"}]], "Code",
 CellChangeTimes->{{3.692647120967214*^9, 3.692647175681081*^9}}],

Cell[BoxData[
 TemplateBox[{GraphicsBox[
    GraphicsComplexBox[CompressedData["
1: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
tJGdo36Z4vhG000k4H+PBLsOXip7rw26PvZz8hjnJhX0cenp9izHrxX8inOv
3w8kGcL8waXk7Eq2f5ncd5D0KtelmGSWCOsApQMZ6j+PFvKbTfKUx+9PEPxt
7UUFnxWz5N9f+0arHWs3S/b++nrr1xHRh3L45sveMydvln8nbKenbW41PZNX
bXrMY80K5d4tN/7nwKYYswRhPT5S28/0lkhNiEMufZurBS6WndPdWmbyqEg5
QeCz9Yv0kHGLM4R+Lze+3l4jLY0d3t299L0oW+799cYtgSvGW+exbVZKZaou
JXLvsQ1fzQptNKiADfds03nmZNk+RYylWfMthgkC1s9f++hML9n7rW/5kkcq
ASK599Ld0mJvFZ6qZO3GvFYIyJDJZdCJ+O+6H2TvfrUCH9y9tUzCo2N/6yVf
krKU+Ouaipqy7/2hn1uvho+12iFhY4x/5nuEZ/KXzR1spO4SPiz/TZfvx2vs
xfzZjSOek/i/LTt1fDJdxHL89O7r5MSzbxabQocbVbKwixWTOmjW+OPztgbL
zBKY59Zbr4c3FbFglRahK0xMue2ZvKtV6mXstdeBn1PzM9iGyqvGnX5KWJrL
iBFaI0RMueP8TdHzZO9svifc6TNVT/ae9MXikcG33kiYr7h4+OvJlXLvVxW2
PVj1UFXKyhwujHPbLf+e9UNR9isVn0rW5oa/oZWmiHf3lSblLZby7v8u/rA6
JoP7XtjgnnZLyk/xYRK7ifk8rDlv/yBWxKsj2zpMjc7n4f7R0we3E3Hl6IHz
tNTi+c7nESe+xol4bpceup9M43nD+Gv6ZvtEfNYDq5L0FyKuYp/ywmtUPg80
T2sYNl/EFVs1uhe8P5/POlf9/tpqKXf8aMxbTsrgq8suXFSTSnjF6ZMOzX9m
8L1trrcYFZUupJ4tnZf+ihRxPZND6Xqq8Xz6gZ/zJB4i/s8lx7FZc+O5T5Wh
Q+9ZO1kb39jLSQbPuYv3p8i90zXZ1O6dutmZ3+Ev3ztJmnatWd9adrdJbGvN
uq18fTjEP4qbdlk4LN11Kavc2WB/hmEB81pnn5+YasD2jzsy91tAAds+I711
bMMkFnzZUzH7qZjtO3Fbr5FiFtPp5PBs99gkZt3LePA/vCaedoxr9+jcDLbN
LNfieH4xe9Gu9dt+K7LYnMJQI7tiMWv8Lazlo8pipqprOLKBq5gdNlrUSfGX
Lm95wWpRtZWYH++y5GDat3SWe2tDquI0KW/vtyxg3cMMllDMm/9qX8mHPI0w
XsGy2N6Qnr3cU2rWfd/OrU2LLWbHdUcf72cm5go9fqzdqmjHkq31R++oLuZ9
J7o6Tx23nAUmiFSqO5fxcaG9fNt7xLNDmnoTi36K+NPOs/JuqyYwj/gjzrv6
i3hMzBytJzPy2ecueSaNM0XcXKnP66bWYqb77tCFsJRiHrujoGNQyyR2L6Hz
/LJrBXyv0ijjHuaF7EBtylNWfFX8triA5bUpDHDaVcQtdnu3WLCviM0rn3Gz
24ICfi3Qb+KCTBE7YNa2W+uZ+Xx897LP3eZmMFab8iufTec5i8XMWf2fiCnW
Wfyt4Uu/hpulzGHxl16hyzN47l0rPfN4CfvapOWwa1qy77O3dJ+7+MX3dN69
8tQ751MF7OrD8m6pZYncZkHzw5WfRKzhJ39tle3xXLH6dcffmiL25G3u3Uff
4rlDr+p5fVeIeVGOukRx+HLeQ8s9uESljGsd0R474boaD1+t38yzoCY+9i8N
n7xXn42SvOvVLl3EnZW1TVZPjWcjFlU/iFgj4jua77RX9opnQxoqnNXfW8BD
ch8EOD1PZAYDZtpMblZj379/39Lcns7avHcP0tlTyX3cw5dUJKYzvVnFP89c
EvNr2SZ9XTMz2cWsCXtXKmbwM7WpMC7tnax3qHp0OvOJ+rbS9LmIr921mnUd
mc+uX3o/0EhfxFtFlHn18sxnG9y1Yt0XFPJ1tSlL0T67ZHd0Ig++/eFz0sEC
9jmwy2djLTGPMdsT3/FqMTt4ZKiFmn6NX2aEuW3LETGD4rSi4KEF3Gp/w8TQ
W0Vso9+aPJ+t8fzS0MrsQTVynK8nWta9PJ6Ha7zksZNF7GCm9rJyUTEPHJCw
c8xmMVPf2flk4/As3ujM5MfLu1WwPSeChzVtlsVP2XZ+NcZGwkyapT1t8rCI
v50csmpKppR1HGk77aE0g/cI3TFWoWbd/O3t2bmiNGF/lnXRO/Al55j8e97m
avvEiz9J2fUoi7NhVyWMVd0cUfBeypK/5pkoOUqYVe8h73WfSLm9o8f4+Hwp
S5+jF3DdR8Ly/YYGp66Tcv3tBb3vqkrY2WXOukteSFmr8erB6lskfJBulZX9
Z9l305AO3NGqq1JFGtNbvO3GTl+pbN+9pf0d6xay71gOPeo7sIdizfw0UVfH
6byEDzhdld9rrkh23yZ/RIhuvog9mNtyXXCo7H3u0jKXloYbIoVxa+qY8EXX
FGXtznQ9MkG7XPadvpWHAkaM1hexbj2zNuYfrmTda1N+v3Hw0+tLK/m92pQp
TYxuempEJbOKrZo7dL6UfZ958emFrpVy72/Tw+KczLtLuWnipFEdnlbyaxbm
Wy4VSPnChLt2q/rJvv+35t/Z39Kta+bhXpveNOdSgV7pdY+QzbYiPsrki9eW
PWJm+npeg+svi3nE1tYuAyMrWOc2oyMeVor4tCmB/bi3lH8L72J+91GEcI64
auyeE70bnGBrRwXNjmPP2CG/VPXAWV6s+6Mv1VaF99m4s3bDlRMPseoAk4u+
28Ts+I7yyn0xxUy5dx+Xxs8qmN2tKREnikTMqt+AHuXOEh4R2//w+wORfKHS
1wMONfFiwnUrG8tmNeuJkd4P9gyeztQVstwSesjey8a8UFDbmFrMqh9ERrgN
rmQ3B1x2+dJYxLrm7Vg36Vw0H9jgg0vaYzFLCDl3fAKv4Nw68EfpARF7Vf7c
zdOtgrdyLk7od1P2DnXT7CJffZdittX2qobitgq597TtXD91ra6Zv6oeW/I6
67RsnMf72isGfQNnj5WyDr0Hdu+RVmMft2aa3/hRyd7P2qtpeC6Tbwp40Us1
TravXzFy3OyhGpXcIf76mPPKsve1ZVcsb2rcjGL9P4rnnnQW80WdLh3oMq2I
jY1qvyrmrpSP0/MOPGKSx6ru2Jv91izhvwdNf/b6TJ7cPaQ1F1vn72pXzAc9
V3VMSSxhYaJ1jb/3LOcNvVpVzLwpey87qvPdtLN9ypl/lfW0zSklwjkjT+Wn
Eu+V8FZL7HaafZLy0f6/LgbuK+K3Z1m/j6xZP0x3uLNb+n++01PxqkmDsKNF
fM56BR8NC9n3HDaUWq5+VTMvLAnv/c6vZl38/YSz54qjsu/2QM6ORgfLvSzy
ufLutus7TSxh6zqPCb1sKlvHGDfe3nHAuTzu3PXnzRJF2XvXVo52mztsFvML
F63mDjwp+57eeZXC9ftORfCBgRWG58+KWZc91rcXD47mmbErHH4vFvO4LuOG
pveIYpf63rs+73wR6/DDpvuIhQUsYfPNpPAg2ToJ9K0LHau6ZW0+m/udHTIa
Vs7CUr58G1YouzfeYPqULhMiS5j1lKgHDlek7NCh5ZmPNIvY5jsTJrxxj2LP
x5p91NogZm3H/Nu7tH8Ub9XnoqG+RMqO+Fi+9+kjWzcH7tLr7t3ORogjE5pa
pjQ+Z81tNuRZTfKV8N1HY/et/f98dzlg/IiuDjVpaea1sGmROcLvF79pWfYb
lMu7t9P90f9RKf9h3ebHukcxwvpnx4wFk3R2xLLcm4FVDqalXP3R/MYLFeOY
YmUn184vS4R2vty7M2nzphzumq/XdFODd7Lvgg5w62F0+x1XeXhjZeG7HGEd
mFC0yNvscY5Qrofz9B4Hm70T1hU/Cv3Gez15J/BpXnmo+qaKveyd0psdp9Ry
NwrtuYR/+bqgwF6IX6OOXdnb7pKzQN9Wi8b7eYMY4Xz9xO9Vnzd3imFJI/U0
jq+R9WuacGhsiV4yX5lywcjsVx4ztTqyJPBqqdDPp4PSiRdTS/iuWxpxb/qW
s4z3DfY0UsgV8hW03FfrTM/hMz6bdP6gUM48nNM+fq/K5r6fl7xTtyxnR2et
ul9xX0aH+GvW3aGaMSzaXGenw8ky9sgwXDXsXBRbYdhtxgYzMfPysY0/895F
9r0B3ZuXeu1x5Y5eM/PEP/7POsepdWP/3ZU8sOKzg6qeVEgf2Vb3OpNUE+fT
E5Oa36rkr9wy47a4S7kfm3l91LdKXqwZ1Lr6iuy9JN5PLt4wN6h/dCVXa3/O
0NRpM88LN2Fd46Q8OzR7TP4ZGz74cbnBpoQae1tkZOTYMVIYDy/6z95Z/eMt
+7S1WjV+pZSfiex2fF2nUj5cajboxPJy/lr80CHAoJyrv1mT7dKklDec/9l2
QGQ2X2Zq1T5iXjnXcnDbru4UI+hN82P62c+DovmbKx2GDmJi/rz9RvWGJ2O5
w57eh58FlHALhS5z4hOi2OZLjXYG/yPm+wek9Cq+mCPY752uSxZ+sM1mDk2/
9j61ppxXR4//dfRkNlvieyDDRbOcm1Y69z92eYOwjq360jp950EHxk0bji98
UjPfvj96fi97J+Z9Q2O58pMibnf5QhfdoC2scPXGLq7bC/iM+R3tln/ayJz7
h1ibWhTxT+du//zqWs6Di0Un1PSy+UbxoEGrRpZzTWunk8a7s7mC/vMmb38n
8lzFw2mJknw+ccfxnaoKyfzdsMtfXDPz+No3vz92v7JT2G/bM/LZo01l29mY
S6n+Ru1q5nGjpLYDXzuzVTmpsw5NyOOJXWaEzTJ0YaerF43WrMrkv+bcm+f5
zoV5LbfZO39LLle5qXF/m+id0N7G+IXBfQ8mMz8D3d2XVfN5fPDD+eaeyUx5
2sM8JeV8HrTPt1FLcT5faep3a0mTJJ6xLWRB9+w8Pr3X00mLGiXzXqUNsmL1
dwn7XEr7NWyNT+1i/h86fhXXzPP8nGacuNLcla28ffjjnZWpXEF1fuMvWS4s
I8xWt3V8Im+YODzB9M5upvLbKDhjkuy9ebZHVGG7ETH8wX6r91UmYr5t/a7d
sVej+LWuu6aGnCnhl02adyhbE8vjT5vZBbRzFe43nNvuOXXU993s5tUBirOv
JfDWi/Zaqr3awS7lX1iTt/K/8+dhEftq9OO/x/vtW4Vwvn3O0bQoxd2s0a6i
3oETIwW/naOxvHt5aQwflvr2vPnLEvbKWHnnwfZx/NuhGzOthojZChPH/u+3
RvOYO3tHqCRK+brTKmGlFRv5B99uOeOTJXzMvhdma43t+fztLzoYTH7BjSZe
6PFryUg+5sA+k47ad/mIYzf2p/uu4b9MY4Kui4uZ1+yP76snmfJ5X3v0XNu0
jAV/PtViRP81fIxKy9OVp8TMJWi8QW7PjXz906V5FdskzNi5bdC0Tc7C/qvO
s4uRXdxM2MUj9gf+uxfwbPbah/cvzWWKWS3WPfcr4n3jB0p9qoyZza2Lyg2W
F/C1yQeXHslaySzTW1wYUbOO6/vUwW13D1PBLnTuJd/MjLBihm9tP5eqFXAv
XePssxMsmYmRSOGfrnk8eMl/f6xmzwIu2c87n8kN12zqGRFjxdSfXBk0PSqX
K1j2H2ZnbCPYRV6md/KApjZsq8+ms+/UM7nOqHbbzq+1Y5NmOkUfbZXKTbl9
dMuOVmzQu1EeFo6J3Gta2sef5y1Y5xZHW3zzT+GmhmqXFmrZMee5g8Js/c8I
97AuJ325Y+17kvU4lvywMvAp2/MxfJx02TG2vt+/K/qaPpTd59/dYc8vhV3s
9IjTQ1X3hjNXP8Xjms92s25G1WFOnSOZ6jLL1H579rJB69Rn74xIYLfThr0y
KtvJ+s+/fOCFRTQrdev4ZkP+DmF/9mX24M7BOzewxL6qQ5RvJLLmirw6gG9m
515fH7JvWwrr+7KsVeG3Teyf2KkNxKqZLKqP1sEvauvYGFPfdsMGp7IB57eP
OuGwXtg/Ddww62V06UqWu0yhsvOVTNZw17yZB27ZsYhtnrZhybnsTFddjVkX
VrE5LW51U9cpYGzXOPWPeUZsV3+9AosOeSzQ9b8/zIW4u8++4ckOdhEsZujh
lpxJeWNL/yZ37d6yG4tmLHh6UMy9xzT65PMtkrmPG+fxZqCXIKePiz/varrS
iwXHXTHfu+Alu3DptTvf6s3GF3wqM1GKYBLH7AuarT3ZRw2tVy8ME9iGwxaP
hp85xO78/vjAenwMUy8eV2R7pYSl+GR63fKNFdYzkUs3N2m5MIKV6e25df2w
mHls7eheKIlkrg9Lyw9qSVnGMcX9BYveCvZ3ecWa7kvWv2NblSes6no0n4er
rKrQvp/E1mn7XX39M4/bXThQeHtqMtMY/Nh9eAM3QS+S/SbqjdkBltCt4m6v
jklsq+H+oRoLD7IhY3Z+ftI8hQ1NGKkQXrqXzdSwC1/7NIOd6f28xZYfe9nF
jYN3GrmnCvpInxyiotM+hcWvP/b4nmo+U2vt2MTjtOy9p/4Tm+Dtw3KYk7vK
sD555fxKmx+axW5Z7FWShZ16m3Iep1nZ77t2NmvTWcXzUDsXod3trQ/e1T+y
i7FmLSdPbpjFyq+e77nBwpXdbqi8KMspl+kMXHnYUW0Lm2oy4ibvUsDeqq+N
rQh1ZjZ5Z9O3TMhjDxeGdx86RfZ9fa1dis1NXySz5KDCEN+JsvuCYrVz4U92
5bCxZU+7aJwpZ0rzoizudchmRjH3DRsNLmfSYV7lPhuzmWJ6ZNzyvbbCvnhA
ws++oQEb2Ni+7i3XOhWwf0833a4dZM/26nYpPu1UxF4uPtdxkpc+67XvxJWZ
ycXscFaaf5anNWvQf2yD9OtFzGi+n7h6ZKwQR4Mv2qp+GR3HS0p7HHSOLmFH
7p/fc7FFDB8+vt/tJ03FbG+jS6bh/eJYnsLgtLVvS5hBbo+jAXk5Ah+9ii7f
tgrLZqWqk9Vt9cvZy83J/h8LS4X8ATZjJs90LGFWIZ2NMlNq5tkzh99vVFnC
5q7ZOF11fDnT8l3RUhQp+56+xeH8ZaM/OvH3WwZq+54Us1Ht3nbqud2Fj36y
soHYScJuPN0qehURIdjtIfchjW5fe8tGjJUe+GUgZcerSiY3m1LMZ5uEf3VS
kn0PzLHfj1vpYyr560WPHZp9ieKdz7soRHnKzrmWnti49dGjCr7+pW/FJmfZ
e0v/hildrnTfIqxDnCy09kqzI4V7sOtKtR8NP5YlrDu9Ve1v3AuSf29pprjZ
9UavEt5x+692fRbI7q2vaR2mqL4sjw/Y6vPmwrgS4T5e26FtW1t+FHG3Yc/m
Z2bnyr23POLz6JCJWs18x7Gnl3eovdx7S+0WT6OPNRPx3GUqvXfpJvCoIoXy
6rZF3M3S+5rrhG3Cem1/tJHHWOsk2fvKbpGKrolSNs3MeGxkzfwI6+J9o26X
JiXJ3k+WeXxY0tIji7deP1Thtm8pd3veZs2kDzm8Q3x224uWrnLvJ28/njTp
SX6ucJ6as32Juu7VRG6174VH3/QcrvTJV8/j3jtuLj2WJzXYJfd+MufNla1K
vyJ51pTmDxbu3Crcp5xYrLzZ9Kv8vd70mLPd3C7I3lOuHz9g+f1qFf59+gG/
VxVB/GKTAYptT+zjzZ59T549eK9wrx/r0+CfrQcf32DK/VtU/GPpUcQU2vwY
7dyFyd5TvvtZvc1TjVUkxA2YrVvGvK6w65mP7IX9jGHHUvN1227kLcwaX7/2
QcLs4l5cVipx5lrvWhreWXVU7r3kJ51KpRP/RrFhfk7uK0rchfPMTF425sQ+
2ftIzZyF/TdPLGKhBomHd/kmCPfazc5Pa5U5N5FtTO9y9MKmMuadNK7Rp8fR
zOz11k7R/fcI52jukQtLXVZLWJfjN+MbxGWw0IlTvZw9ZO8dIT+NpZdGx9lk
sq1Lk5q2mr9JWD+PeX13aOCNJLn3j9PKK/uds8ln6modTv7QKGE7Xo7L81ie
J9zL/m7S/132q1y2qpWHmG+Rfb/y8wDlbQ9r1h1d19w/r/ClkPlau9y5NV32
nhH2vDBjWag1K2Krbg8zWNawJn4fKnwy7rHsnVy/k7f2558qZRHTRXZzQ2Tv
G0dN0na/b5fHCwK76yrPkJ2Lv8nuFba9cynrdme1b1JL2fvGk29+7AtrJnvf
KLx3DMq9oVRRzJpoLEhftm2WcM671uXJbHWTAtYwoHHO4iuyd5zOMzcG9tha
KMRBoylG5qvySlmLTa4vtNqUy92Pb/r5S/BE/yJW8NkzZfulSEEPY4tOXW0X
niXct8M9X8sFp76mzi9ng0ZMn930Z7Hce8dHS1ZrpSRXsqcPj02+YCt7/9j5
4bQF7rZF7KP9vVG66VL2rN/gHRNKZO8Z3/S46z2kdSazPLxkZud9Eh73pTDI
6r7s/WLGzRu+nVNk7xWVVq3MV31UKveuVPGef+7VMtn7xS7nQh4aPy7ls3dq
vNKokr1nDGv0XVfhUQIL0xD/eDCziK9PKShSspK9X1z4q/q1s145U/DslHr4
luye4vm5i9d7vM7iaya+9A6/ImEFm90G7p+bWbNuPxKr2TGfJbWzH+njIHtf
mFumlueukcS/JUXcfK9VxKZoPbq04XQCfzziaFLqKQlf+fCG8ulG9rL/X1Zn
kcV3heU896jFyNE18W1HsL3uBPcYZtDawGLvuRI+ZLTGkc5bY9l4k8wpTvqy
94VpjWbcb92jhCudsPt1TjuPfTPvOv9jnEjuPaH1NhWLlatz2bxS15eR4Zl8
4Ccdc1G+hEnPjdTdOVf2flBqWdqyXFrBNb+1/md7p2KuMyPZ+8nHJWztD4nK
odFlPOLGMZutW4v4eLfZaQtGF3DzN2NGjDku4W88VhtbDsnkIZV7zb8pl/DG
roHX3Wfkcb3f+l31hqQxxxm5EzxCs3iD1vZzFrYp4nMCfxVqswTeq01Xi6wx
Wbw6fA87eiGVp00L8nhyK4s9+dnTxrF3Go8oN7s6rH8ZH9tpYuemw8fwIycX
r5k8OIp7JU7XW9bbjFmsqmj5W7mIt1z+08TLLoENv/D8wtxFYqZqGvape6co
5nNMo5PnHAkfMnidqtKZDOZjM+hue5s0Fnb3cerSH1ns+abzo1ftLOJD5y88
rzOugI20OXrIf2oBD/PIUnpzuIhtmdRz+fEDCfzYgu8HXNWKWItWeg4t0xOY
6UTFjhOXFrEvOVtcbjvlsRv6C8b3MSxhppcv3vZoURPHKx1D3DqVMdFNneeG
rYu5T89em5+WVLD1/i4llwdkMi2jZ+vne0uY20xjP+PGxYw9HL8oMreCGZkV
z3apsWukW2w35w0fX8BbeT13nOdSxMfMefLP2fOpfMmJOVtEo7O447nPNquK
UrlnyX7PoI1ZbHvv6AOekiy2KFlz1bRlacy+JMBMdUsW16mZpuUWpzIXM0fP
J9rRcu9RyrsuPdHnaCT3Ur/XwfuelA04oK3ym0XyyAbXD3t3lbJjliNdlJ0j
hfcT4jFfhs5YFM3/H7IgMP8=
     "], {{{
        EdgeForm[], 
        RGBColor[0.471412, 0.108766, 0.527016], 
        GraphicsGroupBox[{
          PolygonBox[CompressedData["
1:eJw1UEEKwkAQGyqzV+968jGireDBg959gOIvpG+SfsIvWBQrKLRajyZMPISE
zExmdifb/WqXmdkYGAAdMILxAN/drAHPUngL+V8P3YNP4CqL+os14AqsMfNk
Hns9vDwFqAt4BXQNPYcuMX9UfqVdzORu3rBEz037Din4v5O9pWZzj0xm9xY3
DIGPh+ZdF49dU93YqqdVf6M/4F8wf5OC38pgbq230j+LO+kfM/k38A==
           "]], 
          
          PolygonBox[{{1358, 235, 239, 1526}, {1527, 587, 702, 1652}, {1524, 
           239, 229, 1353}, {1513, 650, 587, 1528}, {1649, 700, 240, 1623}, {
           1605, 648, 650, 1513}, {1525, 240, 231, 1355}, {1652, 702, 700, 
           1512}}]}]}, {
        EdgeForm[], 
        RGBColor[0.2814218011130499, 0.1705398831334374, 0.7158947040058774], 
        
        GraphicsGroupBox[{
          PolygonBox[CompressedData["
1:eJxFVEtoU1EQvX2+d98qVUMRQhIhPyHQBly6FNSaiqJustOiLjVVkIYi/ohu
rIngomCg3dnYjbrRSN3aTUoUQZfdxaILXfirK/Uc5oiLy8ybNzP3zJmZmzsz
c7IeOOdu42zDKePjEM5u6CuQXZwJ6Dnp49Afhs6tQn8O/bJ3bgz6VuTcfZzZ
Eecexc7VcJZhr8E2gHwd2D/GMb4D+TGyWObYhZNBvq/4Nwf9PHxb+N8cMRzE
UPcWfwHyDeyPoT+DfSGwuxLCyfuy0L+Fhjfj7f6B8Dchb+G8h96Dzwuco8i3
HbYNyHew7/fmtwYMVcgWTglnL84885M0xf4BcZ/gl4LtoLf7eM8W/i3HVje5
+RJajaz1AL7TiHsKfdobt6cg05D9wPwaoXFFnmlbl70A+cpZ7de82a9CHhHW
H5BvcW8S+p7I/tGnGxtep3o/h8Yz+f4QmT/jyEFS/OwIjBdyQsnvTegd9eZs
bLYx2Y9768cJyJeRYd8HfadimeeXuCJnG+J9DfZ55PoNTu5CXlfPbkDeia3f
q/DPBMbRqDP+EoHVwrzMRcwrscUyx0XNTF0YUsKRUK95773YOGlBVnHHJP59
j8zG3rKGCmcwsPnizCSEmb2gD/WBZpyzt64+zoojcvUgMi6Yb8bbDE3hDJ3x
3RTn5LGo/LznprBSJoP/nNGPPozPa+a5VwXtRVE6fdj3nurJqRbuVFVzval5
43/GPPHG65XIvouaua44mFD+kuzkJ693g/3JCE8NeZagX/LqmfaUcYcV21dP
6T8d2b6fA2eLgfWC9RFvRfkz2r+hdoy7dtobVmJux7anWc3JQJjH9VaktUdZ
4RxVTubLisuy7uK7wh0h5knZh6pjQbVwRxt608gfeSbn3Iklcfszsl4fg2wH
9saW9ZZMCSvfs456VxafvCul/eLcViLDzrekJQ5LyrEof+JsKz/nry9uiaUq
PHlx8q/eir65f8TBfSup7/RnXQ29RcRIvaA96uk9+QtPSric
           "]], 
          PolygonBox[CompressedData["
1:eJwtkTsvRFEUhc+ccc+tFEQjNBOJSiT+gESCmXtlBBG3Q0SJoZFohFAZQ6eY
hNKYBpWCmkbCnyARpXclvp2lWMlae+2zX6ewUJla8c65HtACssi5UwJHYCI4
Nwf6iDfQ8/CD2LlyTsmH8AqxK+Q1/ir8k/cJ/ARk6OUgrw6m4fu8+c0790iN
PfgH+UW8YzCDPxvUq2n98EbQnfA28ITeAOdeNaq8v8TvymumC3gt1mw20w25
4yAlvwqKQTA+AF7xFmP12uF9Hb2F/+C18zt17ojtmg+G8BLr4bXjGN5tJK8d
PEfa0Xa1GW3W1G7mtWOCroGlnG6c0bsB7uHrFoO/0bPbKbbJ2xL5o141rNZa
0G07wAvedyRuN/qBTwb9ndXoR5/Fqm07NWPd2G5tN/nCL4BWrxsOwwfxt71i
5vVG2s1i5qXokv+/AfoPq+pFpg==
           "]]}]}, {
        EdgeForm[], 
        RGBColor[
        0.2523034861667949, 0.40803476299844577`, 0.8110268656659603], 
        GraphicsGroupBox[{
          PolygonBox[CompressedData["
1:eJxNVktMnkUU/V4zn2kNC5UYwVSh1YUmKmCRVIOvuvIRNSbuqmmblLbBujBB
U9IQbGssVq2bJm5cUAttjM+FBUx0UfitIjSVH21/6ivBjTtY0KRCPMdzCF1M
5s797ty5c+65d76m7fuefyVLkuQfjBxjJU2SAYwnITcVSfIzPvZhfSGTfBf0
B2OSzEB+E/MvmGcxtiSaq5ZpO2P7qm3opyfV+m7oD8H/YYwUuvFM8lnMjZi7
MC9BX8HcncrPDzivhLwtJMlu6H/F6Mf6Q6zPI/idZZJcgq7mGHZgXsD3Pans
+33+H7C/H2eMwL4T6xbIQ7BfhlyP8SDkGd69EBb0PY1RB/k0dKcwbsG6Wkj/
UKLYDzl+nnHRMdRb/t9nrvhWdZdscyQq5rcxX4aPuUIxrYPuiVSx9UJej1FJ
hcFejMZEeSE+xHMxlUx9jv2jGBnGeegOwG4K8wTmnZlsGe+i7b/NhRf9Evsr
9jmdCbsrPnOP7W8AhgH6c8CwGsSbT0vtvbWQPe9RK3Quz5x0TjPjdwZ+5rHe
hXUF8kdBGHWV0nVhTCSy3WX5dfgYx57RVHu5bzYR7rxPY7J2N/LqRfj6DvuP
wvepUrENl+Ib9bRph+4gxmaMjlxY8K5fIB/PYO4N4myfMdkelMMT+L43U53w
29NYf4D1U5i3YqyH7Y1RvBvOxJ/HWTPQP4b55SDdNshvBOX6Bcg/BfF2sNRd
O80B4kDuETfygPLXkF/FnjH430efUWe9FIXziLGtI/8xfiO/o7j0V5CP0/ZD
TIjj9YlirnMtNOSy4fkHovK4gPUjUT4fjqrT7zNxs+oaILfPWc/67XY9M0ed
Ufm8M4hTZ60/nomjzCEb07L7EeuL8aXO/UnaYnwMjBpYh0HnUC7N93Xm/Kz5
eYfjLM3h1b7GnJ6Bnzbs/T2oBlvJk0R9gnKnObzkGns2ml+w/wR7N8KmLShe
yvWOf1Mh3U1ROWVueVfemTh/aY6Ra1uDMGnCfLJUHxxyLRB75pGxtDm2bsdP
bMmTY7ni5N3HfH/WH7nC/JLnDxTiH/cumc/kfrv15AfrgDXFnDP33Ms8dxT6
PlbKz99BPZC9csr9kTM502GftGefu+i+x365v1DP3B/Fj17MA6X4zzpocc8g
58eC+tfRUj0tM/9vc+1twDyYy4Zxcp6yTMyya/jPWiDWvBO/EWv2L/axOZzz
WhB+90J3BONf2LxTqkaIIc+9LlMvrpiH445zxP2W/puDzvsqyi/9t0T1w8vO
Xc19fti1XLN8T1ANPBfFD/KEfYTYXM111qao93mFOXAfZL5Yz6zryVJx0i99
NhfCinz/0d/+NM5zxrqlFH/uMx7ss7zfcdciuX6i1BtRH9Wbyct5vws7zGnW
Kt9Nxsd4iSFrlf2g3/2k1e9bpznY5Rqk7bLtyaMB2xPX3Nh+E5SHLVH82myO
jbrXZf5nubB636iePol5Pijecczv4S4pbN8ttZ/4kSefRfHjc/Mq9fsZVvHw
f06zez7vOGoOLLpHsLbq3Gvpk+/iyjV9iH2Bd+Mbudu9kv8yw/5HaTVPiBF7
WsU1zrgGXY/EimeTF8wz805c6LNn9e3O1+qSbwn7z2RQLfYYW36f8X/OYf/P
vYX50ShuTQTd76rzsljon6Avqk9NuJcTe96Z9+Ubxri6o3hGvrXzbXQNv1/q
TWU+j5Xiy4x7ArnLuzTg+83eS85O+3+L8W5w7d8exd2a3y/6qNoP++7GYu39
WPZ9O/y2l+4T7JFDrrMF19p/zUJ5wg==
           "]], 
          PolygonBox[CompressedData["
1:eJwtlEtszFEUxu/8Z+79i0oXHpVMmzBaFhb0QVskXmElRC10V011URGthQWG
knqXorMRNhaKkRDCAh0JmzYeTYrWIyzYtFYsWIwF4vc5Fl/ynXvO/e49555z
M21dWzoj51wTSIHzsXNJyAP4I+9cEf6egB2gIjh3BIzDx0APPAOWE/sRuxd+
EnyAjyedu8z+AexZCecq0bmJdjXoxzfEWhn+w/hHif+JfQj+Cn8HsRPYE/iv
Y5djF7EPSgtsJ/4xGlvxrcLuwS4F84hfzNrKhJ1RA2/CfwFfgrXN8FusVaGn
pCulhT1K7Etwif1drBXwdYNl8APgGXwhOZbDj4G32O/A8WBr8qkmR+H7wdPI
9mTh3zhrOLI7LEL/O/YIvB2U4T8VrHaqmWp3hvv84i7rue9peCdrUyO70274
PjAEn8aZX6UlzYTVZID4QVDPeiP4gq/OW+2Vs3Jvjy3XUva04uuTDU/gPwef
j/4f7A3oV8Hngp2qLf4x4muwvfLBXw1fCvLwOvUM+1uCaeeJaYXPACXO7jgT
/slbbC24H1uNVWvdoYDvIsim7E30NvX4p0R2hs7aFkxbPVn8n6NyVQ+sxteH
/SRpNVKt+tHYlLCezsGbvfWCYppj6yH1UiN4QfyJYG+rnv7X28FmoYS1FfC1
8mM3oFdg76Q3rpqr9qqJapMjfqPeylsvT4I12FnsK5yVBreDzZRmSzPwA40G
9VxkOc/2VnPVXj2n3mvBjtFKs3aV8+4F633leBe+K1jvqGfUOw+JWZKymdjD
3rS3XHSGzhoJlrs0nwebac12hj2viT0bW2/ozrr7nWB3HybHddiD4HfSerZX
s+TtbpoBzYI0pKUemoO9wNtezbhmvZa1vZH11HR8OdAR2cxfi61H1CvK4bO3
mdXsqkffePtD9JdIQ1odsf09+nPa8OWxK1KmKW39MfprtHYjthnULGpGNav6
Y/TXaEa74X8BV5ahgg==
           "]]}]}, {
        EdgeForm[], 
        RGBColor[
        0.31982733179023015`, 0.6034658443460624, 0.7157107650949381], 
        GraphicsGroupBox[{
          PolygonBox[CompressedData["
1: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
           "]], 
          PolygonBox[CompressedData["
1:eJwtlElIV1EUxu/f/3v3EQiFFqaiDeS0KLWobKKRCrFNkBVUCzdKmRJERTYs
NKUoaCKCIqXMCBscKrIkaCAalAYqqbRpEQQNtAka6fdxXHy87wz33Pvu+c4d
U1a9tCrBOVcBAlAdOfcOx5iYc1XwAdBJ4Dh2P7zWO/cLXk5OHbwMX2/cuYWg
H/tR6NwP4tOwTxObie8adRPJnwXPx7ef2EGwkdyRYAixFOzZ8L3gBvw2vi3k
b/O2l2rWwHvAVOJp1HwILyXfxWzNMmp/xE4mfxe4rr3AU+IB/3AQPpo1v3U+
lmXCO0Ema+9hj2VtHrZj7Qo+ud7OoLOkYn+mRgn2ddZvxrcEfkL14H9AIzwV
5JL7k5w0eCXoIpbI2luh7am9dYej4Mn4uuGbyMnHngAC+B5yxsMv+MG7Iec8
/HFotdeS08r/vMWO4DXgKnYrOUnk14D1xO7gK2HvdNacxO6K7O615h32bG//
rjubA08PrVfbQRH2TfIXsn6Rzsx3N7491KrUGeEN3rjutB6eTX593P5J/9bk
7W50J99ZvwPfGWkDzCV3OvGdCdajbmIJYKUzDe4jlgM2JFhP+ohlePt3aU7a
6wM7qXuMlHbiU7zdxV3qvcc+RTyFeCroxZ7nTRv1YD68Dl87vI16xeQ+BKvI
PUu9FGIvpXnsIuq9wf4HP0B+NRjH+kn4ismNs/4cucmaCWINYAG80JtWujQ/
5H4AT2L2zzOIrdaZ46YhaWlNaLMjjT/Azopsb91pDnwd8YnY7dJXZJqUNlXj
PvlbI+t9G/FWcguwjzqbuUL4Lc1TzGZmWWg9Vq81g5rFcrCc3FLwhVgstFmQ
76s3jUqr0uhQYoep2RK3GT8ErwCL46aRRuL3sUsDO0MSdg/2msDuQHfRhp0X
WI/V60bsYYH1RL15BobHTIPS4t9BLUrT0rZ6rF6rZ+qd7lh3rT21tzQmremM
24kdYY9PMdujKbKZ1GxKk/P13nl7y7Tna3g7yIjbG9GheSQnO7CePw9NM9KO
ZrwW+0Bkb00zvm3YFd7eUr2hryPzKaaaqj0QmnalMWkty5u2crBfEEuPrJfq
eaXuT29mYJqWtpWjXJ1JZ7sE8gN7A/QWtHib/Vx8F4mN8PZ2qkZzZDOh2ZBm
h3vruXq/AlQQSwttFtQz9e6bt5hmVLOqN0pvVQHxK8RfhcZ1hsvYk0PbWz1W
rztCe8s0s5rdZm+zI82UEfsPEVfKmQ==
           "]]}]}, {
        EdgeForm[], 
        RGBColor[0.4412704038510746, 0.7056875489022256, 0.5266959359100543], 
        
        GraphicsGroupBox[{
          PolygonBox[CompressedData["
1:eJxNmH3M1lUZx+/7/t2/8+NFsySFUIRWCjygbppYgZkptpVJOcG2ajpRBAFF
eGi8+KhbNGMBDoSWyovLCSpYSeraMipXa/lSNtngQVFejIrEl4pa9vr9+P06
++PsOvc517l+17levtd17g9efeNlN3RardZz7VarEn1UPwZoMkvzZ7qt1rMa
6zU/VvsLNEZrfkLlvQ2aPyb+xzVO1d7TXa/Dz943xLdR9Jei13Z8/lOa94kO
0TixsnzkTaq8z3dmahSNYcgI7+SWz7E/QfO5dat1tuZbS6s1TfSwRr/WHxL9
or41vm29rohuSyR/kcYS8QzMfLHmP2tarX9pf6fk3RGdV4kuKtZjhdaHi2ex
1mfXOZezp0j3ERq9bZ/h/itFh4p/ITarbY+nY6tBxboNLOa/ufI3b8v81pb1
vattne+VnNf0+1vi39/2PZ8Sz3GS+03RM7V+Ycd7n9fYjg/1e6n2lunsw6Ln
iN7W2A/jRPs1inj2SsbNWuvRmT7RD1e2Id/4uubLNFZofXLtb7wp+uO2z7K+
S7+vEB0tHQZJ5lzxv0f0scY67Kn9/U1a3yZ6bdfzJzRviu85QPRJ8b0suXOK
9+8ND2tTct/bK+vEd8/Lvbjf1TqzTXKuER0mOVu1/tHib2GPH7V8D85ir09X
9vXFLd/j9si8T2sT9fs00RGN/bFY9FzJnKd5LXqZZH6hazlTkN/13uDKv5kT
c8zxY1fnr9NeJfqA1qdXtvWoruOGmIGO1DiX+2q/V2MGtg0P6/PIHdFejRkd
n+fs1sZnn6sdK9O1P79lHdGVWJjPvbrOo9Ml58zK8zMq/x6o+dTG69Mk55jK
95kXuyGLGNnRtu/J62s0Ludcy3pBp7X8nUkaQzV/o2P5wzKfmPX5mt8tOWvR
TWs9GkV8cyrLXaCxrrH/zxe9H7wBD1r2J7GAT/t17pDGbu4pvkE6v6VY9u+6
ls8e8+tapoeyTm6NjL1uanznB3T2Te0fJec0P1I7Hj4mern2V+cMskZFnyPF
8+tq525fchm/7Qou9EdHfLoj6/h0nOie3P9Q+NCtP+vM8ftNlW1CjD8WHFsQ
v4LD6DW8bX9ge+zM3uHY+/jimN4dO/TkW+jzPd29kfzN4rmkMs4ii1w4LXcF
R8a2HQNgxDjNb2l5EOu3Bi+XB+eXNrbByGDqXOm8vE3Cy7/iaYt+G1uDcaJr
gw1g4/7ocUB0fNexgh12FdeM3aI9GrPF+wPJOdIxVoH5E/R7nXjOaoxH4NL3
Nf9S5fsQQwOD2ddrfLlybI1hXXyz9LsRvUTjEc0/K/pg2/ftS00Zn7uT34OD
1eAu/NNSy6hjYBD53hO77auc29h0S9v2xK7kem9yaF78TA5sACfbrlMX18bl
HxbnCPlN3E6tncNPFscZsXWRfl/YGDfB1H9q7yrwrhjLwLQBjTGWHNoWrETf
k8T/ycbYO0l0Uddynkre7c+cuveH2HFwbZ3f2xgfFneMER+qnb/HSfYfi/Pn
sOhO7d0mnudFzyueTxL9a7GfjhbHNn0CMfzr4p7gN6IdrfV2bJe+2nXhAn13
cuW7k1P0CH3pDYYVyxkq+ox4zkvP8bdi3/+9uHaC5UMk73HqNZilteHFOPuB
YjxgDt6SS29jm773i8Y69evsPWBxx5hAvs6LXw9Qlzvv9ijQRxv3NUeTv291
nSf0IL9Kv/Gq1rq15fOdbcl7fM+53pzFR4/ET6Mb17hTG+tyV/TBB08EU9dT
N7re2xWfbdd3xhTn2tjiOjAzfVd/dBhXjB/EL7jxvsb3PA7sTN2n/velZhDz
4Cm4+pdiPUYHT8BosPrNYltj8zOKZSFziOj78QW1Q/TEzFlD7zHBXnL3YGW5
4PSB5Neoxjh8cuP8WhhfTC+23yDdaaH29oP5mh/feP8YzV8ojqe95FrtfvEk
7X9GY6pkL6udy5ylt9tbGZNvankPnk3i3VPZB8TFC4376ZnF9mdOX825bTlL
3pTkztPpnVcGo14JTvVljV5lRrAD3PhqYzt8vLYt6buo+9TtZel5FqavWBjc
XhVZm6mVlW06NrgNfoPnG8I3vjG2jwETGvNP1LdqzWdqXhrXPnjBw2fT/4OD
+Hlj17i7Kt+G54bY6MbYZn1iEh/uix/nNe5B6L9Ojk9PaVw36CfIw5dq241+
Flwg15akj9qX+7J2IOtjcpce0d9XXicn38FfsPfYxpgGtqHHy+nH6CtGJYbJ
IXTGj1+L34kRMGlnes6rtH9l11h3dnQD87EF+I4+e1KLqcm9qRHozF3gmZ0+
65pgfonP6bXe6b3YAz+Wp6ftDf6BD9gM34D7I1If2NvDm0Hz/uKazxzsfBF/
iG9v4/rK9yfUzgn6ZuT/t7iP/U/xGeRNzrgoPMcGn9jrBB9fL77XltS+F4sx
++rG5ybnLPExODpTN3al9/q5+NaI/rvrd0N/5T6OeFjTdUw8UhvTwDZ+r+66
v71cvweI/qQYe9ENfMOf9wRPsB/ysS0xS+xyf77/uf/r/1a33+19l4e/7rqW
7Yz/n08MgH8L0yvwhqNfoVch1okh8g7duQP6zQo/mAAWkKNgAThxfeV1ZBNX
1O4p+Q51eWvtmF7S+O0zI+8feIlFajz9Nv0evRF1g/pB7KIXc+QwR9epyYuS
+J8WPngurSyHu/MWJqaXRDf0QqfXI4f7Tox/hgVzepM7g3KWfuxQevXd0bFE
PvZZnfP0hs+nT8Ues2KTE4JX2xL/xPqE1McjuQs5xv25++ba2D2/cf7QV5Ff
1Fhianp8i4+JSb55Yb77dqwmtumVWeM3/ctLlXvN79SOJWJ2cmKFmKFPIc6R
wV3vDp5QP+ek/9uUGN2Yfm9uej56W3plemz6N3yMnfEz87ff1JXviO3o4+Dj
nfxa3kXt2vUFLMZe5NDU5BG4CO7fEXtemZg5vTbWHk683p98wSf4hri9INh3
S+38vrJyj0utRffBjX2+Of32W8U8/yh+D+3IW4n3NL01fTZ5gH/JnZ/mvcC7
gR77zsp5QZ5uSH2hflPHT2jcJ6IHeMMblNgZGFyZFWxZWZz74NMbxTFY1b43
9yeW6P95v/MGYPAGoIZR9x7KGm8a+Oj1Z9bGlCPpu3kDjA2Wbwyew/dg6jn4
Py5vvXGpA8QnsXNp4n9I/uc5rbFfe/J2420D7zm1e+VhwfyNiZ+v5L+d7cFb
3k/0wfTAvMnWpGbge2JgZPAG3FmRurkpZ6npJ8bm5+c/Fv5rQefx0b9KLV0a
TAfbRxTjJfhJrnQiEzu8Urx+sNif4DbyRwZfyUH+O6MeDhbPq8V6/kn0z8W9
AT0C/d99ySN8tjYxj92xPzb4bXH//1xxX7Q96/TZ9Lr8z7cxZ8kLeq6D6bvu
bIzvaxvvr4v84cl7dD07/63xH9vDidHvFvdf+Bl7Ynd0oDZOyjvrE43j/Jjg
2NTUUTDnrLxnP9IYV+hx74uPkEkcUqv5n5YeincS/7HyfvofHW6OkQ==
           "]], 
          PolygonBox[CompressedData["
1:eJwtlmlsVVUUhe97991zKIITkaGEwRFoC/6o4EArxgb94UTQgokTUIXWUrCV
KpBgSIwxxikRlaiJNEYZWtC0AfWHs4nERLAEYqGlSCtGFAWq4oCgfiuLHztv
7encffZZZ5934YKls5fkkyRZixSQv0OS3JcmyYZckoQsSRYh48GvIkfxHUGq
8e9DGiIxSC24FH8efBp/CbgG23/gz5Ap4CLWPsIHOllvHL9jkVbi/w2O3UhO
xDcMWyP6MuLPB7fin4jve2zL0XepHnIXUnQxvh70DvyzsW3H/yhyiNi7kT/w
T8+cu56YVvAYbFcmrqGN2CJsrTnvIUM/jH9cznv8GbwJmYD+Hfoj+Bchu8E3
I334XkEGqGUEa07OXINqeRr9HPSH0Q8QexfyO7EXRO+tGX04+EOkgvgmvrGT
+GPEvJZzz2vRd6APBVcSv0v1YOsHT+ebv4B/wnZH6ppV+w7Wm8d6u1Uz/vex
XYJ/Dvp74LeR4eht1DAD/8voR1nrGLJWe9WaOefcAN6I9IEP6kxY+5rMvVCP
1euzyGlOHNOM/hv6EPBD2H4Fbyb+MPoKpBj/SuQHcDnfaMD3DTHDwFXYusGf
IpNTc6Ya/xStn/cZ66wHkb+atevEKfAcbJenzlHuIPRNxN6PnuDPRWNxUtz8
An0W/SlDf4vYv7BNypnzJ8Gd+Bfi/4D0i7VXbLfg60Lq8dVguxX8AjlvgA/i
L8455hB4PrYbwTORHvR9wXsTZ8SdzuCz/AqZj15HfBv760Zfgl6KvM63n0Iv
iz4znV27OKf9ZL6LTeRMxDcjutYW/NeBp+Kfq62jv4M+KTi2jD3txdcbXJvu
wH5wN7Y07x6/S/zVmbklzoq7XxNTkZqD4mILckKzAVkH7g++C+qBevE5+bNy
7qF6ORXZwrdeImYaeHRm7omj4qp6qt6Kwz+SvzS6F7oDz6LfrjuWd4/Uq5ui
e9EnjooP+OeqdmRDZo6Kq7ojuivrg3uhM9PZxWjuPCjJ3BP1phRpV/+Jz7NW
PTWWgK/Htodv3YasIna0OEzuSvxno9cRs434Xs0Y9Gujz0J7rgR3YPuI3DW6
H5k5J+7dSc5gcj8WZxPPkE/Ae/CfyplD4lJRcKxmlGaVZrJm8zKdafDM0Ox4
AH0k+kVIQ95rnDwzYzVrNTM1O48XPKs0czR79mqPqe+g7uI6bNU5z4QW8BXR
ZydOloNHBc9ecWBAawV/ezsx90b3RL3px/Ycvl7VDF6BlAefkc5KPVPvtAft
RT0vZH5T9LboTCO+y6Jn6RPYJmh9pEHcxDY0mgPiQhXxM8GjsC1PfUaLM5+x
znoz/gWsd7rgu6seqVdX4W9MPLMayU0141PPEM0SvWl622QraN4hTYlrGAIu
ib6rz2ObBD43uja9Yedp9gR/Wzk1eluiY1fhH6+3E9vWvDkurvdi21qwrUff
iuaWalSt9ZlnqfaovQ5k3rvunO5eI/Jk6p4fAGeZZ7FmnmbfieC3SG+a3rYX
sWUFc1xcf4b42pxnarVqiZ7VmhHbwH8Gv616k/U264x11prpbeRWoK/Oe801
xN+TeVZozS+DOSAu6E6047s0+mxVs2ofwD9Yd5OajwfPSM1KcbQrnLmjBc+4
rsxvnN46fbMymIPiombWTvSx0b3WmzEGPDL67dWbNSL6P4f+e8zD9g/xp4Kx
3gS9DYuRb1Ur3+yOvsO6y3pDtwTb5NOdeRzfY5lnhXKq8E3LPEu0pw70NzWz
Up/xfvT/AedqKgE=
           "]]}]}, {
        EdgeForm[], 
        RGBColor[
        0.6094599774575785, 0.7436970658137667, 0.35748424642399124`], 
        GraphicsGroupBox[{
          PolygonBox[CompressedData["
1:eJxNmH2QlmUVxp/3fd7nviGBtPKjmaBksSY/SMaFUdRa0cDB0HbXmjFlcTfA
MRXULfCPRgYUmYksLRGBUReKSgOWgaX6I4YcG3WhDJhAy0Y2IdJEBk3N8mO7
fp6LgT/u95z3ee6Pc5/7nOs693N619y2OfWiKHbUiqKU/L5+XlX7sfTf6dnF
ejlR8nBVFBdJv0jyl/o/Vm2h+nxDfXukj1G7MRXFGsmfq896yS+oLVKfXslx
andLnyL5nNpW6VtzUbwp/UhD86mdo1bTGg/XQl6nPg3NdbPk2Zr7gNoVWm9A
ckst7BkvuUPP2qQPkz49h/6Bxm3Q/3PV7irCjh+p3e89ovMc2yeqf5Nks8Zc
pWfvyo6H1GeD9EeL2Cfj7lN7Q32PqO+g9EP2FTY8n8NffZpjuJ4t1vt5ats1
10q1B/XuUcmP6t09Rfi0x/N+WWN2SI6pYo0er/tb9V2m9Waq7yyvqWU+9C9+
HiI/PK73D6ldi3169km1r0qfpNam1qo2tQz9Uvsf32+wT/Ft0nx/lX6J+u2V
XCU7uxsx7wNqa+ux7k49m6g+zdJPS3F2z2rsbMkz9OwUtRfrYRP2TE8x9mr1
GVCf1lrsEzu/Vg9bW8qwiznZ3wNea7fW2qXW77O9rRbnSx/8z1qsiw2flf6U
1qqkX1eFH1nnihy+w4f0b5P+ktofipivst3LvE/6YO8m23CzfjZLv8E+2eyY
XJZinjOqGDfovbPHjnrsc5zenadnb2vcIfVv1z5eThEvxB+50NOImCBeiMHV
tYjDNXq22rFybRV2sr99nAkxXsSeOQvsX9GInMG2b8vmn0r/hcYNVZurZ0NT
nDFn/V9iRvod0i+sIi/pT6xuSeGjPsnRko/U4hyHqN8cyTLHObHueMsLrTcb
D+5zTC90zrGXE8tY76DkTWrr1HeT5OgyzmJvGTFB3D6bYm8dOeJvtG0g/s8u
w9d79W6J/j8suzqL8Nn14FWKPtskD6bIucFG5Poi5ztn+KB91eZYIB+y5rpF
8gONO6cWGMce8PfXNWaUZEqhV5LfkQ3XSD9BelbrUt9bcmAdz/HrNK09vQy/
d5Yxf4dad/0Yzj2jPk+rzcCeMvZzNG/Rr3e8d9Yj3rFnlGNgisY1ypjzmjLO
C389lSOWKu1pVhlnN8N+mus5L6jFWYEzYCkYBma94Fg8iulI7NiotXobcWY9
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
sdS+wk9wd5+/sSyoIhbBes6NPGdf7O//g5eV7A==
           "]], 
          PolygonBox[CompressedData["
1:eJwllW1ol1UYxp/H53+e42s60/SDs3QSpc4idZK6mmAmWBM3C3oxci2Dsi0d
qVFpb06wF4tSZ6I0X0qKudhc9CHJolASrKAyLVZZGJrKX8uilNbv6vpw81zX
/XKec+5z3/cZVddY09ArSZJ1SAE5kifJTL4zsiQ5Cv4LGQReju5P8FxkPQEf
oKuJSfIDPIDnYu8G90PuwN6eJsmAAMenAfs78L7wYdivxPcP+HBwsWC8kJjB
8Ep8KsH70HWCU+LriG8gJgEPxOce7D9iLwuOUWwRfpK1pqCbCv+OmEfwnw/f
CX8Nqcb3BnSt2GbhPx1civ0wuAr7jOA1tNY5eDl8CPJR6j1pbzqTzracNYYR
3x++G94EHwz/jX/UsdVa+CnwnuCzvARfCr6o/YMfxucC+DxyCXyZcgL+Nnfu
J8MPg5ey5vfwbazxJvFz4AexlaG7BTwN3YrEd7QCfoyYOZnv8Cfwydx7qYWf
AD+Bz3TO0sV6bcReGr33a+ADwSORlfBJ8BHgYnBubobvBf/OGndiHwPfBf4c
mZb5Tg+BW5Ae8Hh0+8B/I4sTn/kf8FnVB3g08W+BtyMpfA18K+v35p8PwY8j
j4EjUp5a1wfcF5mQuqb6g//NnUvVSA84i66VRfAC+OfcZ1dOfgF/kTu32vOX
yj0+jZnX1NpfoZuoWkP3NXgte+ro5RpaAM+j127EJYAfQNeJrQWpAX+Y++x7
kfnYpwb3zv93DA/Yb5d/qgU4A/xV4GnsK7G/n/tuj6Kbhb0c3YvwdUgTfDT8
afCzqm/4KqQmdQ3PxNaNfEYNb4AfZ627sQfwEuQAvHfuWlKNRvCt+HewViey
OrhH1CvqcfX6luC7uQ1egG/K3Ru6Y931JOI3EFuFz3XgychG+HnkuWidbNJV
RPeAekFn0tmeRE6BzyDt2K6CX4//8/DxwsG9sQPd6eAZolnSxh7u4/8TonOj
HA6VL/J65p7tAtfn9lUN1YE/xn82+RkJfwN7K/Iy+BtiHsS2PTh3utPF8EOa
P/i3s/4IbAc0U+DN6jn4ruC9aeY9im1b7tpRTau2p6DblHlP2ts4dE34biHm
CPxT7NUF90gB3qP7xH4Q/xbwK8F3J90CfBcS/za4G3kBPCq6lyvUE/j2yV2b
rapnzeZgrJmo2Xg2eHZqhtwE3o9PfeoauQueIVtT92gR272qp8w9sTE4Z8qd
ajjPXfOqfe2pXrWObM58Zp1dOVVu9UbsxLcZ+57MNafa053r7jWTzgTXjGpH
M7oyOkfKlXKkXCknyo32pL29G3x23YnuZnN0LR9D90nwzNLs0h3qLmuj3y6d
eV70G6G3QjPtXO4aV62rJi4S04/4ttQzYgC+g1TDmXWyaUZpVmlmloIfR06A
1yJXg9/LvRf1aFfumanZqZm+BPvu4N5XD6gXVkfXmnLYDL5Q8NuqmlXtamZq
dpbDO6JrULX4DP5l0TNbs3sV/ArwEORa+DL4ZeCh0Vhvlt6u+5HS1DNDs6Mx
eC3NGM2acdG9WESeAt+oGgfn+K9XrjWPC67psezt8uh/KwfKhd5YvbWKqYqO
UazecL3lY6Jn2RrOUMK/x0bnTjNAs2A/upKCa6YaXhF8dv1T//419yzVGRYF
v2F6y3RHJdF71t41oyaCh0e/3cqJcvMfakASQw==
           "]]}]}, {
        EdgeForm[], 
        RGBColor[
        0.7856342413182854, 0.7232925982373696, 0.26464723483526686`], 
        GraphicsGroupBox[{
          PolygonBox[CompressedData["
1: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
4e7PUbMlZ8x/AUPuyzk=
           "]], 
          PolygonBox[CompressedData["
1:eJwtlFmITnEYxs/5vvmfU0LRkIshskRJ2bI24xOJsgwKY5RtiMSUQvYhE7kw
ssyFGTWWsqcwthqyZ7sYRlzgyi4kRNbf0+Pi7bzPu533/26dZi+ZuDgTRVEZ
lAf1DlE0AMGqOIqq4V8kUTQ+G0XF0DxwBJ6EvhL9DxzWpVH0EV0+dAxdJ/B6
+LfQcez3QG2xnYxPFv1n8Aj4qchuwe+GWsWOGaPPJLYth7rBXyJeLs8xFGsY
VITuDvgs/ED0t+G/8b9K+G/Yro79Br3lN1QM3wzZLvgF2DRhOxp6Rvyr4DH4
5HjaL76PwRV868CnsK+HvmBbSIyP8PPxKSDWY2SLsN2GrDz2P6aDq9DfjZ3j
dvh5yBqx/QOuA3cBn1N+UDm+DeCiPNdAtXgEXgNuDd4L/gN1IZcbxJiBbn/w
v58SbyvxeiG7gu0QaCm6JvBK/HvjsxO8AXwA/jM+G+HLkE3Iuqfq7SyoOvab
5gbHVOyx+PwlTr16iu09cFf0f4NnQzkpt5vo+6G/CG0Fbw/OtT90SzrwoIxr
rtp3AD/BP4dsOHxtcO31Zr19CzQj4xqeR5cf3Itp6G+je5V4Fschi9C9h2Zi
mw/sCb869eztBA8Fv86zrg+y6/j+BG+LnZNyqwmeZfVIvSoNzr0vdCNxDMWq
x+YDfElwrO/412gX8Lmg/mIzEf40so5Z1+xM4pqpdu+x3wXeg00LcphCvE3B
MukkuxY8o5pV9VC9/KSZADcQIxe8M9qdhegb0YfEtdCbEvhzwbtRy/83p36D
3qIeTUf3Br8q/jce+gk+CZ2NvcPa5a//Z0czqdlcEjyrsukMrgO3i70z2p1L
msfYPasGf0deGHlntbul0I+Md6QquGaqnWS18MsT56IeLtPuB9dyjmKCK8BH
ye0wNJJYlcG1eweNSz0Tmo0c+Ay6wuBdXan+4t8cKsl4R9qgOx28KxX/d70l
+tKMa1wQPJOaTb2pIXimNdvqcXHqmqv298mxu96TmleOtalvoG6hbuBi9A/B
RVnfJN2mB4lvgWrUCL8p9e1SDsqlIvWu6ubo9iwPfptunG6ddlK7qR1+if3z
xLdMPTkIPwSbmqx3fjB8D/x3ZHxzR8G3D56lQ9iMQL8v8a1Rjk3w64J1mmHN
8orgWVLMQbrt4CNZ7/Bl+BPBu6Ear03dI/VKNrL9Bw3A12A=
           "]]}]}, {
        EdgeForm[], 
        RGBColor[
        0.8928474464850373, 0.6019771799070285, 0.22090205371651062`], 
        GraphicsGroupBox[{
          PolygonBox[CompressedData["
1:eJw1Vk1sVUUUvve+O3daTQSfulXKwvgXqEljfBgb84pBxYWRmPCKSYMom9K6
U3EFCqFubE3rfyHRxB1qIrTFQCjvtSQYQys1bkowoWAsppHEIlJaE7/P7yN5
k3PuzJkz53zznTOv5ZXXX+zNkiT5E6OEcTUkyWSaJKOQfXmSnMNiUyrJ758g
l7GGX3IF3w2MOgZ+yXimb+qbYHAB8kHIWeyvYm0zJb5PYf7eoO9LmP8O3wdy
+edZi1jrhPwhaP2ybXjORYy7oE/5XOo8cwJjBfqpTDpjOQsf2yA3Qp6MSfI2
5N9YG0WiIxhl2C9m0uln2mvLic7Znmq+OdXe1kT5M9b1iWIsQ5+Gfg9jyTVH
H/RFv3cW2IP1Q1Exc37ZuUxZp92Uc/kW/scyYVbJdRYxOZ4LizpsFvDdBb0G
+Q9zwdoRzG/GWV2YuwnczgTZ/WX8+2HzPGQbbL6CbXvQvlGMDvs/gfEc9Bsl
zdM3cZgztluwtsP5TsBPK9a3ws8+zD+OeFYR30zzZd/LnO+JWF60nwcc2www
ibnOZl5XMsXJXMg3Yr3O+A9ivgX6tUw674J4343xK/T7Ec+TkBlkk3OJxuy4
82J89Mm7uw45lMsfzxwwPn9k0hlLPROfgnk1bp384jdzYSxDju1wSfiQ36cL
5TyP7xeQ5xjW+ow5eckcx4J4/RTkQ0E8IV+GoO+GzS9RPqPxYV7NzuWk64j1
RL5UzRnaf12SL3LkDmKQam90bB/a/79Buc86noNR9sNR+DX5rD58L8HnsSB8
bjdWo+4Ve6NqmXyhH3KHHCKvWHu0IedqrhfeF9dpz/wveI3zrNfFkvawZpjH
M1HrzIPc+ywqhnqQnyWf9XEUPuOYfzfKzzuQk8D0Ueg16I9grQ1nLAThQ5/0
3Y71cyVxuexaZjzfGM+6OXCspHvfCl9rINfDz4Egvj8MeT7Vnv/tg2pmD+Tq
VL7Jve5c98TcWP+sWfZMns862meu7k/F6SXzPSl0h9zLexyPsrnhvjXm3sWc
thirLticwfxg0Lmdnm9gbgJjrXtgw3qeSmcv2hkV9zD2nrZ97reAPtmXODfp
vbxP8oB3+lIhjnQXqqd+19RtufAhTidc+8yJ/OUc92+L8tkfVE+vmresmxH3
q1258iGGn0T5/TSq/zAf1iNjazjmAefwMmy+h34T+nvQ3w/Kowvyx6A+/mXU
/ZeN15zfnVt9LPe78Fimd6HZnKkZW9Yt64t1tgH6IZz1RBTvuH/FPaThd2ra
bwHfgWouzMmTivsT9ZlCHP25ENY8s8X9p9lv0xeF9vLeFsxr1tYq84i9tN0c
X+1eyLV1rrtJ12slCuO3gt4j9gfe5W7nyvMv+T0nz2/xlXFuyBU3MX06iod7
4efZqDraFNUvB51bn984xsL1w66dHeY58RwuhHkn/LxWKKadkKVC/P8c828U
6tdvFuIL9/Ns9qIRv2VnnR97VFro7j4K4gg5wzvlfw3mxr43az4e8dvEvUcT
3Sd9EaO633DW70b3Odqwjvcblz3uA8RjEOfOY+2+IHv6pX/mQHvW9Izvj284
OdGTq78Qf3KOd0AMr5vnvbl4T52S9syH9bHLHGbf5llHzSveE/tXRy7OtbqX
ce5qrvq4bBx4TxXb88xev3dc/83/zYgj8eT/rB7Hw5jZd7lnjf/jVfzfqer7
b7XeYd4T7/PmFXvCvPsCudDt/x61IL/s6wfNDXJkzjW14v8JVZ/V4h631j2a
cf2eq5e3+R3/oFAuA4XiveaYe1yXi/5fQBxZC/8BVBiGAQ==
           "]], 
          PolygonBox[CompressedData["
1:eJwllEtIVVEUhvc95+yzrSikx6BJWaOIiFtElJFEF7JCKJJAr8GlyAYVNurl
TCPUSVpKD9PAoGEFEV2DqCsq9CDKbBaNKooQhMzwUdD3swZL/3//a6199nrc
NcfOHGqKnHM1WII9C85VAsoyzl3xzrXCp2LnGnBanDrXgo2BN+L7G788Pgm+
R7FRtHH8T3P+Hn092issn7EzaavgJbTj8Hfwk8QUyfcQawR3cDbHffuJaca3
nLMC2gR8HfwW+kJiP8GvoZXgOXiWnLP8H4Av4/8K7A3+O+B3yJfDfzu4hbNa
8BdsD7we24ReQXwduBq7D3+AteLbBp8BP0Ivwn8k9tYtfNMG+DjfUIVeztkA
+Ky+CW0IOwee8OY7iE8H+CP5msjxh7Pb6J3Y18je/BT9l7e3fua+anAv+nRk
MYq9jpUlVsPn6H3e7lYNVIu7wd6umk+hTYObwVvJkYWv1hvAu7GctzNpF/Hp
AUfct5Pcl+Fxaj1Sr1SzEvpK7G3GalqJ1g4vgp9gB+CniKlBX0RML7wK/R75
RjibBA95035yZ09qPVAvlnDWD77grVez5GsP5iPfx+SoQBv0pqkn6s134pai
ZeHD+NZ5w6qZajcHL5BvHp9abzOl2VpA3I1gPVavNVM3NR/BvlUzfwm8N9gs
ayb2BXuj3qo724j95612a+F/wZuxbdw9hk8jvl18w7fIeqxeH+FsNLad6Yd3
4/8ytp3SbmmmNdvqUTd4MrHZ1E5qN11qs66eZsB5zoZjy9nlrafqrXZKu3Ui
td1STw6Dz6c2m7i5ef50YiOx5VCugrfd1zcV4K/hyxPbKe2W3qi3KqYB3hes
d9pR7eoub7uiN1+Fv/BWa82sZlc9UC80MweD/abot0UzpdlSzVQ77dSH1HZG
u6Od0m5pZ7Q72tl6tJnEZlU1V+3/AyjKofk=
           "]]}]}, {
        EdgeForm[], 
        RGBColor[
        0.8864199804750366, 0.34721113138466675`, 0.17107395293458844`], 
        GraphicsGroupBox[{
          PolygonBox[CompressedData["
1:eJw1Vc9LVFEYvfPevPeW2UKd1YwtmpEZISn6CyIq0BQz0H5oBLUwUKiN29pU
IAXaohwh1DB3bYM0UFfVynIpJClOtBgXtWlWncM5Le7cM/d+33e/7zvn3nfi
9tTQZBRCmMGIMV5mIQznQniUhHAKG70YP7B+GnMXxlfgm9g/A9wCLkeyOw5c
NaZ9xb7cr2H0YPwKwlXbHGIuYmwDN4NsuH6E+OeBvwOfQx6bmEvOp+qzJmFz
FjjKya9m35bziDzXjAv4eYrR4TpKrqWKuE3E+Ia645ziMv4VrF9mjZgPcuoJ
8yzZ/yfwRqwc6LOVhjCGuZEP4VYkn+sY/fBfxP9R7P9OVNcSzlrDmML+UV41
EJcQcxD708ZF58lzh+D7BvgG4vzJy+Yh8ONEfAwgXhfwLvCLVH0Ycy2s+zVG
ZyQeZ1zDKuK8xaibq4p72HTu7D/PXI7ETznWf+I1nLEEvJ4qz5W8+nk1Vby7
mBci2dC+EgsvmBNqgbz0WjNl18q+bls/XGsL4qzde+xV2RpYtq4Yv9uxiVdc
11ZQLsTM8S/604d5IFH9fY7Jud+YPJCDkvtALtmLk7Hi72N9PJPNeCIOyMUc
8PNImomdf7f7+d69rnuNOXJ9MJM9tdbjPrMv+/Zn7Qv24RrrWHVd9CPvsfnt
tLZZQ7s1M4fcGsCzmAux8tg1twfW8451P28eeSd53+qp1nf8Hhw65jGc/y6W
P9catmduK+4z7wT7SK6uWSdrvh+xNdltvbGuWef5KlNuzH8vyI+aa7qHrIG1
f0ylpw+p7ji1zpjkqGKeqF3G2vNbEfncdvPJWhYzvTWfE92JPt8L3tGm9c93
gfgTbO6kqnUilQYZs806rMXijn1hf9izkUxvxGgmW2qqzW/Rf646zB3z/JIo
H+a16PeqYO2wftb+AGevA99Pdc/J50Yi/RYccz6T/T3sP0vEBd8bapn8HbjH
HT533lyPwHY0ESb//AawjguZ7mbRb2bdeNPfjJbvcsP6Gfb3gXy3/L1o2XbC
PeS7zjeLe0+c/7pruJSphxcx/wNZfcp1
           "]], 
          PolygonBox[CompressedData["
1:eJwlkb1KQ0EQhefuvXdTip2dCBrBFILiI6gRE3MNCrn+RQRthAS08Q1UEC3S
RAXFaG/rDxGiNuIr2FsIprDSym+Y4sA5Z2ZnZ88ObNTLNScigyAC+YzIbSjS
g7iAv3qRWiASgjQWmcZbCKxnBr5F/ZwBz5zdhJ/ifTrracLfOPMNn8T7iW2m
zl5H99I/BQ7hV6BIvRLbXWvghdofeo7aCZhFl9AF+BHIoxN00Zn3C9/Bazvz
tFYFCbzOvGN4B3zA7/DOdNfI7hpH5/R+zvc5m7HrzdPaKj378FbG3tJFv6O3
vc3SDBbhK+AGniWfB3g3srsn8EbpX8a7dtZTRjfAXmA7VpmdestCd9BdNCPN
SjMcobc/tqw14wa1lDOd0P5I/+ogtl01s4RaG68FH6bnydtOupt6S/AC/ZfO
/kD/QjPVbMfAF7VHb2eHwD18Hi8X2hv0LfomfZvuUOG+f9qQRqU=
           "]]}]}, {
        EdgeForm[], 
        RGBColor[0.857359, 0.131106, 0.132128], 
        GraphicsGroupBox[{
          
          PolygonBox[{{1362, 246, 1627}, {1608, 237, 1359}, {809, 808, 348}, {
           1722, 348, 1628}, {1627, 246, 1361}, {249, 241, 225}, {1515, 237, 
           1608}, {1606, 233, 1356}, {1651, 672, 1624}, {245, 241, 237}, {672,
            249, 233}, {1360, 241, 1650}, {808, 809, 242}, {348, 808, 1}, {
           809, 810, 242}, {249, 672, 241}, {1357, 233, 1606}, {1626, 348, 
           1722}, {241, 245, 225}, {246, 348, 1}, {1624, 672, 1625}, {1721, 
           242, 1723}, {1529, 241, 1360}, {1726, 810, 1725}}], 
          
          PolygonBox[{{1725, 810, 809, 1724}, {1723, 242, 810, 1726}, {1359, 
           237, 241, 1529}, {1625, 672, 233, 1357}, {1650, 241, 672, 1651}, {
           1628, 348, 246, 1362}, {1724, 809, 348, 1626}}]}]}}, {{}, 
       TagBox[
        TooltipBox[{
          Directive[
           GrayLevel[0], 
           Opacity[0.5], 
           CapForm["Butt"]], 
          
          LineBox[{1356, 1606, 1357, 1625, 1624, 1651, 1650, 1360, 1529, 1359,
            1608, 1515}], 
          
          LineBox[{1361, 1627, 1362, 1628, 1722, 1626, 1724, 1725, 1726, 1723,
            1721}]}, "0.8`"], Annotation[#, 0.8, "Tooltip"]& ], 
       TagBox[
        TooltipBox[{
          Directive[
           GrayLevel[0], 
           Opacity[0.5], 
           CapForm["Butt"]], 
          
          LineBox[{1268, 1665, 1427, 1887, 1375, 1422, 1980, 1263, 1327, 1880,
            1881, 1732, 1369, 1691, 2004, 1690, 1368, 1731, 1255, 1323, 1415, 
           1871, 1416, 1872, 1363, 1530, 1611}], 
          
          LineBox[{1312, 1684, 1473, 1946, 1643, 1621, 1638, 1637, 1642, 1347,
            1311, 1683, 1682, 1945, 1944, 1410, 1863, 1865, 1864, 1950, 1553, 
           1322, 2003, 1481, 1523, 1954, 1483, 1953, 1482}]}, "0.6`"], 
        Annotation[#, 0.6, "Tooltip"]& ], 
       TagBox[
        TooltipBox[{
          Directive[
           GrayLevel[0], 
           Opacity[0.5], 
           CapForm["Butt"]], 
          
          LineBox[{1257, 1531, 1655, 1654, 1653, 1417, 1516, 1324, 1256, 1733,
            1370, 1692, 1693, 1884, 1424, 1882, 1423, 1883, 1532, 1533, 1429, 
           2005, 1428, 1328, 1269, 1982, 1430, 1537, 1536, 1273, 1984, 1436, 
           1894, 1697, 1747, 1746, 1893, 1330, 1272, 1983, 1435, 1539, 1538, 
           1574}], 
          
          LineBox[{1321, 1351, 1522, 1480, 2002, 1320, 1552, 1948, 1949, 1862,
            1409, 1861, 1408, 1472, 1999, 1310, 1346, 1470, 1942, 1471, 1943, 
           1402, 1929, 1465, 1679, 1680, 1681, 1344, 1463, 1927, 1464, 1928, 
           1400, 1849, 1851, 1850, 1305, 1549, 1922, 1923, 1921, 1462, 1519, 
           1342, 1588}]}, "0.4`"], Annotation[#, 0.4, "Tooltip"]& ], 
       TagBox[
        TooltipBox[{
          Directive[
           GrayLevel[0], 
           Opacity[0.5], 
           CapForm["Butt"]], 
          
          LineBox[{1297, 1828, 1392, 1826, 1391, 1827, 1296, 1992, 1456, 1919,
            1708, 1390, 1825, 1453, 1916, 1340, 1518, 1455, 1917, 1454, 1918, 
           1548, 1301, 1838, 1395, 1837, 1394, 1460, 2008, 1459, 1341, 1300, 
           1994, 1461, 1398, 1847, 1399, 1848, 1926, 1925, 1550, 1308, 1998, 
           1469, 1520, 1345, 1309, 1860, 1407, 1716, 1717, 1718, 1317, 1685, 
           1476, 1947, 1413, 1869, 1414, 1870, 1479}], 
          
          LineBox[{1418, 1629, 1364, 1614, 1615, 1874, 1875, 1873, 1419, 1735,
            1371, 1734, 1372, 1736, 1425, 1885, 1534, 1535, 1432, 1888, 1431, 
           1329, 1270, 1748, 1749, 1698, 1699, 1438, 2006, 1437, 1540, 1276, 
           1987, 1441, 1898, 1701, 1759, 1758, 1897, 1332, 1275, 1986, 1440, 
           1542, 1541, 1280, 1767, 1382, 1765, 1381, 2014, 1766, 1279, 1675, 
           1443, 1900, 1639, 1618, 1380, 1633, 1676}]}, "0.2`"], 
        Annotation[#, 0.2, "Tooltip"]& ], 
       TagBox[
        TooltipBox[{
          Directive[
           GrayLevel[0], 
           Opacity[0.5], 
           CapForm["Butt"]], 
          LineBox[CompressedData["
1:eJwVzrsyQ1EYBeA/kpxcyjS0WqHFc2QUKjM0xhgknoYHcKmpDQ2doEFUgsIl
RdC4y7eLb9Zea/aZfUYX1hqruYiYJV+M6GcRr+ywV4qYtO3LMb1ORz/WC3Jc
z+Sn/OKDH74p2f/kP7/kfBOU7fn0PUNkFKnYK+5V2XI+Sbucoun8Zn9nl5Y+
bV+X23Ip/a8sp3dZsb/IHo8888Sy/V4+cMsdXRbtHXnDJddcMW8/lxecckab
OfuwHEnduwd6vxBRS2/JCdum8wZHHDLjzgCA6TQg
           "]], 
          LineBox[CompressedData["
1:eJwVzbsyQ1EUBuCl4JCEIIjCdZiRkMptJheikYbKeIJQKShcwmhSeAXvIHkB
ei/gRRRmXFrfKb751/rPPnsvt69OLgci4pS1wYgWb0MRrxwnEUes6g754p0P
3YrMO/NsbnJAg332eGKHXTbZZosuG1QosU6ZRxZZYo4F5nlgmBESLrzb9u45
Z2TsWX2ODGOMktWPywnyFJhMz+mn5QxTzFJM/0nvcd+t+cV8I3vykyrX9m/f
f+hxZ6/pO/LX/kefe3td3+cfLPgeRQ==
           "]]}, "0"], 
        Annotation[#, 0, "Tooltip"]& ], 
       TagBox[
        TooltipBox[{
          Directive[
           GrayLevel[0], 
           Opacity[0.5], 
           CapForm["Butt"]], 
          
          LineBox[{1259, 1730, 1365, 1729, 1366, 1877, 1420, 1656, 1260, 1737,
            1373, 1694, 1695, 1696, 1265, 1561, 1562, 1489, 1962, 1488, 1963, 
           1565, 1890, 1756, 1757, 1755, 1377, 1492, 1985, 1274, 1570, 1277, 
           1988, 1442, 1379, 1702, 1967, 1333, 1968, 1575, 1495, 1969, 1496, 
           1577, 1576, 1281, 1774, 1383, 1773, 1384, 1775, 1282, 1677, 1903, 
           1902, 1385, 1619, 1640, 2011, 2013, 2012, 1444}], 
          
          LineBox[{1452, 1818, 1387, 1817, 1388, 1819, 1294, 1678, 1451, 1914,
            1389, 1707, 1972, 1973, 1498, 1974, 1581, 1582, 1499, 1991, 1295, 
           1583, 1299, 1830, 1831, 1829, 1393, 1502, 2009, 1501, 1587, 1457, 
           2007, 1458, 1397, 1709, 1710, 1343, 1304, 1592, 1307, 1997, 1507, 
           1597, 1596, 1939, 1940, 1858, 1405, 1857, 1406, 1859, 1474, 1644, 
           2010, 1411, 1866, 1412, 1951, 1952, 1686, 1687}]}, 
         RowBox[{"-", "0.2`"}]], Annotation[#, -0.2, "Tooltip"]& ], 
       TagBox[
        TooltipBox[{
          Directive[
           GrayLevel[0], 
           Opacity[0.5], 
           CapForm["Butt"]], 
          LineBox[{1278, 1572, 1573, 1494, 1966, 1493, 1571, 1965, 1331, 1964,
            1700, 1378, 1896, 1439, 1672, 1673, 1674, 1569, 1671, 1670, 1669, 
           1491, 1568, 1566, 1567, 1490, 1666, 1667, 1668, 1563, 1660, 1659, 
           1658, 1487, 1957, 1374, 1738, 1740, 1739, 1878, 1557, 1956, 1484, 
           1955, 1485, 1556, 1555, 1604}], 
          
          LineBox[{1603, 1602, 1979, 1510, 1978, 1511, 1600, 1599, 1314, 1715,
            1714, 1713, 1404, 1937, 1938, 1936, 1468, 1594, 1595, 1506, 1996, 
           1306, 1591, 1303, 1995, 1505, 1590, 1589, 1976, 1503, 1975, 1504, 
           1977, 1396, 1839, 1841, 1840, 1302, 1586, 1298, 1993, 1500, 1585, 
           1584, 1613, 1612}]}, 
         RowBox[{"-", "0.4`"}]], Annotation[#, -0.4, "Tooltip"]& ], 
       TagBox[
        TooltipBox[{
          Directive[
           GrayLevel[0], 
           Opacity[0.5], 
           CapForm["Butt"]], 
          
          LineBox[{1261, 1657, 1421, 1879, 1367, 1616, 1617, 1326, 1262, 1558,
            1266, 1662, 1661, 1959, 1958, 1426, 1960, 1961, 1663, 1664, 1267, 
           1564, 1271, 1631, 1632, 1630, 1376, 1892, 1434, 1891, 1433}], 
          
          LineBox[{1466, 1930, 1932, 1931, 1401, 1620, 1645, 1646, 1648, 1647,
            1593, 1467, 1933, 1935, 1934, 1403, 1711, 1712, 1348, 1313, 1598, 
           1318, 2001, 1509, 1477, 1601, 1478}]}, 
         RowBox[{"-", "0.6`"}]], Annotation[#, -0.6, "Tooltip"]& ], 
       TagBox[
        TooltipBox[{
          Directive[
           GrayLevel[0], 
           Opacity[0.5], 
           CapForm["Butt"]], 
          LineBox[{1352, 1610, 1353, 1524, 1622, 1526, 1358, 1607, 1514}], 
          
          LineBox[{1354, 1609, 1355, 1525, 1623, 1649, 1512, 1652, 1527, 1528,
            1513, 1605, 1508}]}, 
         RowBox[{"-", "0.8`"}]], 
        Annotation[#, -0.8, "Tooltip"]& ], {}, {}}}], {
    DisplayFunction -> Identity, AspectRatio -> 1, DisplayFunction :> 
     Identity, Frame -> True, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], Method -> {"DefaultBoundaryStyle" -> Automatic}, 
     PlotRange -> {{-1, 1}, {-1, 1}}, PlotRangeClipping -> True, 
     PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.02]}}, Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{
       FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           GraphicsBox[{{}, {}, 
             
             RasterBox[{{{0.471412, 0.108766, 0.527016}}, {{
              0.2814218011130499, 0.1705398831334374, 0.7158947040058774}}, {{
              0.2523034861667948, 0.4080347629984457, 0.8110268656659603}}, {{
              0.31982733179023015`, 0.6034658443460624, 
              0.715710765094938}}, {{0.4412704038510745, 0.7056875489022256, 
              0.5266959359100543}}, {{0.6094599774575785, 0.7436970658137668, 
              0.35748424642399124`}}, {{0.7856342413182854, 
              0.7232925982373696, 0.26464723483526686`}}, {{
              0.8928474464850373, 0.6019771799070286, 
              0.22090205371651067`}}, {{0.8864199804750365, 
              0.3472111313846667, 0.1710739529345884}}, {{0.857359, 0.131106, 
              0.132128}}}, {{
                Rational[-15, 2], 
                Rational[-225, 2]}, {
                Rational[15, 2], 
                Rational[225, 2]}}], {Antialiasing -> False, 
              AbsoluteThickness[0.1], 
              Directive[
               Opacity[0.3], 
               GrayLevel[0]], 
              LineBox[
               NCache[{{
                  Rational[15, 2], 
                  Rational[-225, 2]}, {
                  Rational[-15, 2], 
                  Rational[-225, 2]}, {
                  Rational[-15, 2], 
                  Rational[225, 2]}, {
                  Rational[15, 2], 
                  Rational[225, 2]}, {
                  Rational[15, 2], 
                  Rational[-225, 2]}}, {{7.5, -112.5}, {-7.5, -112.5}, {-7.5, 
                112.5}, {7.5, 112.5}, {7.5, -112.5}}]]}, {
              CapForm[None], {{
                Directive[
                 GrayLevel[0], 
                 Opacity[0.5], 
                 CapForm["Butt"]], 
                CapForm["Butt"], 
                LineBox[
                 NCache[{{
                    Rational[-15, 2], -90.}, {
                    Rational[15, 2], -90.}}, {{-7.5, -90.}, {7.5, -90.}}]]}, {
               
                Directive[
                 GrayLevel[0], 
                 Opacity[0.5], 
                 CapForm["Butt"]], 
                CapForm["Butt"], 
                LineBox[
                 NCache[{{
                    Rational[-15, 2], -67.5}, {
                    Rational[15, 2], -67.5}}, {{-7.5, -67.5}, {
                  7.5, -67.5}}]]}, {
                Directive[
                 GrayLevel[0], 
                 Opacity[0.5], 
                 CapForm["Butt"]], 
                CapForm["Butt"], 
                LineBox[
                 NCache[{{
                    Rational[-15, 2], -44.99999999999999}, {
                    Rational[
                    15, 2], -44.99999999999999}}, {{-7.5, \
-44.99999999999999}, {7.5, -44.99999999999999}}]]}, {
                Directive[
                 GrayLevel[0], 
                 Opacity[0.5], 
                 CapForm["Butt"]], 
                CapForm["Butt"], 
                LineBox[
                 NCache[{{
                    Rational[-15, 2], -22.499999999999996`}, {
                    Rational[
                    15, 2], -22.499999999999996`}}, {{-7.5, \
-22.499999999999996`}, {7.5, -22.499999999999996`}}]]}, {
                Directive[
                 GrayLevel[0], 
                 Opacity[0.5], 
                 CapForm["Butt"]], 
                CapForm["Butt"], 
                LineBox[
                 NCache[{{
                    Rational[-15, 2], 0.}, {
                    Rational[15, 2], 0.}}, {{-7.5, 0.}, {7.5, 0.}}]]}, {
                Directive[
                 GrayLevel[0], 
                 Opacity[0.5], 
                 CapForm["Butt"]], 
                CapForm["Butt"], 
                LineBox[
                 NCache[{{
                    Rational[-15, 2], 22.5}, {
                    Rational[15, 2], 22.5}}, {{-7.5, 22.5}, {7.5, 22.5}}]]}, {
               
                Directive[
                 GrayLevel[0], 
                 Opacity[0.5], 
                 CapForm["Butt"]], 
                CapForm["Butt"], 
                LineBox[
                 NCache[{{
                    Rational[-15, 2], 45.}, {
                    Rational[15, 2], 45.}}, {{-7.5, 45.}, {7.5, 45.}}]]}, {
                Directive[
                 GrayLevel[0], 
                 Opacity[0.5], 
                 CapForm["Butt"]], 
                CapForm["Butt"], 
                LineBox[
                 NCache[{{
                    Rational[-15, 2], 67.49999999999999}, {
                    Rational[15, 2], 67.49999999999999}}, {{-7.5, 
                  67.49999999999999}, {7.5, 67.49999999999999}}]]}, {
                Directive[
                 GrayLevel[0], 
                 Opacity[0.5], 
                 CapForm["Butt"]], 
                CapForm["Butt"], 
                LineBox[
                 NCache[{{
                    Rational[-15, 2], 89.99999999999999}, {
                    Rational[15, 2], 89.99999999999999}}, {{-7.5, 
                  89.99999999999999}, {7.5, 89.99999999999999}}]]}}}, {
             Antialiasing -> False, 
              StyleBox[
               
               LineBox[{{7.500000000000001, -112.50000000000001`}, {
                7.500000000000001, 112.50000000000001`}}], 
               Directive[
                AbsoluteThickness[0.2], 
                Opacity[0.3], 
                GrayLevel[0]], StripOnInput -> False], 
              StyleBox[
               StyleBox[{{
                  StyleBox[
                   LineBox[{{{7.500000000000001, -90.}, 
                    Offset[{4., 0}, {7.500000000000001, -90.}]}, {{
                    7.500000000000001, -67.5}, 
                    Offset[{4., 0}, {7.500000000000001, -67.5}]}, {{
                    7.500000000000001, -45.}, 
                    Offset[{4., 0}, {7.500000000000001, -45.}]}, {{
                    7.500000000000001, -22.5}, 
                    Offset[{4., 0}, {7.500000000000001, -22.5}]}, {{
                    7.500000000000001, 0.}, 
                    Offset[{4., 0}, {7.500000000000001, 0.}]}, {{
                    7.500000000000001, 22.5}, 
                    Offset[{4., 0}, {7.500000000000001, 22.5}]}, {{
                    7.500000000000001, 45.}, 
                    Offset[{4., 0}, {7.500000000000001, 45.}]}, {{
                    7.500000000000001, 67.5}, 
                    Offset[{4., 0}, {7.500000000000001, 67.5}]}, {{
                    7.500000000000001, 90.}, 
                    Offset[{4., 0}, {7.500000000000001, 90.}]}}], 
                   Directive[
                    AbsoluteThickness[0.2], 
                    GrayLevel[0.4]], StripOnInput -> False]}, 
                 StyleBox[
                  StyleBox[{{
                    StyleBox[{
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox["\"-0.8\"", -0.8, AutoDelete -> True], 
                    NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    Offset[{7., 0.}, {7.500000000000001, -90.}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox["\"-0.6\"", -0.6, AutoDelete -> True], 
                    NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    Offset[{7., 0.}, {7.500000000000001, -67.5}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox["\"-0.4\"", -0.4, AutoDelete -> True], 
                    NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    Offset[{7., 0.}, {7.500000000000001, -45.}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox["\"-0.2\"", -0.2, AutoDelete -> True], 
                    NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    Offset[{7., 0.}, {7.500000000000001, -22.5}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["0", TraditionalForm], 
                    Offset[{7., 0.}, {7.500000000000001, 0.}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox["\"0.2\"", 0.2, AutoDelete -> True], 
                    NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    Offset[{7., 0.}, {7.500000000000001, 22.5}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox["\"0.4\"", 0.4, AutoDelete -> True], 
                    NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    Offset[{7., 0.}, {7.500000000000001, 45.}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox["\"0.6\"", 0.6, AutoDelete -> True], 
                    NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    Offset[{7., 0.}, {7.500000000000001, 67.5}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox["\"0.8\"", 0.8, AutoDelete -> True], 
                    NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    Offset[{7., 0.}, {7.500000000000001, 90.}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}]}, 
                    Directive[
                    AbsoluteThickness[0.2], 
                    GrayLevel[0.4]], {
                    Directive[
                    Opacity[1]]}, StripOnInput -> False]}, {}}, {
                    Directive[
                    Opacity[1]]}, StripOnInput -> False], "GraphicsLabel", 
                  StripOnInput -> False]}, "GraphicsTicks", StripOnInput -> 
                False], 
               Directive[
                AbsoluteThickness[0.2], 
                Opacity[0.3], 
                GrayLevel[0]], StripOnInput -> False]}}, PlotRangePadding -> 
            Scaled[0.02], PlotRange -> All, Frame -> True, 
            FrameTicks -> {{False, False}, {True, False}}, FrameStyle -> 
            Opacity[0], FrameTicksStyle -> Opacity[0], 
            ImageSize -> {Automatic, 225}, BaseStyle -> {}], Alignment -> 
           Left, AppearanceElements -> None, ImageMargins -> {{5, 5}, {5, 5}},
            ImageSizeAction -> "ResizeToFit"], LineIndent -> 0, StripOnInput -> 
          False], {FontFamily -> "Arial"}, Background -> Automatic, 
         StripOnInput -> False], TraditionalForm]}, "BarLegend", 
      DisplayFunction -> (#& ), 
      InterpretationFunction :> (RowBox[{"BarLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{
                 RowBox[{"Blend", "[", 
                   RowBox[{"\"Rainbow\"", ",", "#1"}], "]"}], "&"}], ",", 
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"-", "0.858489453792572`"}], ",", 
                   "0.8419821858406067`"}], "}"}]}], "}"}], ",", 
           RowBox[{"{", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"-", "0.8`"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"CapForm", "[", "\"Butt\"", "]"}]}], "]"}]}], 
                 "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"-", "0.6`"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"CapForm", "[", "\"Butt\"", "]"}]}], "]"}]}], 
                 "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"-", "0.4`"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"CapForm", "[", "\"Butt\"", "]"}]}], "]"}]}], 
                 "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"-", "0.2`"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"CapForm", "[", "\"Butt\"", "]"}]}], "]"}]}], 
                 "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{"0.`", ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"CapForm", "[", "\"Butt\"", "]"}]}], "]"}]}], 
                 "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{"0.2`", ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"CapForm", "[", "\"Butt\"", "]"}]}], "]"}]}], 
                 "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{"0.4`", ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"CapForm", "[", "\"Butt\"", "]"}]}], "]"}]}], 
                 "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{"0.6`", ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"CapForm", "[", "\"Butt\"", "]"}]}], "]"}]}], 
                 "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{"0.8`", ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0]"], 
                    Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}], ",", 
                    RowBox[{"CapForm", "[", "\"Butt\"", "]"}]}], "]"}]}], 
                 "}"}]}], "}"}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}], ",", 
           RowBox[{"Charting`TickAnnotations", "\[Rule]", "None"}], ",", 
           RowBox[{"Charting`TickSide", "\[Rule]", "Right"}], ",", 
           RowBox[{"ColorFunctionScaling", "\[Rule]", "True"}]}], "]"}]& )], 
     TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.6926471769291067`*^9, 3.692904369113473*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Loss Specifications", "Chapter",
 CellChangeTimes->{3.692904442580564*^9}],

Cell[CellGroupData[{

Cell["Train a simple net using MeanSquaredLossLayer", "Subchapter",
 CellChangeTimes->{{3.692647743191873*^9, 3.6926477450147467`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"net", " ", "=", " ", 
   RowBox[{"DotPlusLayer", "[", 
    RowBox[{
     RowBox[{"\"\<Input\>\"", "\[Rule]", " ", "\"\<Scalar\>\""}], ",", " ", 
     RowBox[{"\"\<Output\>\"", "\[Rule]", " ", "\"\<Scalar\>\""}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"data", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"1", "\[Rule]", "1.9"}], ",", " ", 
     RowBox[{"2", "\[Rule]", "4.1"}], ",", " ", 
     RowBox[{"3", "\[Rule]", " ", "6.0"}], ",", " ", 
     RowBox[{"4", "\[Rule]", " ", "8.1"}]}], "}"}]}], ";"}], "\n", 
 RowBox[{"trained", " ", "=", " ", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net", ",", " ", "data"}], "]"}]}]}], "Code",
 CellChangeTimes->{{3.692647747264838*^9, 3.692647846550293*^9}}],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["DotPlusLayer", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open$$ = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = True), Appearance -> None,
                 Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 Opacity[0.3], {{
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
                 AbsolutePointSize[5], 
                 PointBox[{{0, 0}, {1, 0}}], 
                 PointBox[
                  NCache[{{
                    Rational[-1, 2], 1}, {
                    Rational[1, 2], 1}, {
                    Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
               ImageSize -> 32], 
              GridBox[{{
                 ItemBox[
                  StyleBox["\"Parameters:\"", Bold, StripOnInput -> False], 
                  StripOnInput -> False], 
                 ItemBox["\"\"", StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Size\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["1", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 Opacity[0.3], {{
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
                 AbsolutePointSize[5], 
                 PointBox[{{0, 0}, {1, 0}}], 
                 PointBox[
                  NCache[{{
                    Rational[-1, 2], 1}, {
                    Rational[1, 2], 1}, {
                    Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
               ImageSize -> 32], 
              GridBox[{{
                 ItemBox[
                  StyleBox["\"Parameters:\"", Bold, StripOnInput -> False], 
                  StripOnInput -> False], 
                 ItemBox["\"\"", StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Size\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["1", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["\"Arrays:\"", Bold, StripOnInput -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85], StripOnInput -> False], 
                 ItemBox[
                  InterpretationBox[
                   StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                   Spacer[{1, 11}]], Frame -> {{False, False}, {False, True}},
                   FrameStyle -> GrayLevel[0.85], StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Weights\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"matrix\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Biases\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["\"Ports:\"", Bold, StripOnInput -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85], StripOnInput -> False], 
                 ItemBox[
                  InterpretationBox[
                   StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                   Spacer[{1, 11}]], Frame -> {{False, False}, {False, True}},
                   FrameStyle -> GrayLevel[0.85], StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"encoded\"", "\" \"", 
                    TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"]}, "RowDefault"], "SummaryItem", 
                   StripOnInput -> False], "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"decoded\"", "\" \"", 
                    TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"]}, "RowDefault"], "SummaryItem", 
                   StripOnInput -> False], "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic], BaselinePosition -> 
        Baseline], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("None"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.692647851099977*^9, 3.692904373153728*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trained", "[", 
  RowBox[{"Range", "[", "4", "]"}], "]"}]], "Code",
 CellChangeTimes->{{3.692647860876752*^9, 3.692647869133441*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1.9500058889389038`", ",", "4.000001907348633`", ",", "6.049997806549072`",
    ",", "8.099994659423828`"}], "}"}]], "Output",
 CellChangeTimes->{3.692647869651445*^9, 3.692904373272553*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"loss", " ", "=", " ", 
  RowBox[{"MeanAbsoluteLossLayer", "[", 
   RowBox[{"\"\<Target\>\"", "\[Rule]", " ", "\"\<Scalar\>\""}], 
   "]"}]}]], "Code",
 CellChangeTimes->{{3.692647871925886*^9, 3.6926478918859377`*^9}}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["MeanAbsoluteLossLayer",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{15., {0., 15.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[{
           {Opacity[
            0.3], {LineBox[
              NCache[{{0, 0}, {Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
             LineBox[NCache[{{0, 0}, {Rational[1, 2], 1}}, {{0, 0}, {
                0.5, 1}}]], 
             LineBox[NCache[{{0, 0}, {Rational[3, 2], 1}}, {{0, 0}, {
                1.5, 1}}]]}, {
             LineBox[NCache[{{1, 0}, {Rational[-1, 2], 1}}, {{1, 
                0}, {-0.5, 1}}]], 
             LineBox[NCache[{{1, 0}, {Rational[1, 2], 1}}, {{1, 0}, {
                0.5, 1}}]], 
             LineBox[NCache[{{1, 0}, {Rational[3, 2], 1}}, {{1, 0}, {
                1.5, 1}}]]}}, 
           {AbsolutePointSize[5], PointBox[{{0, 0}, {1, 0}}], 
            PointBox[
             NCache[{{Rational[-1, 2], 1}, {Rational[1, 2], 1}, {
               Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}},
          ImageSize->32], GridBox[{
           {
            ItemBox[
             StyleBox["\<\"Parameters:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             StripOnInput->False], 
            ItemBox["\<\"\"\>",
             StripOnInput->False]},
           {
            TagBox[
             StyleBox["\<\"none\"\>",
              StripOnInput->False,
              LineColor->GrayLevel[0.5],
              FrontFaceColor->GrayLevel[0.5],
              BackFaceColor->GrayLevel[0.5],
              GraphicsColor->GrayLevel[0.5],
              FontColor->GrayLevel[0.5]],
             "SummaryItem"], ""}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->
      GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquareMinusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[{
           {Opacity[
            0.3], {LineBox[
              NCache[{{0, 0}, {Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
             LineBox[NCache[{{0, 0}, {Rational[1, 2], 1}}, {{0, 0}, {
                0.5, 1}}]], 
             LineBox[NCache[{{0, 0}, {Rational[3, 2], 1}}, {{0, 0}, {
                1.5, 1}}]]}, {
             LineBox[NCache[{{1, 0}, {Rational[-1, 2], 1}}, {{1, 
                0}, {-0.5, 1}}]], 
             LineBox[NCache[{{1, 0}, {Rational[1, 2], 1}}, {{1, 0}, {
                0.5, 1}}]], 
             LineBox[NCache[{{1, 0}, {Rational[3, 2], 1}}, {{1, 0}, {
                1.5, 1}}]]}}, 
           {AbsolutePointSize[5], PointBox[{{0, 0}, {1, 0}}], 
            PointBox[
             NCache[{{Rational[-1, 2], 1}, {Rational[1, 2], 1}, {
               Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}},
          ImageSize->32], GridBox[{
           {
            ItemBox[
             StyleBox["\<\"Parameters:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             StripOnInput->False], 
            ItemBox["\<\"\"\>",
             StripOnInput->False]},
           {
            TagBox[
             StyleBox["\<\"none\"\>",
              StripOnInput->False,
              LineColor->GrayLevel[0.5],
              FrontFaceColor->GrayLevel[0.5],
              BackFaceColor->GrayLevel[0.5],
              GraphicsColor->GrayLevel[0.5],
              FontColor->GrayLevel[0.5]],
             "SummaryItem"], ""},
           {
            ItemBox[
             StyleBox["\<\"Ports:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             Frame->{{False, False}, {False, True}},
             FrameStyle->GrayLevel[0.85],
             StripOnInput->False], 
            ItemBox[
             InterpretationBox[
              StyleBox[
               GraphicsBox[{},
                BaselinePosition->(Scaled[0.] -> Baseline),
                ImageSize->{1, 11}],
               CacheGraphics->False],
              Spacer[{1, 11}]],
             Frame->{{False, False}, {False, True}},
             FrameStyle->GrayLevel[0.85],
             StripOnInput->False]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Input\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox[
              
              TemplateBox[{
               "\"vector\"","\" \"",
                TemplateBox[{
                 "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                  "\" \"", 
                  
                  TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                   "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                 "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                 InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]},
               "RowDefault"], "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Target\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox[
              
              TemplateBox[{
               "\"encoded\"","\" \"",TemplateBox[{"\"vector\"", "\" \"", 
                  
                  TemplateBox[{
                   "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                   "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                   InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                 "RowDefault"]},
               "RowDefault"], "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Loss\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox["\<\"scalar\"\>", "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  None,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.692647892392412*^9, 3.6929043733351173`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"loss", "[", 
  RowBox[{"<|", 
   RowBox[{
    RowBox[{"\"\<Input\>\"", "\[Rule]", "5.0"}], ",", " ", 
    RowBox[{"\"\<Target\>\"", " ", "\[Rule]", " ", "3.0"}]}], "|>"}], 
  "]"}]], "Code",
 CellChangeTimes->{{3.692647894705843*^9, 3.6926479249022903`*^9}}],

Cell[BoxData["2.`"], "Output",
 CellChangeTimes->{3.692647925467596*^9, 3.6929043733857107`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"data", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"1", " ", "->", " ", "1.9"}], ",", " ", 
     RowBox[{"2", " ", "->", " ", "4.1"}], ",", " ", 
     RowBox[{"3", " ", "->", " ", "6.0"}], ",", " ", 
     RowBox[{"4", " ", "->", " ", "8.1"}]}], "}"}]}], ";"}], "\n", 
 RowBox[{"trained", " ", "=", " ", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net", ",", " ", "data", ",", " ", "loss"}], "]"}]}]}], "Code",
 CellChangeTimes->{{3.692648189213097*^9, 3.692648190244525*^9}}],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["DotPlusLayer", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open$$ = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = True), Appearance -> None,
                 Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 Opacity[0.3], {{
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
                 AbsolutePointSize[5], 
                 PointBox[{{0, 0}, {1, 0}}], 
                 PointBox[
                  NCache[{{
                    Rational[-1, 2], 1}, {
                    Rational[1, 2], 1}, {
                    Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
               ImageSize -> 32], 
              GridBox[{{
                 ItemBox[
                  StyleBox["\"Parameters:\"", Bold, StripOnInput -> False], 
                  StripOnInput -> False], 
                 ItemBox["\"\"", StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Size\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["1", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 Opacity[0.3], {{
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
                 AbsolutePointSize[5], 
                 PointBox[{{0, 0}, {1, 0}}], 
                 PointBox[
                  NCache[{{
                    Rational[-1, 2], 1}, {
                    Rational[1, 2], 1}, {
                    Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
               ImageSize -> 32], 
              GridBox[{{
                 ItemBox[
                  StyleBox["\"Parameters:\"", Bold, StripOnInput -> False], 
                  StripOnInput -> False], 
                 ItemBox["\"\"", StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Size\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["1", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["\"Arrays:\"", Bold, StripOnInput -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85], StripOnInput -> False], 
                 ItemBox[
                  InterpretationBox[
                   StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                   Spacer[{1, 11}]], Frame -> {{False, False}, {False, True}},
                   FrameStyle -> GrayLevel[0.85], StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Weights\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"matrix\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Biases\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["\"Ports:\"", Bold, StripOnInput -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85], StripOnInput -> False], 
                 ItemBox[
                  InterpretationBox[
                   StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                   Spacer[{1, 11}]], Frame -> {{False, False}, {False, True}},
                   FrameStyle -> GrayLevel[0.85], StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"encoded\"", "\" \"", 
                    TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"]}, "RowDefault"], "SummaryItem", 
                   StripOnInput -> False], "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"decoded\"", "\" \"", 
                    TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"]}, "RowDefault"], "SummaryItem", 
                   StripOnInput -> False], "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic], BaselinePosition -> 
        Baseline], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("None"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.692648192430231*^9, 3.69264822167736*^9}, 
   3.6929043819103937`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trained", "[", 
  RowBox[{"Range", "[", "4", "]"}], "]"}]], "Code",
 CellChangeTimes->{{3.692648196903866*^9, 3.692648205108556*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1.8999674320220947`", ",", "3.966712236404419`", ",", "6.033456802368164`",
    ",", "8.100201606750488`"}], "}"}]], "Output",
 CellChangeTimes->{{3.692648205978541*^9, 3.692648223608526*^9}, 
   3.692904381994494*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Options", "Chapter",
 CellChangeTimes->{3.6929044518866158`*^9}],

Cell[CellGroupData[{

Cell["1. BatchSize", "Subchapter",
 CellChangeTimes->{{3.6929044599520197`*^9, 3.692904462031412*^9}}],

Cell[CellGroupData[{

Cell["?", "Subsection",
 CellChangeTimes->{{3.692648568665213*^9, 3.692648571195511*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"trainingData", " ", "=", " ", "\n", "  ", 
   RowBox[{
    RowBox[{"RandomReal", "[", 
     RowBox[{"1", ",", " ", 
      RowBox[{"{", 
       RowBox[{"10000", ",", " ", "4"}], "}"}]}], "]"}], " ", "->", " ", 
    RowBox[{"RandomReal", "[", 
     RowBox[{"1", ",", " ", 
      RowBox[{"{", 
       RowBox[{"10000", ",", " ", "4"}], "}"}]}], "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"net", " ", "=", " ", 
   RowBox[{"NetChain", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"DotPlusLayer", "[", "8", "]"}], ",", " ", 
       RowBox[{"DotPlusLayer", "[", "4", "]"}]}], "}"}], ",", " ", 
     RowBox[{"\"\<Input\>\"", " ", "->", " ", "4"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"NetTrain", "[", 
    RowBox[{"net", ",", " ", "trainingData", ",", " ", 
     RowBox[{"BatchSize", " ", "->", " ", "512"}], ",", " ", "\n", "   ", 
     RowBox[{"MaxTrainingRounds", " ", "->", " ", "20"}]}], "]"}], ";"}], " ",
   "//", " ", "AbsoluteTiming"}]}], "Code",
 CellChangeTimes->{3.692648578698723*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.254998`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{{3.692648580197791*^9, 3.692648601632324*^9}, 
   3.69290438231807*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["MaxTrainingRounds", "Subchapter",
 CellChangeTimes->{3.6929044680281153`*^9}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"trainingData", " ", "=", " ", "\n", "  ", 
   RowBox[{
    RowBox[{"RandomReal", "[", 
     RowBox[{"1", ",", " ", 
      RowBox[{"{", 
       RowBox[{"10000", ",", " ", "4"}], "}"}]}], "]"}], " ", "->", " ", 
    RowBox[{"RandomReal", "[", 
     RowBox[{"1", ",", " ", 
      RowBox[{"{", 
       RowBox[{"10000", ",", " ", "4"}], "}"}]}], "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"net", " ", "=", " ", 
   RowBox[{"NetChain", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"8", ",", " ", "4"}], "}"}], ",", " ", 
     RowBox[{"\"\<Input\>\"", " ", "->", " ", "4"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{"NetTrain", "[", 
  RowBox[{"net", ",", " ", "trainingData", ",", " ", 
   RowBox[{"MaxTrainingRounds", " ", "->", " ", "1"}]}], "]"}]}], "Code",
 CellChangeTimes->{3.6926486284464073`*^9}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"4"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Inputs", "Input"}, "Mouse"], 
            "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"8"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["2", 
              GrayLevel[0.5]], {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"4"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "2"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"4"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Outputs", "Output"}, "Mouse"], 
            "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {8, 4}], "Biases" -> 
               NeuralNetworks`TensorT[1, {8}]], "Parameters" -> 
             Association["Size" -> 8, "$InputSize" -> 4], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {4}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {8}]]], "2" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {4, 8}], "Biases" -> 
               NeuralNetworks`TensorT[1, {4}]], "Parameters" -> 
             Association["Size" -> 4, "$InputSize" -> 8], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {8}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {4}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "2", "Inputs", "Input"] -> 
           NetPort["Layers", "1", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "2", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`TensorT[1, {4}]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`TensorT[1, {4}]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{206., {30.771240234375, 37.228759765625}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.692648629441633*^9, 3.692904382479278*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Method", "Chapter",
 CellChangeTimes->{{3.692649281729438*^9, 3.692649286295433*^9}}],

Cell[CellGroupData[{

Cell["1. Stochastic Gradient Decent", "Subchapter",
 CellChangeTimes->{{3.692649291061027*^9, 3.692649301570755*^9}, {
  3.6929044749629707`*^9, 3.692904475361347*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dotPlus", " ", "=", " ", 
  RowBox[{"DotPlusLayer", "[", 
   RowBox[{"1", ",", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", " ", "\"\<Scalar\>\""}], ",", " ", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", " ", "\"\<Scalar\>\""}]}], 
   "]"}]}]], "Code",
 CellChangeTimes->{{3.6926494371861486`*^9, 3.692649471792757*^9}}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DotPlusLayer",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{15., {0., 15.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         TemplateBox[{GraphicsBox[{{
              Opacity[0.3], {{
                LineBox[
                 NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                LineBox[
                 NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                LineBox[
                 NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                LineBox[
                 NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                LineBox[
                 NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                LineBox[
                 NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
              AbsolutePointSize[5], 
              PointBox[{{0, 0}, {1, 0}}], 
              PointBox[
               NCache[{{
                  Rational[-1, 2], 1}, {
                  Rational[1, 2], 1}, {
                  Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
            ImageSize -> 32, BaseStyle -> GrayLevel[0.65]],StyleBox[
           "\"uninitialized\"", 
            GrayLevel[0.5], FontSize -> 8, StripOnInput -> False]},
          "Labeled",
          DisplayFunction->(GridBox[{{
              TagBox[
               ItemBox[
                PaneBox[
                 TagBox[#, "SkipImageSizeLevel"], 
                 Alignment -> {Center, Baseline}, BaselinePosition -> 
                 Baseline], DefaultBaseStyle -> "Labeled"], 
               "SkipImageSizeLevel"]}, {
              ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
            GridBoxAlignment -> {
             "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
            False, GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]& ),
          InterpretationFunction->(RowBox[{"Labeled", "[", 
             RowBox[{#, ",", #2}], "]"}]& )], GridBox[{
           {
            ItemBox[
             StyleBox["\<\"Parameters:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             StripOnInput->False], 
            ItemBox["\<\"\"\>",
             StripOnInput->False]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Size\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox["1", "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->
      GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquareMinusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         TemplateBox[{GraphicsBox[{{
              Opacity[0.3], {{
                LineBox[
                 NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                LineBox[
                 NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                LineBox[
                 NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                LineBox[
                 NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                LineBox[
                 NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                LineBox[
                 NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
              AbsolutePointSize[5], 
              PointBox[{{0, 0}, {1, 0}}], 
              PointBox[
               NCache[{{
                  Rational[-1, 2], 1}, {
                  Rational[1, 2], 1}, {
                  Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
            ImageSize -> 32, BaseStyle -> GrayLevel[0.65]],StyleBox[
           "\"uninitialized\"", 
            GrayLevel[0.5], FontSize -> 8, StripOnInput -> False]},
          "Labeled",
          DisplayFunction->(GridBox[{{
              TagBox[
               ItemBox[
                PaneBox[
                 TagBox[#, "SkipImageSizeLevel"], 
                 Alignment -> {Center, Baseline}, BaselinePosition -> 
                 Baseline], DefaultBaseStyle -> "Labeled"], 
               "SkipImageSizeLevel"]}, {
              ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
            GridBoxAlignment -> {
             "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
            False, GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]& ),
          InterpretationFunction->(RowBox[{"Labeled", "[", 
             RowBox[{#, ",", #2}], "]"}]& )], GridBox[{
           {
            ItemBox[
             StyleBox["\<\"Parameters:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             StripOnInput->False], 
            ItemBox["\<\"\"\>",
             StripOnInput->False]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Size\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox["1", "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]},
           {
            ItemBox[
             StyleBox["\<\"Arrays:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             Frame->{{False, False}, {False, True}},
             FrameStyle->GrayLevel[0.85],
             StripOnInput->False], 
            ItemBox[
             InterpretationBox[
              StyleBox[
               GraphicsBox[{},
                BaselinePosition->(Scaled[0.] -> Baseline),
                ImageSize->{1, 11}],
               CacheGraphics->False],
              Spacer[{1, 11}]],
             Frame->{{False, False}, {False, True}},
             FrameStyle->GrayLevel[0.85],
             StripOnInput->False]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Weights\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox[
              
              TemplateBox[{
               "\"matrix\"","\" \"",
                TemplateBox[{
                 "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                  "\" \"", 
                  
                  TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\"", "\"1\""}, 
                   "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                 "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                 InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]},
               "RowDefault"], "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Biases\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox[
              
              TemplateBox[{
               "\"optional\"","\" \"",TemplateBox[{"\"vector\"", "\" \"", 
                  
                  TemplateBox[{
                   "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                   "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                   InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                 "RowDefault"]},
               "RowDefault"], "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]},
           {
            ItemBox[
             StyleBox["\<\"Ports:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             Frame->{{False, False}, {False, True}},
             FrameStyle->GrayLevel[0.85],
             StripOnInput->False], 
            ItemBox[
             InterpretationBox[
              StyleBox[
               GraphicsBox[{},
                BaselinePosition->(Scaled[0.] -> Baseline),
                ImageSize->{1, 11}],
               CacheGraphics->False],
              Spacer[{1, 11}]],
             Frame->{{False, False}, {False, True}},
             FrameStyle->GrayLevel[0.85],
             StripOnInput->False]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Input\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox[
              
              TemplateBox[{
               "\"encoded\"","\" \"",TemplateBox[{"\"vector\"", "\" \"", 
                  
                  TemplateBox[{
                   "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                   "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                   InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                 "RowDefault"]},
               "RowDefault"], "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Output\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox[
              
              TemplateBox[{
               "\"decoded\"","\" \"",TemplateBox[{"\"vector\"", "\" \"", 
                  
                  TemplateBox[{
                   "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                   "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                   InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                 "RowDefault"]},
               "RowDefault"], "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  None,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.692649472488381*^9, 3.692904382553054*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"1", " ", "->", " ", "2.2"}], ",", " ", 
     RowBox[{"2", " ", "->", " ", "3.8"}], ",", " ", 
     RowBox[{"3", " ", "->", " ", "6.4"}], ",", " ", 
     RowBox[{"4", " ", "->", " ", "9.1"}]}], "}"}]}], ";"}]], "Code",
 CellChangeTimes->{{3.69264931882056*^9, 3.692649411944188*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", " ", "=", " ", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"dotPlus", ",", " ", "data", ",", " ", 
    RowBox[{"Method", " ", "->", " ", "\"\<StochasticGradientDescent\>\""}]}],
    "]"}]}]], "Code",
 CellChangeTimes->{
  3.6926494165571537`*^9, {3.6926494787803698`*^9, 3.692649515978158*^9}}],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["DotPlusLayer", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open$$ = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = True), Appearance -> None,
                 Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 Opacity[0.3], {{
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
                 AbsolutePointSize[5], 
                 PointBox[{{0, 0}, {1, 0}}], 
                 PointBox[
                  NCache[{{
                    Rational[-1, 2], 1}, {
                    Rational[1, 2], 1}, {
                    Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
               ImageSize -> 32], 
              GridBox[{{
                 ItemBox[
                  StyleBox["\"Parameters:\"", Bold, StripOnInput -> False], 
                  StripOnInput -> False], 
                 ItemBox["\"\"", StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Size\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["1", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 Opacity[0.3], {{
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
                 AbsolutePointSize[5], 
                 PointBox[{{0, 0}, {1, 0}}], 
                 PointBox[
                  NCache[{{
                    Rational[-1, 2], 1}, {
                    Rational[1, 2], 1}, {
                    Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
               ImageSize -> 32], 
              GridBox[{{
                 ItemBox[
                  StyleBox["\"Parameters:\"", Bold, StripOnInput -> False], 
                  StripOnInput -> False], 
                 ItemBox["\"\"", StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Size\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["1", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["\"Arrays:\"", Bold, StripOnInput -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85], StripOnInput -> False], 
                 ItemBox[
                  InterpretationBox[
                   StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                   Spacer[{1, 11}]], Frame -> {{False, False}, {False, True}},
                   FrameStyle -> GrayLevel[0.85], StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Weights\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"matrix\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Biases\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["\"Ports:\"", Bold, StripOnInput -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85], StripOnInput -> False], 
                 ItemBox[
                  InterpretationBox[
                   StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                   Spacer[{1, 11}]], Frame -> {{False, False}, {False, True}},
                   FrameStyle -> GrayLevel[0.85], StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"encoded\"", "\" \"", 
                    TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"]}, "RowDefault"], "SummaryItem", 
                   StripOnInput -> False], "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"decoded\"", "\" \"", 
                    TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"]}, "RowDefault"], "SummaryItem", 
                   StripOnInput -> False], "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic], BaselinePosition -> 
        Baseline], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("None"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.692649417457041*^9, {3.6926494764996843`*^9, 3.6926494869730473`*^9}, 
   3.692649521390979*^9, 3.692904386251011*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", " ", "=", " ", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"dotPlus", ",", " ", "data", ",", " ", "\n", "  ", 
    RowBox[{"Method", " ", "->", " ", 
     RowBox[{"{", 
      RowBox[{"\"\<StochasticGradientDescent\>\"", ",", " ", "\n", "    ", 
       RowBox[{"\"\<InitialLearningRate\>\"", " ", "->", " ", "0.1"}]}], 
      "}"}]}]}], "]"}]}]], "Code",
 CellChangeTimes->{3.6926495283851137`*^9}],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["DotPlusLayer", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open$$ = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = True), Appearance -> None,
                 Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 Opacity[0.3], {{
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
                 AbsolutePointSize[5], 
                 PointBox[{{0, 0}, {1, 0}}], 
                 PointBox[
                  NCache[{{
                    Rational[-1, 2], 1}, {
                    Rational[1, 2], 1}, {
                    Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
               ImageSize -> 32], 
              GridBox[{{
                 ItemBox[
                  StyleBox["\"Parameters:\"", Bold, StripOnInput -> False], 
                  StripOnInput -> False], 
                 ItemBox["\"\"", StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Size\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["1", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 Opacity[0.3], {{
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
                 AbsolutePointSize[5], 
                 PointBox[{{0, 0}, {1, 0}}], 
                 PointBox[
                  NCache[{{
                    Rational[-1, 2], 1}, {
                    Rational[1, 2], 1}, {
                    Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
               ImageSize -> 32], 
              GridBox[{{
                 ItemBox[
                  StyleBox["\"Parameters:\"", Bold, StripOnInput -> False], 
                  StripOnInput -> False], 
                 ItemBox["\"\"", StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Size\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["1", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["\"Arrays:\"", Bold, StripOnInput -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85], StripOnInput -> False], 
                 ItemBox[
                  InterpretationBox[
                   StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                   Spacer[{1, 11}]], Frame -> {{False, False}, {False, True}},
                   FrameStyle -> GrayLevel[0.85], StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Weights\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"matrix\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Biases\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["\"Ports:\"", Bold, StripOnInput -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85], StripOnInput -> False], 
                 ItemBox[
                  InterpretationBox[
                   StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                   Spacer[{1, 11}]], Frame -> {{False, False}, {False, True}},
                   FrameStyle -> GrayLevel[0.85], StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"encoded\"", "\" \"", 
                    TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"]}, "RowDefault"], "SummaryItem", 
                   StripOnInput -> False], "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"decoded\"", "\" \"", 
                    TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"]}, "RowDefault"], "SummaryItem", 
                   StripOnInput -> False], "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic], BaselinePosition -> 
        Baseline], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("None"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.6926495377402763`*^9, 3.692904394730838*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
2. Use regularization to prevent overfitting. Create synthetic training data \
based on a Gaussian curve:\
\>", "Subchapter",
 CellChangeTimes->{{3.6926495567334223`*^9, 3.692649559450459*^9}, {
  3.692904477005678*^9, 3.692904477423377*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", " ", "=", " ", 
   RowBox[{"Table", "[", "\n", "   ", 
    RowBox[{
     RowBox[{"x", " ", "->", " ", 
      RowBox[{
       RowBox[{"Exp", "[", 
        RowBox[{"-", 
         RowBox[{"x", "^", "2"}]}], "]"}], " ", "+", " ", 
       RowBox[{"RandomVariate", "[", 
        RowBox[{"NormalDistribution", "[", 
         RowBox[{"0", ",", " ", ".15"}], "]"}], "]"}]}]}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"x", ",", " ", 
       RowBox[{"-", "3"}], ",", "\n", "     ", "3", ",", " ", ".2"}], "}"}]}],
     "]"}]}], ";"}]], "Code",
 CellChangeTimes->{3.6926635275205307`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"plot", " ", "=", " ", 
  RowBox[{"ListPlot", "[", 
   RowBox[{
    RowBox[{"List", " ", "@@@", " ", "data"}], ",", " ", 
    RowBox[{"PlotStyle", " ", "->", " ", "Red"}]}], "]"}]}]], "Code",
 CellChangeTimes->{{3.69266353784103*^9, 3.6926635586339808`*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {{}, 
    {RGBColor[1, 0, 0], PointSize[0.012833333333333334`], AbsoluteThickness[
     1.6], PointBox[CompressedData["
1:eJxTTMoPSmViYGCQB2IQDQEcBySVNSLEXI7Zp4EB24Ga1skCHS8P2J89AwIs
Bzw7j2zcrzbD3hgMmA98kpbcqu0+2X7WTBBgPPCKc2PY5J3H7aEGHpCZY3f0
8tGD+8Haz/zZ78FwWPmx8lR7sPKZP/f/U5kw5fnzFfsh9n3b3xapfXvahyNQ
8z/vf+DRGP7pfR/UvA/7W6LW3HthtN9+Blj/y/3HZh88vWXzA3sDsPrH+60m
n/5uHfwMKn9zfzjjwfO+uR/tJ4D5J/f/+Pjk5tI5b2HuY5g8ZY3bhSVv7RdA
5O13HPVyVA15DeXftN/YKuomV/LS3gRivv2CiazqnDNe2M+B2G//e8uL5xtY
H8LcZ+/Txf16deIJqPrP9n/2v+WvvnbcPgPiP/u/GwsmLHG/BNX/097H6GXV
78Wb7S9Awsf+BV+rTdmF7TD3OXR4b+g+nZ67Hxq+DpJL/soL+2yGms/soJpw
OdGyZOL+c5D4cZj9MWPhyZLVUPvYHNqMPovY/2mAmsfh4Ps7TGN5wOL9AGUV
61g=
      "]]}, {}}, {}, {}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-3., 3.}, {-0.13884970789988038`, 1.0891855349910509`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.692663559573234*^9, 3.692904394845587*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[TextData[{
 "0108 Youtube Hands-on with Neural Networks\n",
 StyleBox["https://www.youtube.com/watch?v=JBBLPUydA0k", "Subsection"]
}], "Chapter",
 CellChangeTimes->{{3.6929044844511347`*^9, 3.69290451222851*^9}, {
  3.692904543775218*^9, 3.692904572953105*^9}}],

Cell[CellGroupData[{

Cell["Layers", "Chapter",
 CellChangeTimes->{{3.692904576450686*^9, 3.69290458012364*^9}}],

Cell[CellGroupData[{

Cell["Layer Types and when to use them", "Subchapter",
 CellChangeTimes->{{3.692904598645636*^9, 3.69290460774257*^9}}],

Cell[CellGroupData[{

Cell["DotPlusLayer", "Subsection",
 CellChangeTimes->{{3.692904627836947*^9, 3.6929046330062523`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dot", " ", "=", " ", 
  RowBox[{"DotPlusLayer", "[", 
   RowBox[{"2", ",", "5"}], "]"}]}]], "Code",
 CellChangeTimes->{{3.6929046398530493`*^9, 3.692904650842444*^9}, 
   3.69290507324249*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DotPlusLayer",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = True}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{15., {0., 15.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         TemplateBox[{GraphicsBox[{{
              Opacity[0.3], {{
                LineBox[
                 NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                LineBox[
                 NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                LineBox[
                 NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                LineBox[
                 NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                LineBox[
                 NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                LineBox[
                 NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
              AbsolutePointSize[5], 
              PointBox[{{0, 0}, {1, 0}}], 
              PointBox[
               NCache[{{
                  Rational[-1, 2], 1}, {
                  Rational[1, 2], 1}, {
                  Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
            ImageSize -> 32, BaseStyle -> GrayLevel[0.65]],StyleBox[
           "\"uninitialized\"", 
            GrayLevel[0.5], FontSize -> 8, StripOnInput -> False]},
          "Labeled",
          DisplayFunction->(GridBox[{{
              TagBox[
               ItemBox[
                PaneBox[
                 TagBox[#, "SkipImageSizeLevel"], 
                 Alignment -> {Center, Baseline}, BaselinePosition -> 
                 Baseline], DefaultBaseStyle -> "Labeled"], 
               "SkipImageSizeLevel"]}, {
              ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
            GridBoxAlignment -> {
             "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
            False, GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]& ),
          InterpretationFunction->(RowBox[{"Labeled", "[", 
             RowBox[{#, ",", #2}], "]"}]& )], GridBox[{
           {
            ItemBox[
             StyleBox["\<\"Parameters:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             StripOnInput->False], 
            ItemBox["\<\"\"\>",
             StripOnInput->False]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Size\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox["2", "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->
      GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquareMinusIconMedium"],
            ImageSizeCache->{15., {0., 15.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         TemplateBox[{GraphicsBox[{{
              Opacity[0.3], {{
                LineBox[
                 NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                LineBox[
                 NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                LineBox[
                 NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                LineBox[
                 NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                LineBox[
                 NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                LineBox[
                 NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
              AbsolutePointSize[5], 
              PointBox[{{0, 0}, {1, 0}}], 
              PointBox[
               NCache[{{
                  Rational[-1, 2], 1}, {
                  Rational[1, 2], 1}, {
                  Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
            ImageSize -> 32, BaseStyle -> GrayLevel[0.65]],StyleBox[
           "\"uninitialized\"", 
            GrayLevel[0.5], FontSize -> 8, StripOnInput -> False]},
          "Labeled",
          DisplayFunction->(GridBox[{{
              TagBox[
               ItemBox[
                PaneBox[
                 TagBox[#, "SkipImageSizeLevel"], 
                 Alignment -> {Center, Baseline}, BaselinePosition -> 
                 Baseline], DefaultBaseStyle -> "Labeled"], 
               "SkipImageSizeLevel"]}, {
              ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
            GridBoxAlignment -> {
             "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
            False, GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]& ),
          InterpretationFunction->(RowBox[{"Labeled", "[", 
             RowBox[{#, ",", #2}], "]"}]& )], GridBox[{
           {
            ItemBox[
             StyleBox["\<\"Parameters:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             StripOnInput->False], 
            ItemBox["\<\"\"\>",
             StripOnInput->False]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Size\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox["2", "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]},
           {
            ItemBox[
             StyleBox["\<\"Arrays:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             Frame->{{False, False}, {False, True}},
             FrameStyle->GrayLevel[0.85],
             StripOnInput->False], 
            ItemBox[
             InterpretationBox[
              StyleBox[
               GraphicsBox[{},
                BaselinePosition->(Scaled[0.] -> Baseline),
                ImageSize->{1, 11}],
               CacheGraphics->False],
              Spacer[{1, 11}]],
             Frame->{{False, False}, {False, True}},
             FrameStyle->GrayLevel[0.85],
             StripOnInput->False]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Weights\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox[
              
              TemplateBox[{
               "\"matrix\"","\" \"",
                TemplateBox[{
                 "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                  "\" \"", 
                  
                  TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\"", "\"5\""}, 
                   "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                 "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                 InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]},
               "RowDefault"], "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Biases\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox[
              
              TemplateBox[{
               "\"optional\"","\" \"",TemplateBox[{"\"vector\"", "\" \"", 
                  
                  TemplateBox[{
                   "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                   "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                   InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                 "RowDefault"]},
               "RowDefault"], "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]},
           {
            ItemBox[
             StyleBox["\<\"Ports:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             Frame->{{False, False}, {False, True}},
             FrameStyle->GrayLevel[0.85],
             StripOnInput->False], 
            ItemBox[
             InterpretationBox[
              StyleBox[
               GraphicsBox[{},
                BaselinePosition->(Scaled[0.] -> Baseline),
                ImageSize->{1, 11}],
               CacheGraphics->False],
              Spacer[{1, 11}]],
             Frame->{{False, False}, {False, True}},
             FrameStyle->GrayLevel[0.85],
             StripOnInput->False]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Input\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox[
              
              TemplateBox[{
               "\"vector\"","\" \"",
                TemplateBox[{
                 "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                  "\" \"", 
                  
                  TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\""}, 
                   "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                 "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                 InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]},
               "RowDefault"], "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Output\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox[
              
              TemplateBox[{
               "\"vector\"","\" \"",
                TemplateBox[{
                 "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                  "\" \"", 
                  
                  TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                   "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                 "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                 InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]},
               "RowDefault"], "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  None,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.692905074050364*^9, 3.692905153303336*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetExtract", "[", 
  RowBox[{"dot", ",", "\"\<Weights\>\""}], "]"}]], "Code",
 CellChangeTimes->{{3.692905137812265*^9, 3.6929051494957743`*^9}}],

Cell[BoxData["Automatic"], "Output",
 CellChangeTimes->{{3.692905150075926*^9, 3.69290515479493*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["? Initialize value, \
\:6bcf\:6b21\:8fd0\:7b97\:524d\:90fd\:9700\:8981Initialize\:4e48\:ff1f", \
"Subsubsection",
 CellChangeTimes->{{3.692905916499281*^9, 3.69290599405334*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dot", " ", "=", " ", 
  RowBox[{"NetInitialize", "[", "dot", "]"}]}]], "Code",
 CellChangeTimes->{{3.6929047197685623`*^9, 3.692904731962648*^9}, {
  3.692905108859208*^9, 3.692905111190836*^9}}],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["DotPlusLayer", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open$$ = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = True), Appearance -> None,
                 Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 Opacity[0.3], {{
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
                 AbsolutePointSize[5], 
                 PointBox[{{0, 0}, {1, 0}}], 
                 PointBox[
                  NCache[{{
                    Rational[-1, 2], 1}, {
                    Rational[1, 2], 1}, {
                    Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
               ImageSize -> 32], 
              GridBox[{{
                 ItemBox[
                  StyleBox["\"Parameters:\"", Bold, StripOnInput -> False], 
                  StripOnInput -> False], 
                 ItemBox["\"\"", StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Size\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["2", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 Opacity[0.3], {{
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
                 AbsolutePointSize[5], 
                 PointBox[{{0, 0}, {1, 0}}], 
                 PointBox[
                  NCache[{{
                    Rational[-1, 2], 1}, {
                    Rational[1, 2], 1}, {
                    Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
               ImageSize -> 32], 
              GridBox[{{
                 ItemBox[
                  StyleBox["\"Parameters:\"", Bold, StripOnInput -> False], 
                  StripOnInput -> False], 
                 ItemBox["\"\"", StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Size\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["2", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["\"Arrays:\"", Bold, StripOnInput -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85], StripOnInput -> False], 
                 ItemBox[
                  InterpretationBox[
                   StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                   Spacer[{1, 11}]], Frame -> {{False, False}, {False, True}},
                   FrameStyle -> GrayLevel[0.85], StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Weights\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"matrix\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"2\"", "\"5\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Biases\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["\"Ports:\"", Bold, StripOnInput -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85], StripOnInput -> False], 
                 ItemBox[
                  InterpretationBox[
                   StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                   Spacer[{1, 11}]], Frame -> {{False, False}, {False, True}},
                   FrameStyle -> GrayLevel[0.85], StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic], BaselinePosition -> 
        Baseline], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("None"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.6929051136666822`*^9, 3.6929051692858677`*^9, {3.692905818628553*^9, 
   3.692905823453636*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetExtract", "[", 
  RowBox[{"dot", ",", "\"\<Weights\>\""}], "]"}]], "Code",
 CellChangeTimes->{3.6929051665972147`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.10056456923484802`", ",", 
     RowBox[{"-", "0.18428558111190796`"}], ",", "0.30292677879333496`", ",", 
     "0.6479018330574036`", ",", "0.3885042071342468`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.6037595868110657`", ",", "0.018508456647396088`", ",", 
     RowBox[{"-", "0.4035164713859558`"}], ",", 
     RowBox[{"-", "0.36779114603996277`"}], ",", "0.5289016366004944`"}], 
    "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.692905167508252*^9, 3.6929051708275557`*^9}, {
  3.692905816441457*^9, 3.692905825089486*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["ElementwiseLayer", "Subsection",
 CellChangeTimes->{{3.6929055769963217`*^9, 3.692905590023449*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"elem", " ", "=", " ", 
  RowBox[{"ElementwiseLayer", "[", 
   RowBox[{"Tanh", ",", " ", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", " ", 
     RowBox[{"{", 
      RowBox[{"3", ",", "5"}], "}"}]}]}], "]"}]}]], "Code",
 CellChangeTimes->{{3.6929055983938704`*^9, 3.692905630943399*^9}}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ElementwiseLayer",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = True}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{15., {0., 15.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[{
           {Opacity[
            0.3], {LineBox[
              NCache[{{0, 0}, {Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
             LineBox[NCache[{{0, 0}, {Rational[1, 2], 1}}, {{0, 0}, {
                0.5, 1}}]], 
             LineBox[NCache[{{0, 0}, {Rational[3, 2], 1}}, {{0, 0}, {
                1.5, 1}}]]}, {
             LineBox[NCache[{{1, 0}, {Rational[-1, 2], 1}}, {{1, 
                0}, {-0.5, 1}}]], 
             LineBox[NCache[{{1, 0}, {Rational[1, 2], 1}}, {{1, 0}, {
                0.5, 1}}]], 
             LineBox[NCache[{{1, 0}, {Rational[3, 2], 1}}, {{1, 0}, {
                1.5, 1}}]]}}, 
           {AbsolutePointSize[5], PointBox[{{0, 0}, {1, 0}}], 
            PointBox[
             NCache[{{Rational[-1, 2], 1}, {Rational[1, 2], 1}, {
               Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}},
          ImageSize->32], GridBox[{
           {
            ItemBox[
             StyleBox["\<\"Parameters:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             StripOnInput->False], 
            ItemBox["\<\"\"\>",
             StripOnInput->False]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Function\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox["Tanh", "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->
      GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquareMinusIconMedium"],
            ImageSizeCache->{15., {0., 15.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[{
           {Opacity[
            0.3], {LineBox[
              NCache[{{0, 0}, {Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
             LineBox[NCache[{{0, 0}, {Rational[1, 2], 1}}, {{0, 0}, {
                0.5, 1}}]], 
             LineBox[NCache[{{0, 0}, {Rational[3, 2], 1}}, {{0, 0}, {
                1.5, 1}}]]}, {
             LineBox[NCache[{{1, 0}, {Rational[-1, 2], 1}}, {{1, 
                0}, {-0.5, 1}}]], 
             LineBox[NCache[{{1, 0}, {Rational[1, 2], 1}}, {{1, 0}, {
                0.5, 1}}]], 
             LineBox[NCache[{{1, 0}, {Rational[3, 2], 1}}, {{1, 0}, {
                1.5, 1}}]]}}, 
           {AbsolutePointSize[5], PointBox[{{0, 0}, {1, 0}}], 
            PointBox[
             NCache[{{Rational[-1, 2], 1}, {Rational[1, 2], 1}, {
               Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}},
          ImageSize->32], GridBox[{
           {
            ItemBox[
             StyleBox["\<\"Parameters:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             StripOnInput->False], 
            ItemBox["\<\"\"\>",
             StripOnInput->False]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Function\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox["Tanh", "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]},
           {
            ItemBox[
             StyleBox["\<\"Ports:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             Frame->{{False, False}, {False, True}},
             FrameStyle->GrayLevel[0.85],
             StripOnInput->False], 
            ItemBox[
             InterpretationBox[
              StyleBox[
               GraphicsBox[{},
                BaselinePosition->(Scaled[0.] -> Baseline),
                ImageSize->{1, 11}],
               CacheGraphics->False],
              Spacer[{1, 11}]],
             Frame->{{False, False}, {False, True}},
             FrameStyle->GrayLevel[0.85],
             StripOnInput->False]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Input\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox[
              
              TemplateBox[{
               "\"matrix\"","\" \"",
                TemplateBox[{
                 "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                  "\" \"", 
                  
                  TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", "\"5\""}, 
                   "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                 "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                 InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]},
               "RowDefault"], "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Output\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox[
              
              TemplateBox[{
               "\"matrix\"","\" \"",
                TemplateBox[{
                 "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                  "\" \"", 
                  
                  TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", "\"5\""}, 
                   "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                 "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                 InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]},
               "RowDefault"], "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  None,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.692905611473433*^9, 3.692905632756031*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Use the DotPlusLayer below, initialize it, and check that the answer on the \
vector{0.,0.2,.1} is the same as M{0.,0.2,.1}+b, where M is the weights \
matrix and b is the bias.\
\>", "Subsubsection",
 CellChangeTimes->{{3.692906223723872*^9, 3.69290629892618*^9}, {
  3.692906484160136*^9, 3.69290648733136*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dotp", " ", "=", " ", 
  RowBox[{"DotPlusLayer", "[", 
   RowBox[{"5", ",", " ", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", " ", "3"}]}], "]"}]}]], "Code",
 CellChangeTimes->{{3.692906302438484*^9, 3.692906323678837*^9}}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DotPlusLayer",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = True}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{15., {0., 15.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         TemplateBox[{GraphicsBox[{{
              Opacity[0.3], {{
                LineBox[
                 NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                LineBox[
                 NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                LineBox[
                 NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                LineBox[
                 NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                LineBox[
                 NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                LineBox[
                 NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
              AbsolutePointSize[5], 
              PointBox[{{0, 0}, {1, 0}}], 
              PointBox[
               NCache[{{
                  Rational[-1, 2], 1}, {
                  Rational[1, 2], 1}, {
                  Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
            ImageSize -> 32, BaseStyle -> GrayLevel[0.65]],StyleBox[
           "\"uninitialized\"", 
            GrayLevel[0.5], FontSize -> 8, StripOnInput -> False]},
          "Labeled",
          DisplayFunction->(GridBox[{{
              TagBox[
               ItemBox[
                PaneBox[
                 TagBox[#, "SkipImageSizeLevel"], 
                 Alignment -> {Center, Baseline}, BaselinePosition -> 
                 Baseline], DefaultBaseStyle -> "Labeled"], 
               "SkipImageSizeLevel"]}, {
              ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
            GridBoxAlignment -> {
             "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
            False, GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]& ),
          InterpretationFunction->(RowBox[{"Labeled", "[", 
             RowBox[{#, ",", #2}], "]"}]& )], GridBox[{
           {
            ItemBox[
             StyleBox["\<\"Parameters:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             StripOnInput->False], 
            ItemBox["\<\"\"\>",
             StripOnInput->False]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Size\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox["5", "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->
      GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquareMinusIconMedium"],
            ImageSizeCache->{15., {0., 15.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         TemplateBox[{GraphicsBox[{{
              Opacity[0.3], {{
                LineBox[
                 NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                LineBox[
                 NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                LineBox[
                 NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                LineBox[
                 NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                LineBox[
                 NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                LineBox[
                 NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
              AbsolutePointSize[5], 
              PointBox[{{0, 0}, {1, 0}}], 
              PointBox[
               NCache[{{
                  Rational[-1, 2], 1}, {
                  Rational[1, 2], 1}, {
                  Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
            ImageSize -> 32, BaseStyle -> GrayLevel[0.65]],StyleBox[
           "\"uninitialized\"", 
            GrayLevel[0.5], FontSize -> 8, StripOnInput -> False]},
          "Labeled",
          DisplayFunction->(GridBox[{{
              TagBox[
               ItemBox[
                PaneBox[
                 TagBox[#, "SkipImageSizeLevel"], 
                 Alignment -> {Center, Baseline}, BaselinePosition -> 
                 Baseline], DefaultBaseStyle -> "Labeled"], 
               "SkipImageSizeLevel"]}, {
              ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
            GridBoxAlignment -> {
             "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
            False, GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]& ),
          InterpretationFunction->(RowBox[{"Labeled", "[", 
             RowBox[{#, ",", #2}], "]"}]& )], GridBox[{
           {
            ItemBox[
             StyleBox["\<\"Parameters:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             StripOnInput->False], 
            ItemBox["\<\"\"\>",
             StripOnInput->False]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Size\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox["5", "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]},
           {
            ItemBox[
             StyleBox["\<\"Arrays:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             Frame->{{False, False}, {False, True}},
             FrameStyle->GrayLevel[0.85],
             StripOnInput->False], 
            ItemBox[
             InterpretationBox[
              StyleBox[
               GraphicsBox[{},
                BaselinePosition->(Scaled[0.] -> Baseline),
                ImageSize->{1, 11}],
               CacheGraphics->False],
              Spacer[{1, 11}]],
             Frame->{{False, False}, {False, True}},
             FrameStyle->GrayLevel[0.85],
             StripOnInput->False]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Weights\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox[
              
              TemplateBox[{
               "\"matrix\"","\" \"",
                TemplateBox[{
                 "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                  "\" \"", 
                  
                  TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\"", "\"3\""}, 
                   "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                 "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                 InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]},
               "RowDefault"], "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Biases\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox[
              
              TemplateBox[{
               "\"optional\"","\" \"",TemplateBox[{"\"vector\"", "\" \"", 
                  
                  TemplateBox[{
                   "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                   "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                   InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                 "RowDefault"]},
               "RowDefault"], "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]},
           {
            ItemBox[
             StyleBox["\<\"Ports:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             Frame->{{False, False}, {False, True}},
             FrameStyle->GrayLevel[0.85],
             StripOnInput->False], 
            ItemBox[
             InterpretationBox[
              StyleBox[
               GraphicsBox[{},
                BaselinePosition->(Scaled[0.] -> Baseline),
                ImageSize->{1, 11}],
               CacheGraphics->False],
              Spacer[{1, 11}]],
             Frame->{{False, False}, {False, True}},
             FrameStyle->GrayLevel[0.85],
             StripOnInput->False]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Input\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox[
              
              TemplateBox[{
               "\"vector\"","\" \"",
                TemplateBox[{
                 "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                  "\" \"", 
                  
                  TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\""}, 
                   "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                 "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                 InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]},
               "RowDefault"], "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Output\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox[
              
              TemplateBox[{
               "\"vector\"","\" \"",
                TemplateBox[{
                 "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                  "\" \"", 
                  
                  TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\""}, 
                   "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                 "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                 InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]},
               "RowDefault"], "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  None,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.6929063243264914`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"dotp", " ", "=", " ", 
   RowBox[{"NetInitialize", "@", 
    RowBox[{"DotPlusLayer", "[", 
     RowBox[{"5", ",", " ", 
      RowBox[{"\"\<Input\>\"", "\[Rule]", " ", "3"}]}], "]"}]}]}], 
  ";"}], "\n", 
 RowBox[{"dotp", "@", 
  RowBox[{"{", 
   RowBox[{"3", ",", "4", ",", "5"}], "}"}]}]}], "Code",
 CellChangeTimes->{{3.692906351855695*^9, 3.692906368363696*^9}, {
  3.692906711769677*^9, 3.6929067130382967`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "5.876721382141113`"}], ",", "4.406981945037842`", ",", 
   RowBox[{"-", "4.0858049392700195`"}], ",", 
   RowBox[{"-", "3.893324613571167`"}], ",", "3.7298247814178467`"}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.6929063702274303`*^9, {3.692906713903399*^9, 3.692906725611267*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetExtract", "[", 
  RowBox[{"dotp", ",", "\"\<Weights\>\""}], "]"}]], "Code",
 CellChangeTimes->{{3.692906385337042*^9, 3.692906389631756*^9}, {
  3.692906793981182*^9, 3.692906835953289*^9}, {3.692906868577407*^9, 
  3.6929068696962*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.22275188565254211`"}], ",", 
     RowBox[{"-", "0.7980172038078308`"}], ",", 
     RowBox[{"-", "0.40327945351600647`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.2901787757873535`", ",", "0.7278421521186829`", ",", 
     "0.12501536309719086`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.49785974621772766`"}], ",", 
     RowBox[{"-", "0.29194891452789307`"}], ",", 
     RowBox[{"-", "0.28488603234291077`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.30887091159820557`"}], ",", "0.12001672387123108`", ",", 
     
     RowBox[{"-", "0.689355731010437`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.6205113530158997`"}], ",", "0.7379316091537476`", ",", 
     "0.527926504611969`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.6929063862811527`*^9, 3.692906390147512*^9}, 
   3.692906475598827*^9, 3.692906732732135*^9, 3.692906896891891*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetExtract", "[", 
  RowBox[{"dotp", ",", "\"\<Biases\>\""}], "]"}]], "Code",
 CellChangeTimes->{{3.692906398302082*^9, 3.692906409994128*^9}, {
  3.69290649135427*^9, 3.692906498067099*^9}, {3.69290663634328*^9, 
  3.692906636576236*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`"}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.6929064105927963`*^9, {3.692906471275817*^9, 3.692906498509419*^9}, 
   3.692906637189789*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
ReshapeLayer and FlattenLayer
Tensor vector\
\>", "Subsubsection",
 CellChangeTimes->{{3.692906505204729*^9, 3.692906511129443*^9}, {
   3.692906656292976*^9, 3.692906657001301*^9}, 3.692906929706429*^9, {
   3.692907198134993*^9, 3.692907222388081*^9}, {3.692907701184005*^9, 
   3.692907714636427*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"reshape", " ", "=", " ", 
  RowBox[{"ReshapeLayer", "[", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2"}], "}"}], "]"}]}]], "Code",
 CellChangeTimes->{{3.692907227069907*^9, 3.6929072398681707`*^9}}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ReshapeLayer",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = True}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{15., {0., 15.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[{
           {Opacity[
            0.3], {LineBox[
              NCache[{{0, 0}, {Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
             LineBox[NCache[{{0, 0}, {Rational[1, 2], 1}}, {{0, 0}, {
                0.5, 1}}]], 
             LineBox[NCache[{{0, 0}, {Rational[3, 2], 1}}, {{0, 0}, {
                1.5, 1}}]]}, {
             LineBox[NCache[{{1, 0}, {Rational[-1, 2], 1}}, {{1, 
                0}, {-0.5, 1}}]], 
             LineBox[NCache[{{1, 0}, {Rational[1, 2], 1}}, {{1, 0}, {
                0.5, 1}}]], 
             LineBox[NCache[{{1, 0}, {Rational[3, 2], 1}}, {{1, 0}, {
                1.5, 1}}]]}}, 
           {AbsolutePointSize[5], PointBox[{{0, 0}, {1, 0}}], 
            PointBox[
             NCache[{{Rational[-1, 2], 1}, {Rational[1, 2], 1}, {
               Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}},
          ImageSize->32], GridBox[{
           {
            ItemBox[
             StyleBox["\<\"Parameters:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             StripOnInput->False], 
            ItemBox["\<\"\"\>",
             StripOnInput->False]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Dimensions\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox[
              RowBox[{"{", 
               RowBox[{"2", ",", "2"}], "}"}], "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->
      GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquareMinusIconMedium"],
            ImageSizeCache->{15., {0., 15.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[{
           {Opacity[
            0.3], {LineBox[
              NCache[{{0, 0}, {Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
             LineBox[NCache[{{0, 0}, {Rational[1, 2], 1}}, {{0, 0}, {
                0.5, 1}}]], 
             LineBox[NCache[{{0, 0}, {Rational[3, 2], 1}}, {{0, 0}, {
                1.5, 1}}]]}, {
             LineBox[NCache[{{1, 0}, {Rational[-1, 2], 1}}, {{1, 
                0}, {-0.5, 1}}]], 
             LineBox[NCache[{{1, 0}, {Rational[1, 2], 1}}, {{1, 0}, {
                0.5, 1}}]], 
             LineBox[NCache[{{1, 0}, {Rational[3, 2], 1}}, {{1, 0}, {
                1.5, 1}}]]}}, 
           {AbsolutePointSize[5], PointBox[{{0, 0}, {1, 0}}], 
            PointBox[
             NCache[{{Rational[-1, 2], 1}, {Rational[1, 2], 1}, {
               Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}},
          ImageSize->32], GridBox[{
           {
            ItemBox[
             StyleBox["\<\"Parameters:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             StripOnInput->False], 
            ItemBox["\<\"\"\>",
             StripOnInput->False]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Dimensions\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox[
              RowBox[{"{", 
               RowBox[{"2", ",", "2"}], "}"}], "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]},
           {
            ItemBox[
             StyleBox["\<\"Ports:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             Frame->{{False, False}, {False, True}},
             FrameStyle->GrayLevel[0.85],
             StripOnInput->False], 
            ItemBox[
             InterpretationBox[
              StyleBox[
               GraphicsBox[{},
                BaselinePosition->(Scaled[0.] -> Baseline),
                ImageSize->{1, 11}],
               CacheGraphics->False],
              Spacer[{1, 11}]],
             Frame->{{False, False}, {False, True}},
             FrameStyle->GrayLevel[0.85],
             StripOnInput->False]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Input\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox["\<\"tensor\"\>", "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Output\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox[
              
              TemplateBox[{
               "\"matrix\"","\" \"",
                TemplateBox[{
                 "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                  "\" \"", 
                  
                  TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\"", "\"2\""}, 
                   "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                 "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                 InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]},
               "RowDefault"], "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  None,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.692907240689332*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"reshape", "[", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], "]"}]], "Code",
 CellChangeTimes->{{3.6929076567367077`*^9, 3.6929076710431967`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1.`", ",", "2.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3.`", ",", "4.`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.6929076720505257`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"flat", " ", "=", " ", 
  RowBox[{"FlattenLayer", "[", "]"}]}]], "Code",
 CellChangeTimes->{{3.692907673974712*^9, 3.6929076908408003`*^9}}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["FlattenLayer",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = True}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{15., {0., 15.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[{
           {Opacity[
            0.3], {LineBox[
              NCache[{{0, 0}, {Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
             LineBox[NCache[{{0, 0}, {Rational[1, 2], 1}}, {{0, 0}, {
                0.5, 1}}]], 
             LineBox[NCache[{{0, 0}, {Rational[3, 2], 1}}, {{0, 0}, {
                1.5, 1}}]]}, {
             LineBox[NCache[{{1, 0}, {Rational[-1, 2], 1}}, {{1, 
                0}, {-0.5, 1}}]], 
             LineBox[NCache[{{1, 0}, {Rational[1, 2], 1}}, {{1, 0}, {
                0.5, 1}}]], 
             LineBox[NCache[{{1, 0}, {Rational[3, 2], 1}}, {{1, 0}, {
                1.5, 1}}]]}}, 
           {AbsolutePointSize[5], PointBox[{{0, 0}, {1, 0}}], 
            PointBox[
             NCache[{{Rational[-1, 2], 1}, {Rational[1, 2], 1}, {
               Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}},
          ImageSize->32], GridBox[{
           {
            ItemBox[
             StyleBox["\<\"Parameters:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             StripOnInput->False], 
            ItemBox["\<\"\"\>",
             StripOnInput->False]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Dimensions\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox[
              TemplateBox[{"\"list of \"","\"positive integer\"","\"s\""},
               "RowDefault"], "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->
      GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquareMinusIconMedium"],
            ImageSizeCache->{15., {0., 15.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[{
           {Opacity[
            0.3], {LineBox[
              NCache[{{0, 0}, {Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
             LineBox[NCache[{{0, 0}, {Rational[1, 2], 1}}, {{0, 0}, {
                0.5, 1}}]], 
             LineBox[NCache[{{0, 0}, {Rational[3, 2], 1}}, {{0, 0}, {
                1.5, 1}}]]}, {
             LineBox[NCache[{{1, 0}, {Rational[-1, 2], 1}}, {{1, 
                0}, {-0.5, 1}}]], 
             LineBox[NCache[{{1, 0}, {Rational[1, 2], 1}}, {{1, 0}, {
                0.5, 1}}]], 
             LineBox[NCache[{{1, 0}, {Rational[3, 2], 1}}, {{1, 0}, {
                1.5, 1}}]]}}, 
           {AbsolutePointSize[5], PointBox[{{0, 0}, {1, 0}}], 
            PointBox[
             NCache[{{Rational[-1, 2], 1}, {Rational[1, 2], 1}, {
               Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}},
          ImageSize->32], GridBox[{
           {
            ItemBox[
             StyleBox["\<\"Parameters:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             StripOnInput->False], 
            ItemBox["\<\"\"\>",
             StripOnInput->False]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Dimensions\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox[
              TemplateBox[{"\"list of \"","\"positive integer\"","\"s\""},
               "RowDefault"], "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]},
           {
            ItemBox[
             StyleBox["\<\"Ports:\"\>",
              StripOnInput->False,
              FontWeight->Bold],
             Frame->{{False, False}, {False, True}},
             FrameStyle->GrayLevel[0.85],
             StripOnInput->False], 
            ItemBox[
             InterpretationBox[
              StyleBox[
               GraphicsBox[{},
                BaselinePosition->(Scaled[0.] -> Baseline),
                ImageSize->{1, 11}],
               CacheGraphics->False],
              Spacer[{1, 11}]],
             Frame->{{False, False}, {False, True}},
             FrameStyle->GrayLevel[0.85],
             StripOnInput->False]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Input\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox["\<\"tensor\"\>", "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]},
           {
            TagBox[
             StyleBox[
              TemplateBox[{"\"Output\"","\":\""},
               "RowDefault"], "SummaryItemAnnotation",
              StripOnInput->False],
             "SummaryItem"], 
            TagBox[
             StyleBox["\<\"vector\"\>", "SummaryItem",
              StripOnInput->False],
             "SummaryItem"]}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  None,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.69290769157489*^9, 3.692907718232293*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"flat", "@", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3", ",", "3", ",", "2"}], "}"}]}], "}"}]}]], "Code",
 CellChangeTimes->{{3.692907724214753*^9, 3.692907784781962*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1.`", ",", "2.`", ",", "3.`", ",", "4.`", ",", "2.`", ",", "3.`", ",", 
   "3.`", ",", "2.`"}], "}"}]], "Output",
 CellChangeTimes->{{3.692907741598218*^9, 3.692907785325007*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["LostLayer", "Subsection",
 CellChangeTimes->{{3.692907957816339*^9, 3.69290795980511*^9}}],

Cell[CellGroupData[{

Cell["MeanSquaredLossLayer", "Subsubsection",
 CellChangeTimes->{{3.69290796301537*^9, 3.692907974897419*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"data", "=", " ", 
  RowBox[{"<|", 
   RowBox[{
    RowBox[{"\"\<Input\>\"", "\[Rule]", " ", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}]}], ",", " ", 
    RowBox[{"\"\<Target\>\"", "\[Rule]", " ", 
     RowBox[{"{", 
      RowBox[{"4", ",", "5"}], "}"}]}]}], "|>"}]}]], "Code",
 CellChangeTimes->{{3.692908492976047*^9, 3.692908495320673*^9}}],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Input\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}]}], ",", 
   RowBox[{"\<\"Target\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"4", ",", "5"}], "}"}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.692908496068858*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"MeanSquaredLossLayer", "[", "]"}], "@", "data"}]], "Code",
 CellChangeTimes->{{3.692907982581349*^9, 3.6929080450284348`*^9}, {
  3.6929084885525837`*^9, 3.692908498943852*^9}}],

Cell[BoxData["9.`"], "Output",
 CellChangeTimes->{3.692908051085288*^9, 3.692908499373242*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", " ", "=", " ", 
  RowBox[{
   RowBox[{"Mean", "[", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"#Input", "-", " ", "#Target"}], ")"}], "^", "2"}], "]"}], 
   "&"}]}]], "Code",
 CellChangeTimes->{{3.6929084235645523`*^9, 3.6929084682212067`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Mean", "[", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"#Input", "-", "#Target"}], ")"}], "2"], "]"}], "&"}]], "Output",\

 CellChangeTimes->{{3.692908451630579*^9, 3.692908469228297*^9}, 
   3.6929085242898912`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "@", "data"}]], "Code",
 CellChangeTimes->{{3.692908507054696*^9, 3.692908571055217*^9}}],

Cell[BoxData["9"], "Output",
 CellChangeTimes->{{3.6929085183748207`*^9, 3.6929085716119823`*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Containers", "Chapter",
 CellChangeTimes->{{3.6929089281489477`*^9, 3.692908930931357*^9}}],

Cell[CellGroupData[{

Cell["NetChain and NetGraph", "Subchapter",
 CellChangeTimes->{{3.6929089485359573`*^9, 3.6929089528078938`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetChain", "[", 
  RowBox[{"{", 
   RowBox[{"Ramp", ",", " ", 
    RowBox[{"ConvolutionLayer", "[", 
     RowBox[{"64", ",", " ", 
      RowBox[{"{", 
       RowBox[{"3", ",", "3"}], "}"}]}], "]"}], ",", " ", 
    RowBox[{"PoolingLayer", "[", "]"}]}], "}"}], "]"}]], "Code",
 CellChangeTimes->{{3.692908936091113*^9, 3.692908938861376*^9}, {
  3.692909001076043*^9, 3.6929090383626213`*^9}}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"tensor", " ", 
               
               Row[{"(", "\[VeryThinSpace]", "rank", ":", " ", 3, 
                 "\[VeryThinSpace]", ")"}, BaseStyle -> GrayLevel[0.5]]}], {
             "Inputs", "Input"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "1"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"tensor", " ", 
               
               Row[{"(", "\[VeryThinSpace]", "rank", ":", " ", 3, 
                 "\[VeryThinSpace]", ")"}, BaseStyle -> GrayLevel[0.5]]}], {
             "Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["2", 
              GrayLevel[0.5]], {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ConvolutionLayer, {"Layers", "2"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"tensor", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 
                 Row[{"64", "\[DottedSquare]", "\[DottedSquare]"}, 
                  "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "2"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["3", 
              GrayLevel[0.5]], {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[PoolingLayer, {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"tensor", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 
                 Row[{"64", "\[DottedSquare]", "\[DottedSquare]"}, 
                  "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "3"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"tensor", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 
                 Row[{"64", "\[DottedSquare]", "\[DottedSquare]"}, 
                  "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Outputs", "Output"}, "Mouse"], 
            "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Ramp, "$Dimensions" -> 
               NeuralNetworks`ListT[3, NeuralNetworks`SizeT], "$Rank" -> 3], 
             "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[3, 
                 NeuralNetworks`ListT[3, NeuralNetworks`SizeT]]], "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[3, 
                 NeuralNetworks`ListT[3, NeuralNetworks`SizeT]]]], "2" -> 
           Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association["Weights" -> NeuralNetworks`ChannelT[64, 
                 NeuralNetworks`ChannelT[NeuralNetworks`SizeT, 
                  NeuralNetworks`TensorT[2, {3, 3}]]], "Biases" -> 
               NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[1, {64}]]], "Parameters" -> 
             Association[
              "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
               "Dilation" -> {1, 1}, "InputChannels" -> NeuralNetworks`SizeT, 
               "$GroupNumber" -> 1, "$InputSize" -> 
               NeuralNetworks`ListT[2, NeuralNetworks`SizeT], "$OutputSize" -> 
               NeuralNetworks`ListT[2, NeuralNetworks`SizeT]], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[3, 
                 NeuralNetworks`ListT[3, NeuralNetworks`SizeT]]], "Outputs" -> 
             Association["Output" -> NeuralNetworks`ChannelT[64, 
                 NeuralNetworks`TensorT[2, 
                  NeuralNetworks`ListT[2, NeuralNetworks`SizeT]]]]], "3" -> 
           Association[
            "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "KernelSize" -> NeuralNetworks`ListT[2, NeuralNetworks`SizeT], 
               "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, "Function" -> Max,
                "Channels" -> 64, "$InputSize" -> 
               NeuralNetworks`ListT[2, NeuralNetworks`SizeT], "$OutputSize" -> 
               NeuralNetworks`ListT[2, NeuralNetworks`SizeT]], "Inputs" -> 
             Association["Input" -> NeuralNetworks`ChannelT[64, 
                 NeuralNetworks`TensorT[2, 
                  NeuralNetworks`ListT[2, NeuralNetworks`SizeT]]]], "Outputs" -> 
             Association["Output" -> NeuralNetworks`ChannelT[64, 
                 NeuralNetworks`TensorT[2, 
                  NeuralNetworks`ListT[2, NeuralNetworks`SizeT]]]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "2", "Inputs", "Input"] -> 
           NetPort["Layers", "1", "Outputs", "Output"], 
           NetPort["Layers", "3", "Inputs", "Input"] -> 
           NetPort["Layers", "2", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "3", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`TensorT[3, 
             NeuralNetworks`ListT[3, NeuralNetworks`SizeT]]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`ChannelT[64, 
             NeuralNetworks`TensorT[2, 
              NeuralNetworks`ListT[2, NeuralNetworks`SizeT]]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{284., {39.771240234375, 46.228759765625}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.692909039018464*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetGraph", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"Ramp", ",", " ", 
     RowBox[{"ConvolutionLayer", "[", 
      RowBox[{"64", ",", " ", 
       RowBox[{"{", 
        RowBox[{"3", ",", "3"}], "}"}]}], "]"}], ",", " ", 
     RowBox[{"PoolingLayer", "[", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"1", "\[Rule]", " ", "2"}], ",", " ", 
     RowBox[{"2", "\[Rule]", "3"}]}], "}"}]}], "]"}]], "Code",
 CellChangeTimes->{{3.692909058510648*^9, 3.692909110763198*^9}}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetGraph", 
     RowBox[{"[", 
      PanelBox[
       TagBox[
        DynamicModuleBox[{NeuralNetworks`NetGraph`PackagePrivate`selection$$ =
          1, NeuralNetworks`NetGraph`PackagePrivate`outIndex$$ = 4, 
         NeuralNetworks`NetGraph`PackagePrivate`inputs$$ = Association[
         "Input" -> NeuralNetworks`TensorT[3, 
            NeuralNetworks`ListT[3, NeuralNetworks`SizeT]]], 
         NeuralNetworks`NetGraph`PackagePrivate`outputs$$ = Association[
         "Output" -> NeuralNetworks`ChannelT[64, 
            NeuralNetworks`TensorT[2, 
             NeuralNetworks`ListT[2, NeuralNetworks`SizeT]]]], 
         NeuralNetworks`NetGraph`PackagePrivate`labels$$ = {
         "1", "2", "3", "Input", "Output"}, 
         NeuralNetworks`NetGraph`PackagePrivate`vertices$$ = Association[
         "1" -> Association[
           "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
            Association[
             "Function" -> Ramp, "$Dimensions" -> 
              NeuralNetworks`ListT[3, NeuralNetworks`SizeT], "$Rank" -> 3], 
            "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[3, 
                NeuralNetworks`ListT[3, NeuralNetworks`SizeT]]], "Outputs" -> 
            Association["Output" -> NeuralNetworks`TensorT[3, 
                NeuralNetworks`ListT[3, NeuralNetworks`SizeT]]]], "2" -> 
          Association[
           "Type" -> "Convolution", "Arrays" -> 
            Association["Weights" -> NeuralNetworks`ChannelT[64, 
                NeuralNetworks`ChannelT[NeuralNetworks`SizeT, 
                 NeuralNetworks`TensorT[2, {3, 3}]]], "Biases" -> 
              NeuralNetworks`Nullable[
                NeuralNetworks`TensorT[1, {64}]]], "Parameters" -> 
            Association[
             "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
              "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
              "Dilation" -> {1, 1}, "InputChannels" -> NeuralNetworks`SizeT, 
              "$GroupNumber" -> 1, "$InputSize" -> 
              NeuralNetworks`ListT[2, NeuralNetworks`SizeT], "$OutputSize" -> 
              NeuralNetworks`ListT[2, NeuralNetworks`SizeT]], "Inputs" -> 
            Association["Input" -> NeuralNetworks`TensorT[3, 
                NeuralNetworks`ListT[3, NeuralNetworks`SizeT]]], "Outputs" -> 
            Association["Output" -> NeuralNetworks`ChannelT[64, 
                NeuralNetworks`TensorT[2, 
                 NeuralNetworks`ListT[2, NeuralNetworks`SizeT]]]]], "3" -> 
          Association[
           "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
            Association[
             "KernelSize" -> NeuralNetworks`ListT[2, NeuralNetworks`SizeT], 
              "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, "Function" -> Max, 
              "Channels" -> 64, "$InputSize" -> 
              NeuralNetworks`ListT[2, NeuralNetworks`SizeT], "$OutputSize" -> 
              NeuralNetworks`ListT[2, NeuralNetworks`SizeT]], "Inputs" -> 
            Association["Input" -> NeuralNetworks`ChannelT[64, 
                NeuralNetworks`TensorT[2, 
                 NeuralNetworks`ListT[2, NeuralNetworks`SizeT]]]], "Outputs" -> 
            Association["Output" -> NeuralNetworks`ChannelT[64, 
                NeuralNetworks`TensorT[2, 
                 NeuralNetworks`ListT[2, NeuralNetworks`SizeT]]]]]], 
         NeuralNetworks`NetGraph`PackagePrivate`vports$$ = {
          NetPort["Vertices", "1"], 
          NetPort["Vertices", "2"], 
          NetPort["Vertices", "3"], 
          NetPort["Inputs", "Input"], 
          NetPort["Outputs", "Output"]}}, 
         TagBox[GridBox[{
            {
             TemplateBox[{TagBox[
                GraphicsBox[{{
                   GrayLevel[0.7], {
                    
                    LineBox[{{-3., 1.8369701987210297`*^-16}, {-2., 
                    1.2246467991473532`*^-16}}], 
                    
                    LineBox[{{-2., 1.2246467991473532`*^-16}, {-1., 
                    6.123233995736766*^-17}}], 
                    
                    LineBox[{{-4., 2.4492935982947064`*^-16}, {-3., 
                    1.8369701987210297`*^-16}}], 
                    LineBox[{{-1., 6.123233995736766*^-17}, {0., 0.}}]}}, {
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-2.4000000000000004`, 
                    1.4695761589768238`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736765*^-17}], 
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-1.4, 
                    8.572527594031473*^-17}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736766*^-17}], 
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-3.4, 
                    2.0818995585505003`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-0.4, 
                    2.4492935982947065`*^-17}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736766*^-17}]}, {
                   GrayLevel[0], {
                    AbsolutePointSize[5], {{
                    RGBColor[0.29, 0.29, 0.83], 
                    TagBox[
                    PointBox[{-3., 1.8369701987210297`*^-16}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    Hue[0.61, 0.75, 1], 
                    TagBox[
                    PointBox[{-2., 1.2246467991473532`*^-16}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    RGBColor[0.38759999999999994`, 0.57, 0.], 
                    TagBox[
                    PointBox[{-1., 6.123233995736766*^-17}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    GrayLevel[0.5], 
                    TagBox[
                    PointBox[{-4., 2.4492935982947064`*^-16}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    GrayLevel[0.5], 
                    TagBox[
                    PointBox[{0., 0.}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}}}, {{
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-3., 1.8369701987210297`*^-16}], 
                    Offset[{0, -5.5}, {-3., 1.8369701987210297`*^-16}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"2\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-2., 1.2246467991473532`*^-16}], 
                    Offset[{0, -5.5}, {-2., 1.2246467991473532`*^-16}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-1., 6.123233995736766*^-17}], 
                    Offset[{0, -5.5}, {-1., 6.123233995736766*^-17}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Input\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-4., 2.4492935982947064`*^-16}], 
                    Offset[{0, -5.5}, {-4., 2.4492935982947064`*^-16}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Output\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {0., 0.}], 
                    Offset[{0, -5.5}, {0., 0.}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}]}, 
                   StyleBox[{
                    InsetBox[
                    FormBox["\"\[DottedSquare]\"", TraditionalForm], 
                    
                    Offset[{3.3677786976552205`*^-16, 
                    5.5}, {-2.4000000000000004`, 1.4695761589768238`*^-16}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    1., -6.123233995736765*^-17}], 
                    InsetBox[
                    FormBox[
                    "\"64\[Cross]\[DottedSquare]\[Cross]\[DottedSquare]\"", 
                    TraditionalForm], 
                    
                    Offset[{3.3677786976552215`*^-16, 5.5}, {-1.4, 
                    8.572527594031473*^-17}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    1., -6.123233995736766*^-17}], 
                    InsetBox[
                    FormBox["\"\[DottedSquare]\"", TraditionalForm], 
                    
                    Offset[{3.367778697655222*^-16, 5.5}, {-3.4, 
                    2.0818995585505003`*^-16}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    1., -6.123233995736767*^-17}], 
                    InsetBox[
                    FormBox[
                    "\"64\[Cross]\[DottedSquare]\[Cross]\[DottedSquare]\"", 
                    TraditionalForm], 
                    
                    Offset[{3.3677786976552215`*^-16, 5.5}, {-0.4, 
                    2.4492935982947065`*^-17}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    1., -6.123233995736766*^-17}]}, FontColor -> 
                    GrayLevel[0.5], FontSize -> 8, FontWeight -> "Thin", 
                    StripOnInput -> False]}, 
                  
                  DynamicModuleBox[{
                   GeneralUtilities`Graphics`PackagePrivate`vpos$12479 = \
{{-3., 1.8369701987210297`*^-16}, {-2., 1.2246467991473532`*^-16}, {-1., 
                    6.123233995736766*^-17}, {-4., 
                    2.4492935982947064`*^-16}, {0., 0.}}}, 
                   DynamicBox[
                    Typeset`ToBoxes[
                    If[
                    Not[
                    IntegerQ[
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$]], {}, {
                    AbsolutePointSize[10], 
                    Opacity[0.2, Black], 
                    Point[
                    Part[
                    GeneralUtilities`Graphics`PackagePrivate`vpos$12479, 
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$]]}], 
                    StandardForm, Graphics], 
                    TrackedSymbols :> {
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$}], 
                   DynamicModuleValues :> {}]}, 
                 ImageSize -> {298., 25.680000000000014`}, AspectRatio -> 
                 Full, PlotRangePadding -> 0, 
                 ImagePadding -> {{19.5, 22.5}, {15.5, 10.179999999999998`}}, 
                 ImageMargins -> {{0, 0}, {15, 15}}, 
                 BaseStyle -> {TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                
                
                EventHandlerTag[{
                 "MouseClicked" :> (
                   NeuralNetworks`NetGraph`PackagePrivate`selection$$ = None),
                   Method -> "Preemptive", PassEventsDown -> Automatic, 
                  PassEventsUp -> True}]],FormBox[
                TemplateBox[{
                  StyleBox["ElementwiseLayer", 
                   GrayLevel[0.35], StripOnInput -> False], 
                  StyleBox["ConvolutionLayer", 
                   GrayLevel[0.35], StripOnInput -> False], 
                  StyleBox["PoolingLayer", 
                   GrayLevel[0.35], StripOnInput -> False]}, "PointLegend", 
                 DisplayFunction -> (FormBox[
                   StyleBox[
                    StyleBox[
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.29, 0.29, 0.83]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.29, 0.29, 0.83]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {12, 12}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.16666666666666669`] -> 
                    Baseline)], "\" \"", #}, "RowDefault"], 
                    TemplateBox[{
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.38759999999999994`, 0.57, 0.]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.38759999999999994`, 0.57, 0.]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {12, 12}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.16666666666666669`] -> 
                    Baseline)], "\" \"", #3}, "RowDefault"]}, {
                    TemplateBox[{
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.61, 0.75, 1]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.61, 0.75, 1]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {12, 12}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.16666666666666669`] -> 
                    Baseline)], "\" \"", #2}, "RowDefault"], "\"\""}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"], Alignment -> Left, AppearanceElements -> None, 
                    ImageMargins -> {{2, 2}, {2, 2}}, ImageSizeAction -> 
                    "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
                    FontFamily -> "Arial"}, Background -> Automatic, 
                    StripOnInput -> False], TraditionalForm]& ), 
                 InterpretationFunction :> (RowBox[{"PointLegend", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Directive", "[", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.29, 0.29, 0.83], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[0.19333333333333333`, 0.19333333333333333`, 
                    0.5533333333333333], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.29, 0.29, 0.83]"], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.29, 0.29, 0.83]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.29, 0.29, 0.83], Editable -> False, Selectable -> 
                    False], "]"}], ",", 
                    RowBox[{"Directive", "[", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    Hue[0.61, 0.75, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    Hue[0.61, 0.7499999999999999, 0.6666666666666667], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "Hue[0.61, 0.75, 1]"], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    Hue[0.61, 0.75, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["HueColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    Hue[0.61, 0.75, 1], Editable -> False, Selectable -> 
                    False], "]"}], ",", 
                    RowBox[{"Directive", "[", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.38759999999999994`, 0.57, 0.], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[0.25839999999999996`, 0.38, 0.], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.38759999999999994, 0.57, 0.]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.38759999999999994`, 0.57, 0.]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.38759999999999994`, 0.57, 0.], Editable -> 
                    False, Selectable -> False], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2, ",", #3}], "}"}], ",", 
                    RowBox[{"LegendMarkerSize", "\[Rule]", "12"}], ",", 
                    RowBox[{"LegendMargins", "\[Rule]", "2"}], ",", 
                    
                    RowBox[{
                    "LegendLayout", "\[Rule]", 
                    "GeneralUtilities`Graphics`PackagePrivate`legendTable"}]}]\
, "]"}]& ), Editable -> True], TraditionalForm]},
              "Legended",
              DisplayFunction->(GridBox[{{
                  TagBox[
                   ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                   "SkipImageSizeLevel"]}, {
                  ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                False, GridBoxItemSize -> Automatic, 
                BaselinePosition -> {1, 1}]& ),
              Editable->True,
              InterpretationFunction->(RowBox[{"Legended", "[", 
                 RowBox[{#, ",", 
                   RowBox[{"Placed", "[", 
                    RowBox[{#2, ",", "Below"}], "]"}]}], "]"}]& )]},
            {
             DynamicBox[ToBoxes[
               If[
                IntegerQ[NeuralNetworks`NetGraph`PackagePrivate`selection$$], 
                
                Item[
                 NeuralNetworks`NetGraph`PackagePrivate`vportInfo[
                  Part[
                  NeuralNetworks`NetGraph`PackagePrivate`vports$$, 
                   NeuralNetworks`NetGraph`PackagePrivate`selection$$], 
                  NeuralNetworks`NetGraph`PackagePrivate`inputs$$, 
                  NeuralNetworks`NetGraph`PackagePrivate`outputs$$, 
                  NeuralNetworks`NetGraph`PackagePrivate`vertices$$], 
                 Alignment -> Center], 
                Item["", ItemSize -> {0, 0}]], StandardForm],
              ImageSizeCache->{208., {69., 75.}},
              
              TrackedSymbols:>{
               NeuralNetworks`NetGraph`PackagePrivate`selection$$}]}
           },
           AutoDelete->False,
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Grid"],
         DynamicModuleValues:>{},
         Initialization:>{NetGraph}],
        Deploy,
        DefaultBaseStyle->"Deploy"],
       BaselinePosition->(Top -> Scaled[3])], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{{3.692909087377481*^9, 3.692909111553701*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetGraph", "[", 
  RowBox[{
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<ramp1\>\"", "\[Rule]", " ", "Ramp"}], ",", " ", 
     RowBox[{"\"\<conv1\>\"", "\[Rule]", " ", 
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"64", ",", " ", 
        RowBox[{"{", 
         RowBox[{"3", ",", "3"}], "}"}]}], "]"}]}], ",", " ", 
     RowBox[{"\"\<pool1\>\"", "\[Rule]", " ", 
      RowBox[{"PoolingLayer", "[", "]"}]}]}], "|>"}], ",", "\n", "\t\t", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\"\<ramp1\>\"", "\[Rule]", " ", "\"\<conv1\>\""}], ",", " ", 
     RowBox[{"\"\<conv1\>\"", "\[Rule]", "\"\<pool1\>\""}]}], "}"}]}], 
  "]"}]], "Code",
 CellChangeTimes->{{3.692909196051407*^9, 3.6929092906817207`*^9}}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetGraph", 
     RowBox[{"[", 
      PanelBox[
       TagBox[
        DynamicModuleBox[{NeuralNetworks`NetGraph`PackagePrivate`selection$$ =
          None, NeuralNetworks`NetGraph`PackagePrivate`outIndex$$ = 4, 
         NeuralNetworks`NetGraph`PackagePrivate`inputs$$ = Association[
         "Input" -> NeuralNetworks`TensorT[3, 
            NeuralNetworks`ListT[3, NeuralNetworks`SizeT]]], 
         NeuralNetworks`NetGraph`PackagePrivate`outputs$$ = Association[
         "Output" -> NeuralNetworks`ChannelT[64, 
            NeuralNetworks`TensorT[2, 
             NeuralNetworks`ListT[2, NeuralNetworks`SizeT]]]], 
         NeuralNetworks`NetGraph`PackagePrivate`labels$$ = {
         "ramp1", "conv1", "pool1", "Input", "Output"}, 
         NeuralNetworks`NetGraph`PackagePrivate`vertices$$ = Association[
         "ramp1" -> Association[
           "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
            Association[
             "Function" -> Ramp, "$Dimensions" -> 
              NeuralNetworks`ListT[3, NeuralNetworks`SizeT], "$Rank" -> 3], 
            "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[3, 
                NeuralNetworks`ListT[3, NeuralNetworks`SizeT]]], "Outputs" -> 
            Association["Output" -> NeuralNetworks`TensorT[3, 
                NeuralNetworks`ListT[3, NeuralNetworks`SizeT]]]], "conv1" -> 
          Association[
           "Type" -> "Convolution", "Arrays" -> 
            Association["Weights" -> NeuralNetworks`ChannelT[64, 
                NeuralNetworks`ChannelT[NeuralNetworks`SizeT, 
                 NeuralNetworks`TensorT[2, {3, 3}]]], "Biases" -> 
              NeuralNetworks`Nullable[
                NeuralNetworks`TensorT[1, {64}]]], "Parameters" -> 
            Association[
             "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
              "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
              "Dilation" -> {1, 1}, "InputChannels" -> NeuralNetworks`SizeT, 
              "$GroupNumber" -> 1, "$InputSize" -> 
              NeuralNetworks`ListT[2, NeuralNetworks`SizeT], "$OutputSize" -> 
              NeuralNetworks`ListT[2, NeuralNetworks`SizeT]], "Inputs" -> 
            Association["Input" -> NeuralNetworks`TensorT[3, 
                NeuralNetworks`ListT[3, NeuralNetworks`SizeT]]], "Outputs" -> 
            Association["Output" -> NeuralNetworks`ChannelT[64, 
                NeuralNetworks`TensorT[2, 
                 NeuralNetworks`ListT[2, NeuralNetworks`SizeT]]]]], "pool1" -> 
          Association[
           "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
            Association[
             "KernelSize" -> NeuralNetworks`ListT[2, NeuralNetworks`SizeT], 
              "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, "Function" -> Max, 
              "Channels" -> 64, "$InputSize" -> 
              NeuralNetworks`ListT[2, NeuralNetworks`SizeT], "$OutputSize" -> 
              NeuralNetworks`ListT[2, NeuralNetworks`SizeT]], "Inputs" -> 
            Association["Input" -> NeuralNetworks`ChannelT[64, 
                NeuralNetworks`TensorT[2, 
                 NeuralNetworks`ListT[2, NeuralNetworks`SizeT]]]], "Outputs" -> 
            Association["Output" -> NeuralNetworks`ChannelT[64, 
                NeuralNetworks`TensorT[2, 
                 NeuralNetworks`ListT[2, NeuralNetworks`SizeT]]]]]], 
         NeuralNetworks`NetGraph`PackagePrivate`vports$$ = {
          NetPort["Vertices", "ramp1"], 
          NetPort["Vertices", "conv1"], 
          NetPort["Vertices", "pool1"], 
          NetPort["Inputs", "Input"], 
          NetPort["Outputs", "Output"]}}, 
         TagBox[GridBox[{
            {
             TemplateBox[{TagBox[
                GraphicsBox[{{
                   GrayLevel[0.7], {
                    
                    LineBox[{{-3., 1.8369701987210297`*^-16}, {-2., 
                    1.2246467991473532`*^-16}}], 
                    
                    LineBox[{{-2., 1.2246467991473532`*^-16}, {-1., 
                    6.123233995736766*^-17}}], 
                    
                    LineBox[{{-4., 2.4492935982947064`*^-16}, {-3., 
                    1.8369701987210297`*^-16}}], 
                    LineBox[{{-1., 6.123233995736766*^-17}, {0., 0.}}]}}, {
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-2.4000000000000004`, 
                    1.4695761589768238`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736765*^-17}], 
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-1.4, 
                    8.572527594031473*^-17}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736766*^-17}], 
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-3.4, 
                    2.0818995585505003`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-0.4, 
                    2.4492935982947065`*^-17}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736766*^-17}]}, {
                   GrayLevel[0], {
                    AbsolutePointSize[5], {{
                    RGBColor[0.29, 0.29, 0.83], 
                    TagBox[
                    PointBox[{-3., 1.8369701987210297`*^-16}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    Hue[0.61, 0.75, 1], 
                    TagBox[
                    PointBox[{-2., 1.2246467991473532`*^-16}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    RGBColor[0.38759999999999994`, 0.57, 0.], 
                    TagBox[
                    PointBox[{-1., 6.123233995736766*^-17}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    GrayLevel[0.5], 
                    TagBox[
                    PointBox[{-4., 2.4492935982947064`*^-16}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    GrayLevel[0.5], 
                    TagBox[
                    PointBox[{0., 0.}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}}}, {{
                    InsetBox[
                    FormBox["\"ramp1\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-3., 1.8369701987210297`*^-16}], 
                    Offset[{0, -5.5}, {-3., 1.8369701987210297`*^-16}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"conv1\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-2., 1.2246467991473532`*^-16}], 
                    Offset[{0, -5.5}, {-2., 1.2246467991473532`*^-16}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"pool1\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-1., 6.123233995736766*^-17}], 
                    Offset[{0, -5.5}, {-1., 6.123233995736766*^-17}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Input\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-4., 2.4492935982947064`*^-16}], 
                    Offset[{0, -5.5}, {-4., 2.4492935982947064`*^-16}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Output\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {0., 0.}], 
                    Offset[{0, -5.5}, {0., 0.}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}]}, 
                   StyleBox[{
                    InsetBox[
                    FormBox["\"\[DottedSquare]\"", TraditionalForm], 
                    
                    Offset[{3.3677786976552205`*^-16, 
                    5.5}, {-2.4000000000000004`, 1.4695761589768238`*^-16}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    1., -6.123233995736765*^-17}], 
                    InsetBox[
                    FormBox[
                    "\"64\[Cross]\[DottedSquare]\[Cross]\[DottedSquare]\"", 
                    TraditionalForm], 
                    
                    Offset[{3.3677786976552215`*^-16, 5.5}, {-1.4, 
                    8.572527594031473*^-17}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    1., -6.123233995736766*^-17}], 
                    InsetBox[
                    FormBox["\"\[DottedSquare]\"", TraditionalForm], 
                    
                    Offset[{3.367778697655222*^-16, 5.5}, {-3.4, 
                    2.0818995585505003`*^-16}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    1., -6.123233995736767*^-17}], 
                    InsetBox[
                    FormBox[
                    "\"64\[Cross]\[DottedSquare]\[Cross]\[DottedSquare]\"", 
                    TraditionalForm], 
                    
                    Offset[{3.3677786976552215`*^-16, 5.5}, {-0.4, 
                    2.4492935982947065`*^-17}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    1., -6.123233995736766*^-17}]}, FontColor -> 
                    GrayLevel[0.5], FontSize -> 8, FontWeight -> "Thin", 
                    StripOnInput -> False]}, 
                  
                  DynamicModuleBox[{
                   GeneralUtilities`Graphics`PackagePrivate`vpos$12668 = \
{{-3., 1.8369701987210297`*^-16}, {-2., 1.2246467991473532`*^-16}, {-1., 
                    6.123233995736766*^-17}, {-4., 
                    2.4492935982947064`*^-16}, {0., 0.}}}, 
                   DynamicBox[
                    Typeset`ToBoxes[
                    If[
                    Not[
                    IntegerQ[
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$]], {}, {
                    AbsolutePointSize[10], 
                    Opacity[0.2, Black], 
                    Point[
                    Part[
                    GeneralUtilities`Graphics`PackagePrivate`vpos$12668, 
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$]]}], 
                    StandardForm, Graphics], 
                    TrackedSymbols :> {
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$}], 
                   DynamicModuleValues :> {}]}, 
                 ImageSize -> {298., 25.680000000000014`}, AspectRatio -> 
                 Full, PlotRangePadding -> 0, 
                 ImagePadding -> {{19.5, 22.5}, {15.5, 10.179999999999998`}}, 
                 ImageMargins -> {{0, 0}, {15, 15}}, 
                 BaseStyle -> {TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                
                
                EventHandlerTag[{
                 "MouseClicked" :> (
                   NeuralNetworks`NetGraph`PackagePrivate`selection$$ = None),
                   Method -> "Preemptive", PassEventsDown -> Automatic, 
                  PassEventsUp -> True}]],FormBox[
                TemplateBox[{
                  StyleBox["ElementwiseLayer", 
                   GrayLevel[0.35], StripOnInput -> False], 
                  StyleBox["ConvolutionLayer", 
                   GrayLevel[0.35], StripOnInput -> False], 
                  StyleBox["PoolingLayer", 
                   GrayLevel[0.35], StripOnInput -> False]}, "PointLegend", 
                 DisplayFunction -> (FormBox[
                   StyleBox[
                    StyleBox[
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.29, 0.29, 0.83]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.29, 0.29, 0.83]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {12, 12}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.16666666666666669`] -> 
                    Baseline)], "\" \"", #}, "RowDefault"], 
                    TemplateBox[{
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.38759999999999994`, 0.57, 0.]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.38759999999999994`, 0.57, 0.]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {12, 12}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.16666666666666669`] -> 
                    Baseline)], "\" \"", #3}, "RowDefault"]}, {
                    TemplateBox[{
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.61, 0.75, 1]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.61, 0.75, 1]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {12, 12}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.16666666666666669`] -> 
                    Baseline)], "\" \"", #2}, "RowDefault"], "\"\""}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"], Alignment -> Left, AppearanceElements -> None, 
                    ImageMargins -> {{2, 2}, {2, 2}}, ImageSizeAction -> 
                    "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
                    FontFamily -> "Arial"}, Background -> Automatic, 
                    StripOnInput -> False], TraditionalForm]& ), 
                 InterpretationFunction :> (RowBox[{"PointLegend", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Directive", "[", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.29, 0.29, 0.83], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[0.19333333333333333`, 0.19333333333333333`, 
                    0.5533333333333333], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.29, 0.29, 0.83]"], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.29, 0.29, 0.83]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.29, 0.29, 0.83], Editable -> False, Selectable -> 
                    False], "]"}], ",", 
                    RowBox[{"Directive", "[", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    Hue[0.61, 0.75, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    Hue[0.61, 0.7499999999999999, 0.6666666666666667], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "Hue[0.61, 0.75, 1]"], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    Hue[0.61, 0.75, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["HueColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    Hue[0.61, 0.75, 1], Editable -> False, Selectable -> 
                    False], "]"}], ",", 
                    RowBox[{"Directive", "[", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.38759999999999994`, 0.57, 0.], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[0.25839999999999996`, 0.38, 0.], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.38759999999999994, 0.57, 0.]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.38759999999999994`, 0.57, 0.]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.38759999999999994`, 0.57, 0.], Editable -> 
                    False, Selectable -> False], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2, ",", #3}], "}"}], ",", 
                    RowBox[{"LegendMarkerSize", "\[Rule]", "12"}], ",", 
                    RowBox[{"LegendMargins", "\[Rule]", "2"}], ",", 
                    
                    RowBox[{
                    "LegendLayout", "\[Rule]", 
                    "GeneralUtilities`Graphics`PackagePrivate`legendTable"}]}]\
, "]"}]& ), Editable -> True], TraditionalForm]},
              "Legended",
              DisplayFunction->(GridBox[{{
                  TagBox[
                   ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                   "SkipImageSizeLevel"]}, {
                  ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                False, GridBoxItemSize -> Automatic, 
                BaselinePosition -> {1, 1}]& ),
              Editable->True,
              InterpretationFunction->(RowBox[{"Legended", "[", 
                 RowBox[{#, ",", 
                   RowBox[{"Placed", "[", 
                    RowBox[{#2, ",", "Below"}], "]"}]}], "]"}]& )]},
            {
             DynamicBox[ToBoxes[
               If[
                IntegerQ[NeuralNetworks`NetGraph`PackagePrivate`selection$$], 
                
                Item[
                 NeuralNetworks`NetGraph`PackagePrivate`vportInfo[
                  Part[
                  NeuralNetworks`NetGraph`PackagePrivate`vports$$, 
                   NeuralNetworks`NetGraph`PackagePrivate`selection$$], 
                  NeuralNetworks`NetGraph`PackagePrivate`inputs$$, 
                  NeuralNetworks`NetGraph`PackagePrivate`outputs$$, 
                  NeuralNetworks`NetGraph`PackagePrivate`vertices$$], 
                 Alignment -> Center], 
                Item["", ItemSize -> {0, 0}]], StandardForm],
              ImageSizeCache->{0., {0., 7.}},
              
              TrackedSymbols:>{
               NeuralNetworks`NetGraph`PackagePrivate`selection$$}]}
           },
           AutoDelete->False,
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Grid"],
         DynamicModuleValues:>{},
         Initialization:>{NetGraph}],
        Deploy,
        DefaultBaseStyle->"Deploy"],
       BaselinePosition->(Top -> Scaled[3])], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{{3.6929092781008997`*^9, 3.692909291738839*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetGraph", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"Ramp", ",", " ", "LogisticSigmoid", ",", " ", 
     RowBox[{"CatenateLayer", "[", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"1", "\[Rule]", " ", "2"}], ",", " ", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}], "\[Rule]", "3"}]}], "}"}]}], 
  "]"}]], "Code",
 CellChangeTimes->{{3.692909371456725*^9, 3.692909408117113*^9}}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetGraph", "[", 
     PanelBox[
      TagBox[
       DynamicModuleBox[{NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 
        None, NeuralNetworks`NetGraph`PackagePrivate`outIndex$$ = 4, 
        NeuralNetworks`NetGraph`PackagePrivate`inputs$$ = Association[
        "Input" -> NeuralNetworks`TensorT[NeuralNetworks`NaturalT, 
           NeuralNetworks`ListT[
           NeuralNetworks`NaturalT, NeuralNetworks`SizeT]]], 
        NeuralNetworks`NetGraph`PackagePrivate`outputs$$ = Association[
        "Output" -> NeuralNetworks`TensorT[NeuralNetworks`NaturalT, 
           NeuralNetworks`ListT[
           NeuralNetworks`NaturalT, NeuralNetworks`SizeT]]], 
        NeuralNetworks`NetGraph`PackagePrivate`labels$$ = {
        "1", "2", "3", "Input", "Output"}, 
        NeuralNetworks`NetGraph`PackagePrivate`vertices$$ = Association[
        "1" -> Association[
          "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
           Association[
            "Function" -> Ramp, "$Dimensions" -> 
             NeuralNetworks`ListT[
              NeuralNetworks`NaturalT, NeuralNetworks`SizeT], "$Rank" -> 
             NeuralNetworks`NaturalT], "Inputs" -> 
           Association[
            "Input" -> NeuralNetworks`TensorT[NeuralNetworks`NaturalT, 
               NeuralNetworks`ListT[
               NeuralNetworks`NaturalT, NeuralNetworks`SizeT]]], "Outputs" -> 
           Association[
            "Output" -> NeuralNetworks`TensorT[NeuralNetworks`NaturalT, 
               NeuralNetworks`ListT[
               NeuralNetworks`NaturalT, NeuralNetworks`SizeT]]]], "2" -> 
         Association[
          "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
           Association[
            "Function" -> LogisticSigmoid, "$Dimensions" -> 
             NeuralNetworks`ListT[
              NeuralNetworks`NaturalT, NeuralNetworks`SizeT], "$Rank" -> 
             NeuralNetworks`NaturalT], "Inputs" -> 
           Association[
            "Input" -> NeuralNetworks`TensorT[NeuralNetworks`NaturalT, 
               NeuralNetworks`ListT[
               NeuralNetworks`NaturalT, NeuralNetworks`SizeT]]], "Outputs" -> 
           Association[
            "Output" -> NeuralNetworks`TensorT[NeuralNetworks`NaturalT, 
               NeuralNetworks`ListT[
               NeuralNetworks`NaturalT, NeuralNetworks`SizeT]]]], "3" -> 
         Association[
          "Type" -> "Catenate", "Arrays" -> Association[], "Parameters" -> 
           Association[
            "$InputCount" -> 2, "$Rank" -> NeuralNetworks`NaturalT], "Inputs" -> 
           Association["Input" -> {
               NeuralNetworks`TensorT[NeuralNetworks`NaturalT, 
                NeuralNetworks`ListT[
                NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], 
               NeuralNetworks`TensorT[NeuralNetworks`NaturalT, 
                NeuralNetworks`ListT[
                NeuralNetworks`NaturalT, NeuralNetworks`SizeT]]}], "Outputs" -> 
           Association[
            "Output" -> NeuralNetworks`TensorT[NeuralNetworks`NaturalT, 
               NeuralNetworks`ListT[
               NeuralNetworks`NaturalT, NeuralNetworks`SizeT]]]]], 
        NeuralNetworks`NetGraph`PackagePrivate`vports$$ = {
         NetPort["Vertices", "1"], 
         NetPort["Vertices", "2"], 
         NetPort["Vertices", "3"], 
         NetPort["Inputs", "Input"], 
         NetPort["Outputs", "Output"]}}, 
        TagBox[GridBox[{
           {
            TemplateBox[{TagBox[
               GraphicsBox[{{
                  GrayLevel[0.7], {
                   
                   LineBox[{{-3., 1.8369701987210297`*^-16}, {-2., 
                    1.2246467991473532`*^-16}}], 
                   LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQEcB7i65vlYVq6yOamsXfx1DvuBLbzmposPrbDv
mJWk+1CT/YDO+jXBtw7vsrdMWaZ3eBnbgYY9M0XPTj5qf6/hW9lsYbYDep+m
T/A4ds6+7EMQW1YB6wH/moyz62uu2LNs3n1Hby/LgefpSlKdYrfsW04Y/Hr5
k/nAh7s24hESD+x/GmyKm63GfEDOxrx1Uupj+8Q39lzOzkwHavwYrn/+9Mze
yFVIffJ+xgMRk0NF7W++sH/v1jnvmynjgYstoT4hba/sZ3xcUpC7jOHAIyWG
GuNfr+21XFPnfhdgODAhN3TJHZO39v7NUzy1Xv/bfz0l9Ki/2Tt7xXPLeXtW
/N2/k4Phfs+/d/YnsljaRaL+7DeLDP04ufe9vVvkqq2H///a7xcW+ifl8Xv7
mWDwcz8knD7Yn7tx9PV88x9w/ufDSqkPXn6D89miN7BGb/i6nxHGn5d3lr/7
C1z+a0/snn+Vn+H8S+q1QPQJzp8LUj7lI5wfkehXonHgA5z/Hwzew/kAYd3M
1w==
                    "]], 
                   LineBox[{{-2., 
                    1.2246467991473532`*^-16}, {-0.9999999999999999, 1.}}], 
                   
                   LineBox[{{-4., 2.4492935982947064`*^-16}, {-3., 
                    1.8369701987210297`*^-16}}], 
                   
                   LineBox[{{-0.9999999999999999, 1.}, {
                    6.123233995736766*^-17, 1.}}]}}, {
                  InsetBox[
                   GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-2.4000000000000004`, 
                   1.4695761589768238`*^-16}, {-0.25, 0}, 
                   Offset[8], {1., -6.123233995736765*^-17}], 
                  InsetBox[
                   GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-1.8128207114948767`, 
                   0.9773027452952467}, {-0.25, 0}, 
                   Offset[8], {0.08165695756016178, 0.01745942669596412}], 
                  InsetBox[
                   GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-1.4, 
                   0.6}, {-0.25, 0}, 
                   Offset[8], {1., 0.9999999999999999}], 
                  InsetBox[
                   GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-3.4, 
                   2.0818995585505003`*^-16}, {-0.25, 0}, 
                   Offset[8], {1., -6.123233995736767*^-17}], 
                  InsetBox[
                   GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-0.3999999999999999, 1.}, {-0.25, 0}, 
                   Offset[8], {1., 0.}]}, {
                  GrayLevel[0], {
                   AbsolutePointSize[5], {{
                    RGBColor[0.29, 0.29, 0.83], 
                    TagBox[
                    PointBox[{-3., 1.8369701987210297`*^-16}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    RGBColor[0.29, 0.29, 0.83], 
                    TagBox[
                    PointBox[{-2., 1.2246467991473532`*^-16}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    RGBColor[0.9, 0., 0.], 
                    TagBox[
                    PointBox[{-0.9999999999999999, 1.}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    GrayLevel[0.5], 
                    TagBox[
                    PointBox[{-4., 2.4492935982947064`*^-16}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    GrayLevel[0.5], 
                    TagBox[
                    PointBox[{6.123233995736766*^-17, 1.}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}}}, {{
                   InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-3., 1.8369701987210297`*^-16}], 
                    Offset[{0, -5.5}, {-3., 1.8369701987210297`*^-16}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                   InsetBox[
                    FormBox["\"2\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-2., 1.2246467991473532`*^-16}], 
                    Offset[{0, -5.5}, {-2., 1.2246467991473532`*^-16}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                   InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-0.9999999999999999, 1.}], 
                    Offset[{0, -5.5}, {-0.9999999999999999, 1.}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                   InsetBox[
                    FormBox["\"Input\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-4., 2.4492935982947064`*^-16}], 
                    Offset[{0, -5.5}, {-4., 2.4492935982947064`*^-16}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                   InsetBox[
                    FormBox["\"Output\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {6.123233995736766*^-17, 1.}], 
                    Offset[{0, -5.5}, {6.123233995736766*^-17, 1.}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}]}, 
                  StyleBox[{
                    InsetBox[
                    FormBox["\"\[DottedSquare]\"", TraditionalForm], 
                    
                    Offset[{3.3677786976552205`*^-16, 
                    5.5}, {-2.4000000000000004`, 1.4695761589768238`*^-16}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    1., -6.123233995736765*^-17}], 
                    InsetBox[
                    FormBox["\"\[DottedSquare]\"", TraditionalForm], 
                    
                    Offset[{-1.1499858073915674`, 
                    5.378432173300875}, {-1.8128207114948767`, 
                    0.9773027452952467}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.9778967587819772,
                     0.20908832861664864`}], 
                    InsetBox[
                    FormBox["\"\[DottedSquare]\"", TraditionalForm], 
                    
                    Offset[{-3.889087296526011, 3.8890872965260117`}, {-1.4, 
                    0.6}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071067811865476,
                     0.7071067811865475}], 
                    InsetBox[
                    FormBox["\"\[DottedSquare]\"", TraditionalForm], 
                    
                    Offset[{3.367778697655222*^-16, 5.5}, {-3.4, 
                    2.0818995585505003`*^-16}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    1., -6.123233995736767*^-17}], 
                    InsetBox[
                    FormBox["\"\[DottedSquare]\"", TraditionalForm], 
                    Offset[{0., 5.5}, {-0.3999999999999999, 1.}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {1., 0.}]}, 
                   FontColor -> GrayLevel[0.5], FontSize -> 8, FontWeight -> 
                   "Thin", StripOnInput -> False]}, 
                 
                 DynamicModuleBox[{
                  GeneralUtilities`Graphics`PackagePrivate`vpos$12760 = {{-3.,
                     1.8369701987210297`*^-16}, {-2., 
                    1.2246467991473532`*^-16}, {-0.9999999999999999, 
                    1.}, {-4., 2.4492935982947064`*^-16}, {
                    6.123233995736766*^-17, 1.}}}, 
                  DynamicBox[
                   Typeset`ToBoxes[
                    If[
                    Not[
                    IntegerQ[
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$]], {}, {
                    AbsolutePointSize[10], 
                    Opacity[0.2, Black], 
                    Point[
                    Part[
                    GeneralUtilities`Graphics`PackagePrivate`vpos$12760, 
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$]]}], 
                    StandardForm, Graphics], 
                   TrackedSymbols :> {
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$}], 
                  DynamicModuleValues :> {}]}, ImageSize -> {298., 89.68}, 
                AspectRatio -> Full, PlotRangePadding -> 0, 
                ImagePadding -> {{19.5, 22.5}, {15.5, 10.180000000000007`}}, 
                ImageMargins -> {{0, 0}, {15, 15}}, 
                BaseStyle -> {TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
               
               EventHandlerTag[{
                "MouseClicked" :> (
                  NeuralNetworks`NetGraph`PackagePrivate`selection$$ = None), 
                 Method -> "Preemptive", PassEventsDown -> Automatic, 
                 PassEventsUp -> True}]],FormBox[
               TemplateBox[{
                 StyleBox["ElementwiseLayer", 
                  GrayLevel[0.35], StripOnInput -> False], 
                 StyleBox["CatenateLayer", 
                  GrayLevel[0.35], StripOnInput -> False]}, "PointLegend", 
                DisplayFunction -> (FormBox[
                  StyleBox[
                   StyleBox[
                    PaneBox[
                    TemplateBox[{"   ", "\"   \"", 
                    TemplateBox[{
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.29, 0.29, 0.83]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.29, 0.29, 0.83]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {12, 12}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.16666666666666669`] -> 
                    Baseline)], "\" \"", #}, "RowDefault"], 
                    TemplateBox[{
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.9, 0., 0.]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.9, 0., 0.]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {12, 12}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.16666666666666669`] -> 
                    Baseline)], "\" \"", #2}, "RowDefault"]}, 
                    "RowWithSeparators"], Alignment -> Left, 
                    AppearanceElements -> None, 
                    ImageMargins -> {{2, 2}, {2, 2}}, ImageSizeAction -> 
                    "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
                   FontFamily -> "Arial"}, Background -> Automatic, 
                   StripOnInput -> False], TraditionalForm]& ), 
                InterpretationFunction :> (RowBox[{"PointLegend", "[", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Directive", "[", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.29, 0.29, 0.83], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[0.19333333333333333`, 0.19333333333333333`, 
                    0.5533333333333333], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.29, 0.29, 0.83]"], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.29, 0.29, 0.83]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.29, 0.29, 0.83], Editable -> False, Selectable -> 
                    False], "]"}], ",", 
                    RowBox[{"Directive", "[", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.9, 0., 0.], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> RGBColor[0.6000000000000001, 0., 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.9, 0., 0.]"], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.9, 0., 0.]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.9, 0., 0.], Editable -> False, Selectable -> 
                    False], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{#, ",", #2}], "}"}], ",", 
                    RowBox[{"LegendMarkerSize", "\[Rule]", "12"}], ",", 
                    RowBox[{"LegendMargins", "\[Rule]", "2"}], ",", 
                    
                    RowBox[{
                    "LegendLayout", "\[Rule]", 
                    "GeneralUtilities`Graphics`PackagePrivate`legendTable"}]}]\
, "]"}]& ), Editable -> True], TraditionalForm]},
             "Legended",
             DisplayFunction->(GridBox[{{
                 TagBox[
                  ItemBox[
                   PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                  "SkipImageSizeLevel"]}, {
                 ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
               False, GridBoxItemSize -> Automatic, 
               BaselinePosition -> {1, 1}]& ),
             Editable->True,
             InterpretationFunction->(RowBox[{"Legended", "[", 
                RowBox[{#, ",", 
                  RowBox[{"Placed", "[", 
                    RowBox[{#2, ",", "Below"}], "]"}]}], "]"}]& )]},
           {
            DynamicBox[ToBoxes[
              If[
               IntegerQ[NeuralNetworks`NetGraph`PackagePrivate`selection$$], 
               Item[
                NeuralNetworks`NetGraph`PackagePrivate`vportInfo[
                 Part[
                 NeuralNetworks`NetGraph`PackagePrivate`vports$$, 
                  NeuralNetworks`NetGraph`PackagePrivate`selection$$], 
                 NeuralNetworks`NetGraph`PackagePrivate`inputs$$, 
                 NeuralNetworks`NetGraph`PackagePrivate`outputs$$, 
                 NeuralNetworks`NetGraph`PackagePrivate`vertices$$], 
                Alignment -> Center], 
               Item["", ItemSize -> {0, 0}]], StandardForm],
             ImageSizeCache->{0., {0., 7.}},
             
             TrackedSymbols:>{
              NeuralNetworks`NetGraph`PackagePrivate`selection$$}]}
          },
          AutoDelete->False,
          GridBoxAlignment->{"Columns" -> {{Left}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
         "Grid"],
        DynamicModuleValues:>{},
        Initialization:>{NetGraph}],
       Deploy,
       DefaultBaseStyle->"Deploy"],
      BaselinePosition->(Top -> Scaled[3])], "]"}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.6929093787861147`*^9, 3.692909411062848*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["NetTrain", "Subchapter",
 CellChangeTimes->{{3.692909464113429*^9, 3.6929094664184237`*^9}}],

Cell[CellGroupData[{

Cell["Define and train a net to add three numbers:", "Subsubsection",
 CellChangeTimes->{{3.692909490539508*^9, 3.6929095059019823`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"#", "\[Rule]", " ", 
       RowBox[{"{", 
        RowBox[{"Plus", "@@", " ", "#"}], "}"}]}], ")"}], " ", "&"}], " ", "/@",
     " ", 
    RowBox[{"RandomReal", "[", 
     RowBox[{"1000", ",", " ", 
      RowBox[{"{", 
       RowBox[{"100", ",", " ", "3"}], "}"}]}], "]"}]}]}], ";"}]], "Code",
 CellChangeTimes->{{3.692909509980068*^9, 3.692909570931468*^9}, 
   3.692909912921707*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", " ", "=", " ", 
  RowBox[{"NetChain", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"DotPlusLayer", "[", "1", "]"}], "}"}], ",", " ", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", " ", "3"}]}], "]"}]}]], "Code",
 CellChangeTimes->{{3.692910050135223*^9, 3.692910085644567*^9}}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"3"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Inputs", "Input"}, "Mouse"], 
            "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Outputs", "Output"}, "Mouse"], 
            "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {1, 3}], "Biases" -> 
               NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[1, {1}]]], "Parameters" -> 
             Association["Size" -> 1, "$InputSize" -> 3], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {3}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {1}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "1", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`TensorT[1, {3}]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`TensorT[1, {1}]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{204., {21.771240234375, 28.228759765625}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.692910095623475*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", " ", "=", " ", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net", ",", " ", "data", ",", " ", 
    RowBox[{"Method", "\[Rule]", "\"\<ADAM\>\""}]}], "]"}]}]], "Code",
 CellChangeTimes->{{3.692910405929701*^9, 3.6929104339963617`*^9}}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"3"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Inputs", "Input"}, "Mouse"], 
            "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Outputs", "Output"}, "Mouse"], 
            "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {1, 3}], "Biases" -> 
               NeuralNetworks`TensorT[1, {1}]], "Parameters" -> 
             Association["Size" -> 1, "$InputSize" -> 3], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {3}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {1}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "1", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`TensorT[1, {3}]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`TensorT[1, {1}]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$ = {"Layers", "1"}, 
        NeuralNetworks`NetChain`PackagePrivate`part$$ = {"Layers", "1"}, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Association[
        "Type" -> "DotPlus", "Arrays" -> 
         Association[
          "Weights" -> NeuralNetworks`TensorT[2, {1, 3}], "Biases" -> 
           NeuralNetworks`TensorT[1, {1}]], "Parameters" -> 
         Association["Size" -> 1, "$InputSize" -> 3], "Inputs" -> 
         Association["Input" -> NeuralNetworks`TensorT[1, {3}]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`TensorT[1, {1}]]]}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{221., {129.271240234375, 135.728759765625}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.692910459819556*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"net", "@", 
  RowBox[{"{", 
   RowBox[{"200", ",", " ", "300", ",", " ", "120"}], "}"}]}]], "Code",
 CellChangeTimes->{{3.6929104636129417`*^9, 3.69291047932863*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetExtract", "[", 
  RowBox[{
   RowBox[{"NetExtract", "[", 
    RowBox[{"net", ",", " ", "1"}], "]"}], ",", " ", "\"\<Weights\>\""}], 
  "]"}]], "Code",
 CellChangeTimes->{{3.6929105486963863`*^9, 3.692910581229076*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
   "0.9999166131019592`", ",", "0.9999426007270813`", ",", 
    "0.9999415874481201`"}], "}"}], "}"}]], "Output",
 CellChangeTimes->{
  3.6929104799189043`*^9, {3.6929105738127747`*^9, 3.69291058171364*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Define and train a net to add three numbers using both MeanSquaredLayer and \
MeanAbosoluteLossLayer:\
\>", "Subsubsection",
 CellChangeTimes->{{3.6929099261664953`*^9, 3.692909963886466*^9}}],

Cell[BoxData[
 RowBox[{"NetGraph", "[", 
  RowBox[{"<|", 
   RowBox[{
    RowBox[{"\"\<dot\>\"", "\[Rule]", " ", 
     RowBox[{
      RowBox[{"DotPlusLayer", "[", "1", "]"}], ">"}]}], ",", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], "\[Rule]", " ", 
       "\"\<dot\>\""}], ",", " ", "\"\<Target1\>\""}], "}"}]}]}]}]], "Code",
 CellChangeTimes->{{3.692911226774029*^9, 3.6929113434503736`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"#", "\[Rule]", " ", 
       RowBox[{"{", 
        RowBox[{"Plus", "@@", " ", "#"}], "}"}]}], ")"}], " ", "&"}], " ", "/@",
     " ", 
    RowBox[{"RandomReal", "[", 
     RowBox[{"1000", ",", " ", 
      RowBox[{"{", 
       RowBox[{"100", ",", " ", "3"}], "}"}]}], "]"}]}]}], ";"}]], "Code",
 CellChangeTimes->{{3.692909979575068*^9, 3.6929099889065027`*^9}}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.692909956984123*^9, 3.692909957412067*^9}}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.692909441834717*^9, 3.692909447300013*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{838, 1005},
WindowMargins->{{Automatic, 0}, {Automatic, 0}},
Magnification:>1.25 Inherited,
FrontEndVersion->"11.0 for Mac OS X x86 (32-bit, 64-bit Kernel) (July 28, \
2016)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[422, 15, 100, 1, 114, "Title"],
Cell[CellGroupData[{
Cell[547, 20, 95, 1, 81, "Chapter"],
Cell[CellGroupData[{
Cell[667, 25, 233, 5, 164, "Subchapter"],
Cell[CellGroupData[{
Cell[925, 34, 323, 7, 64, "Code"],
Cell[1251, 43, 22317, 512, 83, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[23605, 560, 471, 11, 64, "Code"],
Cell[24079, 573, 20828, 415, 73, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[44944, 993, 126, 2, 64, "Code"],
Cell[45073, 997, 161, 2, 39, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[45271, 1004, 243, 5, 64, "Code"],
Cell[45517, 1011, 286, 6, 39, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[45840, 1022, 241, 6, 64, "Code"],
Cell[46084, 1030, 2920, 61, 300, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[49053, 1097, 300, 5, 207, "Subchapter"],
Cell[CellGroupData[{
Cell[49378, 1106, 690, 17, 89, "Code"],
Cell[50071, 1125, 6350, 132, 111, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[56458, 1262, 455, 10, 64, "Code"],
Cell[56916, 1274, 6209, 129, 111, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[63162, 1408, 131, 2, 64, "Code"],
Cell[63296, 1412, 95, 1, 39, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[63428, 1418, 211, 4, 64, "Code"],
Cell[63642, 1424, 281, 6, 39, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[63960, 1435, 362, 10, 64, "Code"],
Cell[64325, 1447, 9374, 167, 295, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[73736, 1619, 442, 10, 64, "Code"],
Cell[74181, 1631, 7222, 150, 129, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[81452, 1787, 228, 5, 164, "Subchapter"],
Cell[81683, 1794, 7272, 151, 129, "Output"],
Cell[88958, 1947, 597, 17, 64, "Code"],
Cell[CellGroupData[{
Cell[89580, 1968, 312, 6, 64, "Code"],
Cell[89895, 1976, 7159, 148, 129, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[97091, 2129, 451, 13, 64, "Code"],
Cell[97545, 2144, 54007, 886, 379, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[151589, 3035, 549, 14, 89, "Code"],
Cell[152141, 3051, 89110, 1677, 460, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[241312, 4735, 80, 1, 81, "Chapter"],
Cell[CellGroupData[{
Cell[241417, 4740, 135, 1, 79, "Subchapter"],
Cell[CellGroupData[{
Cell[241577, 4745, 756, 19, 113, "Code"],
Cell[242336, 4766, 20803, 414, 73, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[263176, 5185, 157, 3, 64, "Code"],
Cell[263336, 5190, 233, 5, 39, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[263606, 5200, 242, 5, 64, "Code"],
Cell[263851, 5207, 13280, 316, 73, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[277168, 5528, 282, 7, 64, "Code"],
Cell[277453, 5537, 96, 1, 39, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[277586, 5543, 523, 12, 89, "Code"],
Cell[278112, 5557, 20832, 415, 73, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[298981, 5977, 157, 3, 64, "Code"],
Cell[299141, 5982, 261, 6, 39, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[299463, 5995, 70, 1, 81, "Chapter"],
Cell[CellGroupData[{
Cell[299558, 6000, 102, 1, 79, "Subchapter"],
Cell[CellGroupData[{
Cell[299685, 6005, 89, 1, 54, "Subsection"],
Cell[CellGroupData[{
Cell[299799, 6010, 1071, 28, 161, "Code"],
Cell[300873, 6040, 175, 4, 39, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[301109, 6051, 83, 1, 79, "Subchapter"],
Cell[CellGroupData[{
Cell[301217, 6056, 836, 22, 137, "Code"],
Cell[302056, 6080, 5790, 119, 111, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[307907, 6206, 91, 1, 81, "Chapter"],
Cell[CellGroupData[{
Cell[308023, 6211, 168, 2, 79, "Subchapter"],
Cell[CellGroupData[{
Cell[308216, 6217, 337, 7, 64, "Code"],
Cell[308556, 6226, 22289, 511, 83, "Output"]
}, Open  ]],
Cell[330860, 6740, 384, 9, 64, "Code"],
Cell[CellGroupData[{
Cell[331269, 6753, 320, 7, 64, "Code"],
Cell[331592, 6762, 20882, 416, 73, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[352511, 7183, 423, 9, 113, "Code"],
Cell[352937, 7194, 20805, 414, 73, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[373791, 7614, 252, 5, 164, "Subchapter"],
Cell[374046, 7621, 622, 17, 113, "Code"],
Cell[CellGroupData[{
Cell[374693, 7642, 281, 6, 64, "Code"],
Cell[374977, 7650, 1956, 44, 302, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[376972, 7699, 266, 5, 170, "Chapter"],
Cell[CellGroupData[{
Cell[377263, 7708, 90, 1, 66, "Chapter"],
Cell[CellGroupData[{
Cell[377378, 7713, 119, 1, 79, "Subchapter"],
Cell[CellGroupData[{
Cell[377522, 7718, 102, 1, 54, "Subsection"],
Cell[CellGroupData[{
Cell[377649, 7723, 216, 5, 64, "Code"],
Cell[377868, 7730, 22135, 509, 191, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[400040, 8244, 169, 3, 64, "Code"],
Cell[400212, 8249, 101, 1, 39, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[400350, 8255, 184, 3, 43, "Subsubsection"],
Cell[CellGroupData[{
Cell[400559, 8262, 219, 4, 64, "Code"],
Cell[400781, 8268, 20710, 414, 73, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[421528, 8687, 145, 3, 64, "Code"],
Cell[421676, 8692, 608, 13, 66, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[422345, 8712, 106, 1, 54, "Subsection"],
Cell[CellGroupData[{
Cell[422476, 8717, 305, 7, 64, "Code"],
Cell[422784, 8726, 12869, 306, 132, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[435690, 9037, 323, 6, 102, "Subsubsection"],
Cell[CellGroupData[{
Cell[436038, 9047, 243, 5, 64, "Code"],
Cell[436284, 9054, 22115, 509, 191, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[458436, 9568, 452, 12, 89, "Code"],
Cell[458891, 9582, 343, 8, 39, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[459271, 9595, 264, 5, 64, "Code"],
Cell[459538, 9602, 1024, 27, 92, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[460599, 9634, 263, 5, 64, "Code"],
Cell[460865, 9641, 235, 6, 39, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[461149, 9653, 314, 7, 73, "Subsubsection"],
Cell[CellGroupData[{
Cell[461488, 9664, 220, 5, 64, "Code"],
Cell[461711, 9671, 10254, 258, 132, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[472002, 9934, 196, 4, 64, "Code"],
Cell[472201, 9940, 223, 7, 39, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[472461, 9952, 163, 3, 64, "Code"],
Cell[472627, 9957, 7610, 206, 132, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[480274, 10168, 306, 8, 64, "Code"],
Cell[480583, 10178, 222, 5, 39, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[480866, 10190, 96, 1, 54, "Subsection"],
Cell[CellGroupData[{
Cell[480987, 10195, 110, 1, 43, "Subsubsection"],
Cell[CellGroupData[{
Cell[481122, 10200, 379, 10, 64, "Code"],
Cell[481504, 10212, 337, 9, 39, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[481878, 10226, 212, 4, 64, "Code"],
Cell[482093, 10232, 94, 1, 39, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[482224, 10238, 276, 8, 64, "Code"],
Cell[482503, 10248, 259, 8, 43, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[482799, 10261, 117, 2, 64, "Code"],
Cell[482919, 10265, 98, 1, 39, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[483102, 10275, 97, 1, 81, "Chapter"],
Cell[CellGroupData[{
Cell[483224, 10280, 113, 1, 79, "Subchapter"],
Cell[CellGroupData[{
Cell[483362, 10285, 415, 10, 64, "Code"],
Cell[483780, 10297, 8443, 169, 129, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[492260, 10471, 517, 14, 64, "Code"],
Cell[492780, 10487, 27837, 567, 309, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[520654, 11059, 738, 18, 89, "Code"],
Cell[521395, 11079, 27907, 568, 177, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[549339, 11652, 454, 13, 64, "Code"],
Cell[549796, 11667, 25196, 520, 236, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[575041, 12193, 98, 1, 79, "Subchapter"],
Cell[CellGroupData[{
Cell[575164, 12198, 137, 1, 43, "Subsubsection"],
Cell[575304, 12201, 501, 15, 64, "Code"],
Cell[CellGroupData[{
Cell[575830, 12220, 305, 7, 64, "Code"],
Cell[576138, 12229, 4638, 96, 93, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[580813, 12330, 259, 5, 64, "Code"],
Cell[581075, 12337, 5049, 102, 308, "Output"]
}, Open  ]],
Cell[586139, 12442, 190, 4, 64, "Code"],
Cell[CellGroupData[{
Cell[586354, 12450, 245, 6, 64, "Code"],
Cell[586602, 12458, 264, 7, 39, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[586915, 12471, 202, 4, 73, "Subsubsection"],
Cell[587120, 12477, 458, 12, 64, "Code"],
Cell[587581, 12491, 477, 14, 64, "Code"],
Cell[588061, 12507, 92, 1, 39, "Input"],
Cell[588156, 12510, 92, 1, 39, "Input"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

